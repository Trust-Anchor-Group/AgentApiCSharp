openapi: 3.0.0
info:
  description: "The Neuron® publishes an Agent API that can be used by agents that\
    \ do not wish to, or are able\nto, connect to the Neuron® via any of the XMPP\
    \ bindings available, such as standard binary \nsocket, websocket or Synchronous\
    \ HTTP (BOSH). Via the Agent API, the agent is permitted to do \nbasic tasks,\
    \ such as send messages, create Agent IDs, and sign contracts with such Agent\
    \ IDs. \nThe Full API is\n"
  title: Agent API
  version: 1.0.0
servers:
- description: Sample Server
  url: "https://{domain}"
  variables:
    domain:
      default: localhost
      description: This variable determines the domain of the API
paths:
  /Agent/Account/DomainInfo:
    get:
      description: "Gets human-readable information\nabout the domain of the server.\
        \ The request can be made anonymously. No authentication is \nrequired. This\
        \ resource is typically called in the beginning of an on-boarding process,\
        \ \nwhere the user is given a choice to select service provider (i.e. domain).\n"
      operationId: getDomainInfo
      parameters:
      - description: The Accept-Language is used to select which language to use for
          human-readable strings returned.
        explode: false
        in: header
        name: Accept-Language
        required: false
        schema:
          default: en
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainInfoResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainInfoResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      summary: Get Domain Info
      tags:
      - Account
  /Agent/Account/Create:
    post:
      description: "Creates an agent account on the server (and logs in to it). This\
        \ account can be used \nwhen logging in, using the Agent API, but also to\
        \ connect to the Neuron(R) using any of \nthe available XMPP bindings available.\
        \ The account that is created, is considered a \nregular XMPP account on the\
        \ broker.\n\nWhen first created, the account is in a disabled state. You need\
        \ to validate the\ne-mail address provided in the request first, before the\
        \ account can be enabled.\nAn e-mail with a verification code will be sent\
        \ to the e-mail address provided in\nthe request.\n\n**Security Notice**:\
        \ This resource requires an API Key and Secret to be provided.\nThese are\
        \ [requested from the operator]({domain}/RequestApiKey.md) and must be protected.\n\
        If compromized, the operator can choose to disable the key. This resource\
        \ should\ntherefore only be used by clients that can protect such credentials.\
        \ If creating \nan account in an environment where protecting such credentials\
        \ is not possible \n(such as a web page running on a client browser), use\
        \ the \n[CreateWebForm]({domain}/CreateWebForm.md) resource instead. Each\
        \ API Key is given a number \nof accounts that can be created with that key.\
        \ If that limit is reached, no more \naccounts can be created using that key,\
        \ until the limit is increased or existing\naccounts created by that API Key\
        \ is deleted.\n\nInput Parameters\n-------------------\n\n| Parameter    |\
        \ Description |\n|-------------|------------|\n| `PUserName`  | User Name\
        \ of the account to create. |\n| `PEMail`     | e-Mail address of the user.\
        \ |\n| `PPassword`  | Password to use. |\n| `PApiKey`    | API Key to use,\
        \ to get privileges to create an account. |\n| `PNonce`     | A unique random\
        \ string, at least 32 characters long, with sufficient entropy to not be reused\
        \ again. If reused, an error will be returned. |\n| `PSignature` | Cryptographic\
        \ signature of request. |\n| `PSeconds`   | Requested number of seconds before\
        \ the JWT token that will be issued expires. |\n\nResponse Parameters\n-----------------------\n\
        \n| Parameter   | Description |\n|------------|------------|\n| `PCreated`\
        \  | When account was created (server timestamp). |\n| `PEnabled`  | If account\
        \ is enabled or not. When creating an account, it's disabled by default, until\
        \ the e-mail address has been validated. |\n| `PCanRelay` | If account can\
        \ be used to relay e-mails. |\n| `PJwt`      | A token representing the login\
        \ to the account. This token is seant as a [Bearer token](https://www.rfc-editor.org/rfc/rfc6750)\
        \ in requests requiring authentication. |\n| `PExpires`  | When the JWT token\
        \ expires. The token needs to be renewed before this token expires, if the\
        \ client wishes to maintain the connection. After the token expires, the client\
        \ needs to login again. |\n\n**Note**: If trying to create an account that\
        \ already exists, and that is enabled, but \nusing the same password as the\
        \ existing account, and if PLAIN authentication is permitted\non the server,\
        \ the request will be treated as a login request. The timestamp of the \n\
        creation of the account can be seen in the response to the request.\n\nCalculating\
        \ Signature\n------------------------\n\nThe signature in `PSignature` is\
        \ calculated as follows.\n\n1. Concatenate the strings `PUserName \":\" Host\
        \ \":\" PEMail \":\" PPassword \":\" PApiKey \":\" PNonce`\nand call it `s`,\
        \ where `Host` is the host/domain name of the server. It is taken from\nthe\
        \ HTTP `Host` request header, so it must be the same as is used in the URL\
        \ of the\nrequest.\n\n2. UTF-8 encode the *secret* corresponding to the API\
        \ key, and call it `Key`.\n\n3. UTF-8 encode the string `s`, and call it `Data`.\n\
        \n4. Calculate the HMAC-SHA256 signature using `Key` and `Data`, and call\
        \ it `H`.\n\n5. Base64-encode `H`. The result is the signature of the request.\n\
        \nSignature Audits\n-------------------\n\nSignatures are audited. If too\
        \ many failed signature attempts are received in a row from\na given remote\
        \ endpoint, that endpoint will be temporarily blocked from further\nattempts.\
        \ Error message will contain a timestamp when new attempts can be made.\n\
        If continuing failing, a remote endpoint may become permanently blocked from\
        \ accessing\nthe API.\n\nAlternative Name Suggestions\n-------------------------------\n\
        \nIf unable to create an account, suggestions for alternative account names\
        \ will be returned as\nHTTP headers, with header names `X-AlternativeNameN`,\
        \ where N is a random number starting with\n`1`. Digits will be two or more\
        \ digits.\n"
      operationId: createAccount
      requestBody:
        content:
          application/json:
            example:
              userName: "Required(Str(PUserName)),"
              eMail: "Required(Str(PEMail)),"
              password: "Required(Str(PPassword)),"
              apiKey: "Required(Str(PApiKey)),"
              nonce: "Required(Str(PNonce)),"
              signature: "Required(Str(PSignature)),"
              seconds: Required(Int(0 < PSeconds <= 3600))
            schema:
              $ref: '#/components/schemas/CreateAccountBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/CreateAccountBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccountResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/CreateAccountResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      summary: Create Account
      tags:
      - Account
  /Agent/Account/GetSessionToken:
    post:
      description: "Allows the client to get session information about a newly created\
        \ account, created using a web form, without having to provide user credentials\
        \ again."
      operationId: getSessionToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSessionTokenBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetSessionTokenBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionTokenResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetSessionTokenResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      summary: Get newly created account created using a web form
      tags:
      - Account
  /Agent/Account/VerifyEMail:
    post:
      operationId: verifyEMail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEMailBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/VerifyEMailBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEMailResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/VerifyEMailResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      summary: Verify E-Mail
      tags:
      - Account
  /Agent/Account/Login:
    post:
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      summary: Login
      tags:
      - Account
  /Agent/Account/WwwLogin:
    post:
      operationId: wwwLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WwwLoginBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/WwwLoginBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - WwwAuth: []
      summary: Login
      tags:
      - Account
  /Agent/Account/Refresh:
    post:
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/RefreshBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Refresh
      tags:
      - Account
  /Agent/Account/Logout:
    post:
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/LogoutBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AckResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - Account
  /Agent/Account/Recover:
    post:
      operationId: recover
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoverBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/RecoverBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecoverResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/RecoverResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      summary: Recover Account
      tags:
      - Account
  /Agent/Xmpp/SendTextMessage:
    post:
      description: Allows the client to send a plain text chat message from its account
        to an XMPP recipient.
      operationId: sendTextMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendTextMessageBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/SendTextMessageBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StanzaResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/StanzaResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Send Text Message
      tags:
      - XMPP
  /Agent/Xmpp/SendFormattedMessage:
    post:
      description: "Allows the client to send a formatted chat message from its account\
        \ to an XMPP recipient. A formatted message contains the message in plain\
        \ text, Markdown and HTML. The recipient, depending on capabilities, will\
        \ select the representation it handles best to present the message."
      operationId: sendFormattedMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendFormattedMessage'
          text/xml:
            schema:
              $ref: '#/components/schemas/SendFormattedMessage'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StanzaResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/StanzaResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Send Formatted Message
      tags:
      - XMPP
  /Agent/Xmpp/SendXmlMessage:
    post:
      description: Allows the client to send a custom XML normal message from its
        account to an XMPP recipient.
      operationId: sendXmlMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendXmlMessage'
          text/xml:
            schema:
              $ref: '#/components/schemas/SendXmlMessage'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StanzaResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/StanzaResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Send XML Message
      tags:
      - XMPP
  /Agent/Xmpp/SendPresenceSubscription:
    post:
      description: Allows the client to send a presence subscription stanza from its
        account to an XMPP recipient.
      operationId: sendPresenceSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendPresenceSubscriptionBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/SendPresenceSubscriptionBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresenceSubscriptionResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/PresenceSubscriptionResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Send Presence Subscription
      tags:
      - XMPP
  /Agent/Xmpp/SendPresenceUnsubscription:
    post:
      description: Allows the client to send a presence unsubscription stanza from
        its account to an XMPP recipient.
      operationId: sendPresenceUnsubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendPresenceUnsubscriptionBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/SendPresenceUnsubscriptionBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StanzaResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/StanzaResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Send Presence Unsubscription
      tags:
      - XMPP
  /Agent/Xmpp/SendSubscriptionAccepted:
    post:
      description: Allows the client to accept a presence subscription made to its
        account.
      operationId: sendSubscriptionAccepted
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendSubscriptionAcceptedBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/SendSubscriptionAcceptedBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendSubscriptionAcceptedResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/SendSubscriptionAcceptedResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Send Subscription Accepted
      tags:
      - XMPP
  /Agent/Xmpp/SendSubscriptionDeclined:
    post:
      description: Allows the client to decline a presence subscription made to its
        account.
      operationId: sendSubscriptionDeclined
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendSubscriptionDeclinedBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/SendSubscriptionDeclinedBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StanzaResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/StanzaResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Send Subscription Declined
      tags:
      - XMPP
  /Agent/Xmpp/GetRoster:
    post:
      description: Allows the client to get the roster of its account.
      operationId: getRoster
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRosterBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetRosterBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRosterResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetRosterResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Roster
      tags:
      - XMPP
  /Agent/Xmpp/GetRosterItem:
    post:
      description: Allows the client to get a specific roster item of its account.
      operationId: getRosterItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRosterItemBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetRosterItemBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RosterItem'
            text/xml:
              schema:
                $ref: '#/components/schemas/RosterItem'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Roster Item
      tags:
      - XMPP
  /Agent/Xmpp/SetRosterItem:
    post:
      description: Sets information about a specific roster item for the account.
      operationId: setRosterItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRosterItemBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/SetRosterItemBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RosterItem'
            text/xml:
              schema:
                $ref: '#/components/schemas/RosterItem'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Set Roster Item
      tags:
      - XMPP
  /Agent/Xmpp/RemoveRosterItem:
    post:
      description: Removes a specific roster item from the account.
      operationId: removeRosterItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveRosterItemBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/RemoveRosterItemBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RosterItem'
            text/xml:
              schema:
                $ref: '#/components/schemas/RosterItem'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Remove Roster Item
      tags:
      - XMPP
  /Agent/Xmpp/PresenceProbe:
    post:
      description: Gets the latest presence issued by a contact in your roster who
        has approved your presence subscription request.
      operationId: presenceProbe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresenceProbeBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/PresenceProbeBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProbeResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProbeResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Presence Probe
      tags:
      - XMPP
  /Agent/Xmpp/InformationQuery:
    post:
      description: "Sends an Information Query (iq) to an entity on the XMPP network,\
        \ given its Full JID. For connected entities, you need to have an presence\
        \ subscription to that entity, approved by the entity, to get the Full JID.\
        \ You get the Full JID using the Presence Probe resource."
      operationId: informationQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InformationQueryBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/InformationQueryBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResultJson'
            text/xml:
              schema:
                $ref: '#/components/schemas/QueryResultXml'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Information Query
      tags:
      - XMPP
  /Agent/Xmpp/PopMessages:
    post:
      operationId: popMessages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PopMessagesBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/PopMessagesBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/MessageResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Pop Messages
      tags:
      - XMPP
  /Agent/Storage/SavePrivateXml:
    post:
      description: Saves private XML data to the server.
      operationId: savePrivateXml
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavePrivateXmlBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/SavePrivateXmlBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stored'
            text/xml:
              schema:
                $ref: '#/components/schemas/Stored'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Save Private XML
      tags:
      - Storage
  /Agent/Storage/LoadPrivateXml:
    post:
      description: Loads private XML data from the server.
      operationId: loadPrivateXml
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadPrivateXmlBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/LoadPrivateXmlBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateXml'
            text/xml:
              schema:
                $ref: '#/components/schemas/PrivateXml'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Load Private XML
      tags:
      - Storage
  /Agent/Storage/Content:
    post:
      operationId: postContent
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/postContent_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponse'
          description: Content successfully uploaded
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Upload new content using form data
      tags:
      - Storage
  /Agent/Storage/Content/{username}/{contentId}:
    put:
      operationId: putContent
      parameters:
      - description: Username of the agent uploading the content
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - description: Content ID with file extension matching the Content-Type
        explode: false
        in: path
        name: contentId
        required: true
        schema:
          pattern: ^.+\..+$
          type: string
        style: simple
      - description: Controls the visibility of the uploaded content
        explode: false
        in: header
        name: X-Visibility
        required: true
        schema:
          enum:
          - Public
          - Presence
          - Private
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              format: binary
              type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ContentResponse'
          description: Content successfully uploaded
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Upload new content with Content ID
      tags:
      - Storage
  /Agent/Storage/Content/{path}:
    delete:
      operationId: deleteContent
      parameters:
      - description: The path to the uploaded content
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Deletes content from path
      tags:
      - Storage
    get:
      operationId: getContent
      parameters:
      - description: The path to the uploaded content
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ContentResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get content from path
      tags:
      - Storage
  /Agent/Crypto/GetAlgorithms:
    post:
      description: Gets a list of algorithms supported by the server.
      operationId: getAlgorithms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAlgorithmsBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetAlgorithmsBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmsResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/AlgorithmsResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      summary: Get Algorithms
      tags:
      - Crypto
  /Agent/Crypto/CreateKey:
    post:
      description: |
        Allows the client to create a cryptographic key on the server, and protect it with a password. The key will be stored encrypted on the server, protected with the key password. The creation of a key will require the user to provide the account password again.
      operationId: createKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeyBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/CreateKeyBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stored'
            text/xml:
              schema:
                $ref: '#/components/schemas/Stored'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      summary: Create Key
      tags:
      - Crypto
  /Agent/Crypto/GetPublicKey:
    post:
      description: Gets the public key of a key pair.
      operationId: getPublicKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPublicKeyBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetPublicKeyBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPublicKeyResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetPublicKeyResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      summary: Get Public Key
      tags:
      - Crypto
  /Agent/Legal/ValidatePNr:
    post:
      description: Allows the client to validate a personal number before using it
        to apply for a Legal Identity.
      operationId: validatePNr
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidatePNrBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/ValidatePNrBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidatePNrResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ValidatePNrResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Validate Personal Number
      tags:
      - Legal
  /Agent/Legal/GetApplicationAttributes:
    post:
      description: Allows the client to get the attributes of a legal identity application.
      operationId: getApplicationAttributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetApplicationAttributesBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetApplicationAttributesBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationAttributesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetApplicationAttributesResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Application Attributes
      tags:
      - Legal
  /Agent/Legal/GetIdentity:
    post:
      description: "Allows the client to get an Identity. If the Identity belongs\
        \ to someone else, and the client is not authorized access to the Identity,\
        \ an error will be returned."
      operationId: getIdentity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIdentityBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetIdentityBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResponseJSON'
            text/xml:
              schema:
                $ref: '#/components/schemas/IdentityResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Legal Identity
      tags:
      - Legal
  /Agent/Legal/GetIdentities:
    post:
      description: "Allows the client to get a list of identities. If the identities\
        \ belong to someone else, and the client is not authorized access to the identities,\
        \ an error will be returned."
      operationId: getIdentities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIdentitiesBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetIdentitiesBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentitiesResponseJSON'
            text/xml:
              schema:
                $ref: '#/components/schemas/IdentitiesResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Legal Identities
      tags:
      - Legal
  /Agent/Legal/AddIdAttachment:
    post:
      description: Allows the client to add an attachment to a Legal Identity application.
      operationId: addIdAttachment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddIdAttachmentBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/AddIdAttachmentBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/IdentityResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Add attachment to legal id application (NOT IMPLEMENTED)
      tags:
      - Legal
  /Agent/Legal/ReadyForApproval:
    post:
      description: "When an ID application is ready (all attachments have been signed\
        \ and uploaded), \nthe client can call this resource to flag the application\
        \ as ready for approval. \n\nThis will execute any automated onboarding procedures\
        \ to analyze the application, and, if passing them, will take the identity\
        \ to the approved state. \nThey can also take the application to the rejected\
        \ state, in case they find the information invalid.\n"
      operationId: readyForApproval
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadyForApprovalBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/ReadyForApprovalBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AckResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Ready for Approval
      tags:
      - Legal
  /Agent/Legal/GetServiceProviderForIdReview:
    post:
      description: Allows the client to retrieve a list of available service providers
        that can be used to review a recent ID application.
      operationId: getServiceProviderForIdReview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetServiceProvidersForIdReviewBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetServiceProvidersForIdReviewBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvidersResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProvidersResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Service Provider for ID Review
      tags:
      - Legal
  /Agent/Legal/SelectReviewService:
    post:
      description: "Allows the client to select an internal peer review service, for\
        \ reviewing a recent identity application."
      operationId: selectReviewService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectReviewServiceBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/SelectReviewServiceBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AckResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Select Review Service
      tags:
      - Legal
  /Agent/Legal/AuthorizeAccessToId:
    post:
      description: "Allows the client to (pre-)authorize access to (or remove authorization\
        \ to access) one of its Legal Identities to a remote party. When (if) the\
        \ remote party requests the ID, the broker will return it automatically, if\
        \ already authorized. If not authorized, a petition to access the identity\
        \ will be sent to the client for manual approval (or rejection)."
      operationId: authorizeAccessToId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizeAccessToIdBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/AuthorizeAccessToIdBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AckResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Authorize Access to ID
      tags:
      - Legal
  /Agent/Legal/PetitionPeerReview:
    post:
      description: Allows the client to petition a peer review service to review a
        recent identity application.
      operationId: petitionPeerReview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetitionPeerReviewBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/PetitionPeerReviewBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AckResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Petition Peer Review
      tags:
      - Legal
  /Agent/Legal/PetitionId:
    post:
      description: "Allows the client to petition the owner of a Legal Identity, for\
        \ information about the identity."
      operationId: petitionId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetitionIdBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/PetitionIdBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AckResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Petition ID
      tags:
      - Legal
  /Agent/Legal/PetitionSignature:
    post:
      description: Allows the client to petition the owner of a Legal Identity for
        a digital signature on some digital content.
      operationId: petitionSignature
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetitionSignatureBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/PetitionSignatureBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AckResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Petition Signature
      tags:
      - Legal
  /Agent/Legal/CreateContract:
    post:
      description: "Allows the client to create a new smart contract, based on an\
        \ existing (and approved) contract template. The request must be signed using\
        \ one of the keys created by the client."
      operationId: createContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContractBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/CreateContractBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ContractResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Create Contract
      tags:
      - Legal
  /Agent/Legal/GetContract:
    post:
      description: "Allows the client to get a Smart Contract. If the Contract belongs\
        \ to someone else, and the client is not authorized access to the Contract,\
        \ an error will be returned."
      operationId: getContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetContractBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetContractBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ContractResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Contract
      tags:
      - Legal
  /Agent/Legal/SignContract:
    post:
      description: Allows the client to sign a Smart Contract. The request must be
        signed using one of the keys created by the client.
      operationId: signContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignContractBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/SignContractBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ContractResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Sign Contract
      tags:
      - Legal
  /Agent/Legal/SignData:
    post:
      description: Allows the client to sign binary data.
      operationId: signData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignDataBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/SignDataBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/SignatureResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Sign Data
      tags:
      - Legal
  /Agent/Legal/GetCreatedContracts:
    post:
      description: Allows the client to get a list of all Smart Contracts created
        by the client.
      operationId: getCreatedContracts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCreatedContractsBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetCreatedContractsBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ContractsResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Created Contracts
      tags:
      - Legal
  /Agent/Legal/AuthorizeAccessToContract:
    post:
      description: |
        Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Smart Contracts (or one of the Smart Contracts for which the client is part) to a remote party. When (if) the remote party requests access to the the Smart Contract, the broker will return it automatically, if already authorized. If not authorized, a petition to access the Smart Contract will be sent to the clients of the part of the contract for manual approval.
      operationId: authorizeAccessToContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizeAccessToContractBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/AuthorizeAccessToContractBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AckResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Authorize Access to Contract
      tags:
      - Legal
  /Agent/Wallet/GetBalance:
    post:
      description: Allows the client to retrieve information about the current state
        of its wallet.
      operationId: getBalance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBalanceBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetBalanceBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBalanceResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetBalanceResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Balance
      tags:
      - Wallet
  /Agent/Wallet/ProcessEDalerUri:
    post:
      description: Allows the client to process an eDaler URI.
      operationId: processEDalerUri
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessEDalerUriBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/ProcessEDalerUriBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProcessResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Process eDaler URI
      tags:
      - Wallet
  /Agent/Wallet/GetServiceProvidersForBuyingEDaler:
    post:
      description: Allows the client to retrieve a list of available service providers
        that can be used to buy eDaler.
      operationId: getServiceProvidersForBuyingEDaler
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetServiceProvidersForBuyingEDalerBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetServiceProvidersForBuyingEDalerBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvidersResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProvidersResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Service Providers for Buying eDaler
      tags:
      - Wallet
  /Agent/Wallet/GetServiceProvidersForSellingEDaler:
    post:
      description: Allows the client to retrieve a list of available service providers
        that can be used to sell eDaler.
      operationId: getServiceProvidersForSellingEDaler
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetServiceProvidersForSellingEDalerBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetServiceProvidersForSellingEDalerBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvidersResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProvidersResponse'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Service Providers for Selling eDaler
      tags:
      - Wallet
  /Agent/Wallet/GetPaymentOptionsForBuyingEDaler:
    post:
      description: |
        Allows the client to initiate the process of getting payment options for buying eDaler.
      operationId: getPaymentOptionsForBuyingEDaler
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPaymentOptionsForBuyingEDalerBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetPaymentOptionsForBuyingEDalerBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInformation'
            text/xml:
              schema:
                $ref: '#/components/schemas/TransactionInformation'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Payment Options for Buying eDaler
      tags:
      - Wallet
  /Agent/Wallet/GetPaymentOptionsForSellingEDaler:
    post:
      description: |
        Allows the client to initiate the process of getting payment options for selling eDaler.
      operationId: getPaymentOptionsForSellingEDaler
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPaymentOptionsForSellingEDalerBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetPaymentOptionsForSellingEDalerBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInformation'
            text/xml:
              schema:
                $ref: '#/components/schemas/TransactionInformation'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Payment Options for Selling eDaler
      tags:
      - Wallet
  /Agent/Wallet/InitiateBuyEDaler:
    post:
      description: "Allows the client to initiate the process of buying eDaler, using\
        \ a service provider that does not use a smart contract as the basis for the\
        \ transaction (i.e. a service provider that will require the client to open\
        \ a third-party page to complete the transaction)."
      operationId: initiateBuyEDaler
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiateBuyEDalerBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/InitiateBuyEDalerBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInformation'
            text/xml:
              schema:
                $ref: '#/components/schemas/TransactionInformation'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Initiate Buy eDaler
      tags:
      - Wallet
  /Agent/Wallet/InitiateSellEDaler:
    post:
      description: "Allows the client to initiate the process of selling eDaler, using\
        \ a service provider that does not use a smart contract as the basis for the\
        \ transaction (i.e. a service provider that will require the client to open\
        \ a third-party page to complete the transaction)."
      operationId: initiateSellEDaler
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiateSellEDalerBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/InitiateSellEDalerBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInformation'
            text/xml:
              schema:
                $ref: '#/components/schemas/TransactionInformation'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Initiate Sell eDaler
      tags:
      - Wallet
  /Agent/Wallet/GetTransactionInformation:
    post:
      description: |
        Allows the client to get updated transaction information from the server. It also allows the client to re-register the current Tab ID (from Events.js) and function to call, in case changes are registered with the server-side transaction object. Call this function to restart event notification if you navigate between pages.
      operationId: getTransactionInformation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTransactionInformationBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetTransactionInformationBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInformation'
            text/xml:
              schema:
                $ref: '#/components/schemas/TransactionInformation'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Transaction Information
      tags:
      - Wallet
  /Agent/Tokens/GetTokens:
    post:
      description: Gets a list of tokens on the Neuron® owned by the account.
      operationId: getTokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTokensBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetTokensBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/TokensResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Tokens
      tags:
      - Tokens
  /Agent/Tokens/GetContractTokens:
    post:
      description: "Gets a list of tokens on the Neuron® owned by the account, for\
        \ a specific contract."
      operationId: getContractTokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetContractTokensBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetContractTokensBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/TokensResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Contract Tokens
      tags:
      - Tokens
  /Agent/Tokens/GetCreationAttributes:
    post:
      description: Gets the creation attributes for a specific token.
      operationId: getCreationAttributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCreationAttributesBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetCreationAttributesBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreationAttributes'
            text/xml:
              schema:
                $ref: '#/components/schemas/CreationAttributes'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Creation Attributes
      tags:
      - Tokens
  /Agent/Tokens/GetToken:
    post:
      description: Gets information about a specific token.
      operationId: getToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTokenBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetTokenBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/TokenResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Token
      tags:
      - Tokens
  /Agent/Tokens/GetDescription:
    post:
      description: Creates a report relating to a state machine associated with a
        token.
      operationId: getDescription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDescriptionBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetDescriptionBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/ReportResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Description
      tags:
      - Tokens
  /Agent/Tokens/AddTextNote:
    post:
      description: Adds a text note to a token.
      operationId: addTextNote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTextNoteBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/AddTextNoteBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/NoteResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Add Text Note
      tags:
      - Tokens
  /Agent/Tokens/AddXmlNote:
    post:
      description: Adds an XML note to a token.
      operationId: addXmlNote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddXmlNoteBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/AddXmlNoteBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/NoteResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Add XML Note
      tags:
      - Tokens
  /Agent/Tokens/GetTokenEvents:
    post:
      description: Gets a list of events for a specific token.
      operationId: getTokenEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTokenEventsBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetTokenEventsBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/EventsResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Token Events
      tags:
      - Tokens
  /Agent/StateMachines/GetCurrentState:
    post:
      description: "Gets the current state of a state machine, associated with a token."
      operationId: getCurrentState
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCurrentStateBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/GetCurrentStateBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/StateResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Get Current State
      tags:
      - StateMachines
  /Agent/StateMachines/CreateReport:
    post:
      description: Creates a report relating to a state machine associated with a
        token.
      operationId: createReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReportBody'
          text/xml:
            schema:
              $ref: '#/components/schemas/CreateReportBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/ReportResult'
          description: OK
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: "Bad request, most probably due to the content sent in the\
            \ request not conforming to the specification."
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized access to a resource was prevented. Client must
            login first.
        "403":
          content:
            text/plain:
              schema:
                type: string
          description: "Forbidden access to resource was stopped. Client does not\
            \ have sufficient privileges to access resource or perform requested action,\
            \ or access is done using unencrypted, or a connection that is not sufficiently\
            \ encrypted."
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: "Resource, or item referenced in request, was not found."
        "405":
          content:
            text/plain:
              schema:
                type: string
          description: Method not allowed. The method used in the request is not allowed
            for the resource.
        "406":
          content:
            text/plain:
              schema:
                type: string
          description: "Content sent, or content requested in a format that is not\
            \ supported by the resource."
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: "Too many requests have been made, for this resource, or any\
            \ of the referenced resources in the request."
      security:
      - BearerAuth: []
      summary: Create Report
      tags:
      - StateMachines
components:
  responses:
    BadRequestResponse:
      content:
        text/plain:
          schema:
            type: string
      description: "Bad request, most probably due to the content sent in the request\
        \ not conforming to the specification."
    UnauthorizedResponse:
      content:
        text/plain:
          schema:
            type: string
      description: Unauthorized access to a resource was prevented. Client must login
        first.
    ForbiddenResponse:
      content:
        text/plain:
          schema:
            type: string
      description: "Forbidden access to resource was stopped. Client does not have\
        \ sufficient privileges to access resource or perform requested action, or\
        \ access is done using unencrypted, or a connection that is not sufficiently\
        \ encrypted."
    NotFoundResponse:
      content:
        text/plain:
          schema:
            type: string
      description: "Resource, or item referenced in request, was not found."
    MethodNotAllowedResponse:
      content:
        text/plain:
          schema:
            type: string
      description: Method not allowed. The method used in the request is not allowed
        for the resource.
    NotAcceptableResponse:
      content:
        text/plain:
          schema:
            type: string
      description: "Content sent, or content requested in a format that is not supported\
        \ by the resource."
    TooManyRequestsResponse:
      content:
        text/plain:
          schema:
            type: string
      description: "Too many requests have been made, for this resource, or any of\
        \ the referenced resources in the request."
  schemas:
    url:
      format: uri
      type: string
    id:
      format: uuid
      type: string
    timestamp:
      format: timestamp
      type: integer
    eMail:
      format: email
      type: string
    password:
      format: password
      type: string
    DomainInfoResponse:
      example:
        domain: domain
        useEncryption: true
        humanReadableName: humanReadableName
        humanReadableNameDescription: humanReadableNameDescription
      properties:
        domain:
          description: The domain of the server
          type: string
          xml:
            attribute: true
        useEncryption:
          description: Indicates whether the server requires encryption
          type: boolean
          xml:
            attribute: true
        humanReadableName:
          description: Human-readable name of the server
          type: string
          xml:
            attribute: true
        humanReadableNameDescription:
          description: Human-readable description of the server
          type: string
          xml:
            attribute: true
      required:
      - useEncryption
      type: object
      xml:
        name: DomainInfo
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    CreateAccountBody:
      example:
        password: password
        seconds: 288
        apiKey: apiKey
        signature: signature
        userName: userName
        nonce: nonce
        eMail: eMail
      properties:
        userName:
          description: The user's name.
          type: string
          xml:
            attribute: true
        eMail:
          description: The user's email address.
          format: email
          type: string
          xml:
            attribute: true
        password:
          description: The user's password.
          format: password
          type: string
          xml:
            attribute: true
        apiKey:
          description: The API key used for identification.
          type: string
          xml:
            attribute: true
        nonce:
          description: A unique nonce for this request.
          type: string
          xml:
            attribute: true
        signature:
          description: |
            The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature.
          type: string
          xml:
            attribute: true
        seconds:
          description: The number of seconds until the request expires.
          maximum: 3600
          minimum: 0
          type: integer
          xml:
            attribute: true
      required:
      - apiKey
      - eMail
      - nonce
      - password
      - seconds
      - signature
      - userName
      type: object
      xml:
        name: CreateAccount
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    CreateAccountResponse:
      example:
        expires: 6
        created: 0
        jwt: jwt
        canRelay: true
        enabled: true
      properties:
        created:
          description: The server timestamp when the account was created.
          format: timestamp
          type: integer
          xml:
            attribute: true
        enabled:
          description: Whether the account is enabled.
          type: boolean
          xml:
            attribute: true
        canRelay:
          description: Whether the account can relay e-mails.
          type: boolean
          xml:
            attribute: true
        jwt:
          description: The JSON Web Token for authentication.
          type: string
          xml:
            attribute: true
        expires:
          description: The timestamp when the jwt token expires.
          format: timestamp
          type: integer
          xml:
            attribute: true
      required:
      - canRelay
      - created
      - enabled
      - expires
      - jwt
      type: object
      xml:
        name: AccountCreated
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetSessionTokenBody:
      type: object
      xml:
        name: GetSessionToken
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetSessionTokenResponse:
      example:
        seconds: 288
        AccountCreated:
          expires: 6
          created: 0
          jwt: jwt
          canRelay: true
          enabled: true
      properties:
        AccountCreated:
          $ref: '#/components/schemas/CreateAccountResponse'
        seconds:
          description: The number of seconds until the JWT expires.
          maximum: 3600
          minimum: 0
          type: integer
          xml:
            attribute: true
      type: object
      xml:
        name: SessionToken
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    VerifyEMailBody:
      example:
        code: code
        eMail: eMail
      properties:
        eMail:
          description: The e-mail address to verify.
          format: email
          type: string
          xml:
            attribute: true
        code:
          description: The verification code.
          type: string
          xml:
            attribute: true
      required:
      - code
      - eMail
      type: object
      xml:
        name: VerifyEMail
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    VerifyEMailResponse:
      example:
        userName: userName
        eMail: eMail
      properties:
        eMail:
          description: The e-mail address that was verified.
          format: email
          type: string
          xml:
            attribute: true
        userName:
          description: The user name of the account.
          type: string
          xml:
            attribute: true
      required:
      - eMail
      - userName
      type: object
      xml:
        name: EMailVerified
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    LoginBody:
      example:
        seconds: 288
        signature: signature
        userName: userName
        nonce: nonce
      properties:
        userName:
          description: The user name of the account.
          nullable: false
          type: string
          xml:
            attribute: true
        nonce:
          description: "A unique random string, at least 32 characters long, with\
            \ sufficient entropy to not be reused again."
          type: string
          xml:
            attribute: true
        signature:
          description: |
            The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature.
          type: string
          xml:
            attribute: true
        seconds:
          description: The number of seconds until the request expires.
          maximum: 3600
          minimum: 0
          type: integer
          xml:
            attribute: true
      required:
      - nonce
      - seconds
      - signature
      - userName
      type: object
      xml:
        name: Login
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    LoginResponse:
      example:
        expires: 0
        jwt: jwt
      properties:
        jwt:
          description: The JSON Web Token for authentication.
          type: string
          xml:
            attribute: true
        expires:
          description: The timestamp when the jwt token expires.
          type: integer
          xml:
            attribute: true
      required:
      - expires
      - jwt
      type: object
      xml:
        name: LoggedIn
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    WwwLoginBody:
      example:
        seconds: 288
      properties:
        seconds:
          description: The number of seconds until the request expires.
          maximum: 3600
          minimum: 0
          type: integer
          xml:
            attribute: true
      required:
      - seconds
      type: object
      xml:
        name: WwwLogin
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    RefreshBody:
      example:
        seconds: 288
      properties:
        seconds:
          description: The number of seconds until the request expires.
          maximum: 3600
          minimum: 0
          type: integer
          xml:
            attribute: true
      required:
      - seconds
      type: object
      xml:
        name: Refresh
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    LogoutBody:
      type: object
      xml:
        name: Logout
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    AckResponse:
      type: object
      xml:
        name: AckResponse
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    RecoverBody:
      example:
        country: country
        phoneNr: phoneNr
        userName: userName
        eMail: eMail
      properties:
        userName:
          description: The user name of the account.
          type: string
          xml:
            attribute: true
        eMail:
          description: The e-mail address of the account.
          format: email
          type: string
          xml:
            attribute: true
        country:
          description: The country of the account.
          type: string
          xml:
            attribute: true
        phoneNr:
          description: The phone number of the account.
          type: string
          xml:
            attribute: true
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    RecoverResponse:
      type: object
      xml:
        name: RecoverResponse
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    SendTextMessageBody:
      example:
        subject: subject
        language: language
        to: to
        id: id
        message: message
      properties:
        to:
          description: A Bare or Full JID (XMPP network address).
          type: string
          xml:
            attribute: true
        message:
          description: The plain text message to send.
          type: string
          xml:
            attribute: true
        subject:
          description: Optional subject of message.
          type: string
          xml:
            attribute: true
        language:
          description: Optional ISO 639-1 language code.
          type: string
          xml:
            attribute: true
        id:
          description: Optional Message ID.
          type: string
          xml:
            attribute: true
      required:
      - message
      - to
      type: object
      xml:
        name: SendTextMessage
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    SendFormattedMessage:
      example:
        subject: subject
        language: language
        to: to
        id: id
        message: message
      properties:
        to:
          description: A Bare or Full JID (XMPP network address).
          type: string
          xml:
            attribute: true
        message:
          description: The plain text message to send.
          type: string
          xml:
            attribute: true
        subject:
          description: Optional subject of message.
          type: string
          xml:
            attribute: true
        language:
          description: Optional ISO 639-1 language code.
          type: string
          xml:
            attribute: true
        id:
          description: Optional Message ID.
          type: string
          xml:
            attribute: true
      required:
      - message
      - to
      type: object
      xml:
        name: SendFormattedMessage
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    StanzaResult:
      example:
        id: id
        sent: true
      properties:
        sent:
          description: Whether the XMPP stanza was sent or not.
          type: boolean
          xml:
            attribute: true
        id:
          description: "ID of stanza sent. Can be used to update message. If no ID\
            \ was provided in the call, a message ID will be generated."
          type: string
          xml:
            attribute: true
      required:
      - id
      - sent
      type: object
      xml:
        name: StanzaResult
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    SendPresenceSubscriptionBody:
      example:
        customXml: ""
        language: language
        to: to
        id: id
      properties:
        to:
          description: A Bare or Full JID (XMPP network address).
          type: string
          xml:
            attribute: true
        customXml:
          description: Optional Custom XML that can be added to the presence subscription
            request.
          example: ""
          type: string
          xml:
            name: "[Custom XML Goes Here]"
        language:
          description: Optional ISO 639-1 language code.
          type: string
          xml:
            attribute: true
        id:
          description: Optional Message ID.
          type: string
          xml:
            attribute: true
      required:
      - to
      type: object
      xml:
        name: SendPresenceSubscription
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    PresenceSubscriptionResult:
      example:
        RosterItem:
          pendingSubscription: true
          Groups:
          - Groups
          - Groups
          name: name
          bareJid: bareJid
          status: status
        id: id
        sent: true
      properties:
        sent:
          description: Whether the XMPP stanza was sent or not.
          type: boolean
          xml:
            attribute: true
        id:
          description: "ID of stanza sent. Can be used to update message. If no ID\
            \ was provided in the call, a message ID will be generated."
          type: string
          xml:
            attribute: true
        RosterItem:
          $ref: '#/components/schemas/RosterItem'
      required:
      - id
      - sent
      type: object
      xml:
        name: PresenceSubscriptionResult
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    Groups:
      description: The groups that the roster item belongs to.
      items:
        nullable: true
        type: string
        xml:
          name: Item
      type: array
      xml:
        name: Groups
        wrapped: true
    RosterItem:
      example:
        pendingSubscription: true
        Groups:
        - Groups
        - Groups
        name: name
        bareJid: bareJid
        status: status
      properties:
        bareJid:
          description: The bare Jabber ID of the roster item.
          type: string
          xml:
            attribute: true
        pendingSubscription:
          description: Indicates if there is a pending subscription.
          type: boolean
          xml:
            attribute: true
        status:
          description: The status of the roster item.
          type: string
          xml:
            attribute: true
        name:
          description: The name of the roster item.
          type: string
          xml:
            attribute: true
        Groups:
          description: The groups that the roster item belongs to.
          items:
            nullable: true
            type: string
            xml:
              name: Item
          type: array
          xml:
            name: Groups
            wrapped: true
      required:
      - Groups
      - bareJid
      - name
      - pendingSubscription
      - status
      type: object
      xml:
        name: RosterItem
    SendXmlMessage:
      example:
        subject: subject
        Xml: Xml
        language: language
        to: to
        id: id
      properties:
        to:
          description: A Bare or Full JID (XMPP network address).
          type: string
          xml:
            attribute: true
        subject:
          description: Optional subject of message.
          type: string
          xml:
            attribute: true
        language:
          description: Optional ISO 639-1 language code.
          type: string
          xml:
            attribute: true
        id:
          description: Optional Message ID.
          type: string
          xml:
            attribute: true
        Xml:
          description: The XML to send.
          type: string
          xml:
            name: Xml
      required:
      - Xml
      - to
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    SendPresenceUnsubscriptionBody:
      example:
        to: to
        id: id
      properties:
        to:
          description: A Bare or Full JID (XMPP network address).
          type: string
          xml:
            attribute: true
        id:
          description: Optional Message ID.
          type: string
          xml:
            attribute: true
      required:
      - to
      type: object
      xml:
        name: SendPresenceUnsubscription
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    SendSubscriptionAcceptedBody:
      example:
        to: to
        id: id
      properties:
        to:
          description: A Bare or Full JID (XMPP network address).
          type: string
          xml:
            attribute: true
        id:
          description: Optional Message ID.
          type: string
          xml:
            attribute: true
      required:
      - to
      type: object
      xml:
        name: SendSubscriptionAccepted
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    SendSubscriptionAcceptedResponse:
      example:
        RosterItem:
          pendingSubscription: true
          Groups:
          - Groups
          - Groups
          name: name
          bareJid: bareJid
          status: status
        id: id
        sent: true
      properties:
        sent:
          description: Whether the XMPP stanza was sent or not.
          type: boolean
          xml:
            attribute: true
        id:
          description: "ID of stanza sent. Can be used to update message. If no ID\
            \ was provided in the call, a message ID will be generated."
          type: string
          xml:
            attribute: true
        RosterItem:
          $ref: '#/components/schemas/RosterItem'
      required:
      - RosterItem
      - id
      - sent
      type: object
      xml:
        name: SubscriptionAcceptedResult
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    SendSubscriptionDeclinedBody:
      example:
        to: to
        id: id
      properties:
        to:
          description: A Bare or Full JID (XMPP network address).
          type: string
          xml:
            attribute: true
        id:
          description: Optional Message ID.
          type: string
          xml:
            attribute: true
      required:
      - to
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetRosterBody:
      example:
        offset: 0
        maxCount: 6
      properties:
        offset:
          description: Offset into the roster where response begins.
          type: integer
          xml:
            attribute: true
        maxCount:
          description: Maximum number of roster items to return.
          type: integer
          xml:
            attribute: true
      type: object
      xml:
        name: GetRoster
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetRosterResponse:
      example:
        RosterItems:
        - ""
        - ""
      properties:
        RosterItems:
          items:
            allOf:
            - $ref: '#/components/schemas/RosterItem'
            xml:
              name: Item
          type: array
          xml:
            name: RosterItems
            wrapped: true
      type: object
      xml:
        name: Roster
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetRosterItemBody:
      example:
        bareJid: bareJid
      properties:
        bareJid:
          description: Bare JID of roster item.
          type: string
          xml:
            attribute: true
      required:
      - bareJid
      type: object
      xml:
        name: GetRosterItem
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    SetRosterItemBody:
      example:
        Groups:
        - Groups
        - Groups
        name: name
        bareJid: bareJid
      properties:
        bareJid:
          description: Bare JID of roster item.
          type: string
          xml:
            attribute: true
        name:
          description: Name of roster item.
          type: string
          xml:
            attribute: true
        Groups:
          description: The groups that the roster item belongs to.
          items:
            nullable: true
            type: string
            xml:
              name: Item
          type: array
          xml:
            name: Groups
            wrapped: true
      required:
      - Groups
      - bareJid
      - name
      type: object
      xml:
        name: SetRosterItem
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    RemoveRosterItemBody:
      example:
        bareJid: bareJid
      properties:
        bareJid:
          description: Bare JID of roster item.
          type: string
          xml:
            attribute: true
      required:
      - bareJid
      type: object
      xml:
        name: RemoveRosterItem
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    PresenceProbeBody:
      example:
        to: to
      properties:
        to:
          description: A Bare or Full JID (XMPP network address).
          type: string
          xml:
            attribute: true
      required:
      - to
      type: object
      xml:
        name: PresenceProbe
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    ProbeResult:
      example:
        jid: jid
        Stanza: Stanza
        recieved: 0
        type: type
      properties:
        jid:
          description: Bare JID of contact to whom the presence probe is directed.
          type: string
          xml:
            attribute: true
        type:
          description: Type of presence sent. Can be the empty string (meaning available)
            or unavailable.
          type: string
          xml:
            attribute: true
        recieved:
          description: When presence was received by the server of the contact.
          format: timestamp
          type: integer
          xml:
            attribute: true
        Stanza:
          description: The XML stanza that was sent.
          type: string
          xml:
            name: Stanza
      required:
      - Stanza
      - jid
      - recieved
      - type
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    InformationQueryBody:
      example:
        xml: ""
        to: to
        type: type
      properties:
        to:
          description: A Bare or Full JID (XMPP network address).
          type: string
          xml:
            attribute: true
        type:
          description: Type of information query.
          type: string
          xml:
            attribute: true
        xml:
          description: The XML stanza that was sent.
          example: ""
          type: string
          xml:
            name: "[Custom Xml]"
            wrapped: false
      required:
      - to
      - type
      - xml
      type: object
      xml:
        name: InformationQuery
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    QueryResultJson:
      example:
        errorText: errorText
        errorType: errorType
        Stanza: Stanza
        errorCode: 0
        ok: true
        ErrorElement: ErrorElement
      properties:
        ok:
          description: Whether the query was successful or not.
          type: boolean
        errorCode:
          description: "If the query was not successful, this is the error code."
          type: integer
        errorText:
          description: "If the query was not successful, this is the error text."
          type: string
        errorType:
          description: "If the query was not successful, this is the error type."
          type: string
        ErrorElement:
          description: "If the query was not successful, this is the error element."
          type: string
        Stanza:
          description: The XML stanza that was sent.
          type: string
      required:
      - ok
      type: object
    QueryResultXml:
      properties:
        ok:
          description: Whether the query was successful or not.
          type: boolean
          xml:
            attribute: true
        errorCode:
          description: "If the query was not successful, this is the error code."
          type: integer
          xml:
            attribute: true
        errorText:
          description: "If the query was not successful, this is the error text."
          type: string
          xml:
            attribute: true
        errorType:
          description: "If the query was not successful, this is the error type."
          type: string
          xml:
            attribute: true
        content:
          description: Any XML content returned in the query result.
          example: ""
          type: string
          xml:
            name: "[Custom Xml]"
            wrapped: false
      required:
      - ok
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    PopMessagesBody:
      example:
        maxCount: 0
      properties:
        maxCount:
          description: Maximum number of messages to return.
          type: integer
          xml:
            attribute: true
      required:
      - maxCount
      type: object
      xml:
        name: PopMessages
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    Message:
      example:
        from: from
        id: id
        to: to
        type: type
        content: ""
        timestamp: 0
      properties:
        id:
          description: The ID of the message.
          type: string
          xml:
            attribute: true
        from:
          description: The Bare JID of the sender.
          type: string
          xml:
            attribute: true
        to:
          description: The Bare JID of the recipient.
          type: string
          xml:
            attribute: true
        type:
          description: The type of message.
          type: string
          xml:
            attribute: true
        timestamp:
          description: The timestamp of the message.
          format: timestamp
          type: integer
          xml:
            attribute: true
        content:
          description: The content of the message.
          example: ""
          type: string
          xml:
            name: "[Custom Xml]"
            wrapped: false
      required:
      - content
      - from
      - timestamp
      - to
      - type
      type: object
      xml:
        wrapped: false
    MessageResult:
      example:
        messages:
        - from: from
          id: id
          to: to
          type: type
          content: ""
          timestamp: 0
        - from: from
          id: id
          to: to
          type: type
          content: ""
          timestamp: 0
      properties:
        messages:
          items:
            $ref: '#/components/schemas/Message'
          nullable: true
          type: array
          xml:
            name: Message
      required:
      - messages
      type: object
    SavePrivateXmlBody:
      example:
        xml: ""
      properties:
        xml:
          description: The XML to save.
          example: ""
          type: string
          xml:
            name: "[Custom Xml]"
      required:
      - xml
      type: object
      xml:
        name: SavePrivateXml
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    Stored:
      example:
        created: 0
        updated: 6
      properties:
        created:
          description: When the information record was first created.
          format: timestamp
          type: integer
          xml:
            attribute: true
        updated:
          description: When the information record was last updated.
          format: timestamp
          type: integer
          xml:
            attribute: true
      required:
      - created
      - updated
      type: object
    LoadPrivateXmlBody:
      example:
        localName: localName
        namespace: namespace
      properties:
        localName:
          description: The local name of the XML element.
          type: string
          xml:
            attribute: true
        namespace:
          description: The namespace of the XML element.
          type: string
          xml:
            attribute: true
      required:
      - localName
      - namespace
      type: object
      xml:
        name: LoadPrivateXml
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    PrivateXml:
      example:
        created: 2000-01-23T04:56:07.000+00:00
        xml: ""
        updated: 2000-01-23T04:56:07.000+00:00
      properties:
        created:
          description: When the information record was first created.
          format: date-time
          type: string
          xml:
            attribute: true
        updated:
          description: When the information record was last updated.
          format: date-time
          type: string
          xml:
            attribute: true
        xml:
          description: The XML to save.
          example: ""
          type: string
          xml:
            name: "[Custom Xml]"
            wrapped: false
      required:
      - created
      - updated
      - xml
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    Visibility:
      enum:
      - Public
      - Presence
      - Private
      type: string
      xml:
        attribute: true
    ContentResponse:
      example:
        visibility: null
        uploaded: 2000-01-23T04:56:07.000+00:00
        etag: etag
        url: url
      properties:
        uploaded:
          format: date-time
          type: string
          xml:
            attribute: true
        visibility:
          $ref: '#/components/schemas/Visibility'
        etag:
          type: string
          xml:
            attribute: true
        url:
          type: string
          xml:
            attribute: true
      required:
      - etag
      - uploaded
      - url
      - visibility
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    Algorithm:
      example:
        localName: localName
        secuirtyStrength: 0
        score: 6
        slow: true
        namespace: namespace
        safe: true
      properties:
        localName:
          description: The local name of the algorithm.
          type: string
          xml:
            attribute: true
        namespace:
          description: The namespace of the algorithm.
          type: string
          xml:
            attribute: true
        secuirtyStrength:
          description: The security strength of the algorithm.
          type: integer
          xml:
            attribute: true
        safe:
          description: Whether the algorithm is considered safe or not.
          type: boolean
          xml:
            attribute: true
        slow:
          description: Whether the algorithm is considered slow or not.
          type: boolean
          xml:
            attribute: true
        score:
          description: The score of the algorithm.
          type: integer
          xml:
            attribute: true
      required:
      - localName
      - namespace
      - safe
      - score
      - secuirtyStrength
      - slow
      type: object
      xml:
        name: Algorithm
        wrapped: true
    Algorithms:
      items:
        $ref: '#/components/schemas/Algorithm'
      nullable: true
      type: array
      xml:
        name: Algorithms
        wrapped: true
    GetAlgorithmsBody:
      type: object
      xml:
        name: GetAlgorithms
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    AlgorithmsResult:
      example:
        algorithms:
        - localName: localName
          secuirtyStrength: 0
          score: 6
          slow: true
          namespace: namespace
          safe: true
        - localName: localName
          secuirtyStrength: 0
          score: 6
          slow: true
          namespace: namespace
          safe: true
      properties:
        algorithms:
          items:
            $ref: '#/components/schemas/Algorithm'
          nullable: true
          type: array
          xml:
            name: Algorithms
            wrapped: true
      required:
      - algorithms
      type: object
      xml:
        name: AlgorithmsResult
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    CreateKeyBody:
      example:
        localName: localName
        namespace: namespace
        keySignature: keySignature
        id: id
        nonce: nonce
        requestSignature: requestSignature
      properties:
        localName:
          description: The local name of the key.
          type: string
          xml:
            attribute: true
        namespace:
          description: The namespace of the key.
          type: string
          xml:
            attribute: true
        id:
          description: The ID of the key.
          type: string
          xml:
            attribute: true
        nonce:
          description: A unique nonce for this request.
          type: string
          xml:
            attribute: true
        keySignature:
          description: |
            The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature.
          type: string
          xml:
            attribute: true
        requestSignature:
          description: |
            The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature.
          type: string
          xml:
            attribute: true
      required:
      - id
      - keySignature
      - localName
      - namespace
      - nonce
      - requestSignature
      type: object
      xml:
        name: CreateKey
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetPublicKeyBody:
      example:
        keyId: keyId
      properties:
        keyId:
          description: "Optional Key ID. If not provided, the server public key is\
            \ returned. If provided, the public key of the corresponding cryptographic\
            \ key of the client is returned."
          type: string
          xml:
            attribute: true
      type: object
      xml:
        name: GetPublicKey
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetPublicKeyResponse:
      example:
        Algorithm:
          localName: localName
          secuirtyStrength: 0
          score: 6
          slow: true
          namespace: namespace
          safe: true
        key: key
      properties:
        key:
          description: Base64-encoded public key of the server.
          type: string
          xml:
            attribute: true
        Algorithm:
          $ref: '#/components/schemas/Algorithm'
      required:
      - key
      type: object
      xml:
        name: PublicKey
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    ValidatePNrBody:
      example:
        pnr: pnr
        countryCode: countryCode
      properties:
        countryCode:
          description: ISO 3166-1 country code.
          type: string
          xml:
            attribute: true
        pnr:
          description: Personal number entry to validate.
          type: string
          xml:
            attribute: true
      required:
      - countryCode
      - pnr
      type: object
      xml:
        name: ValidatePNr
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    ValidatePNrResponse:
      example:
        normalized: normalized
        isValid: true
        countrySupported: true
      properties:
        countrySupported:
          description: If country is supported and recognized by the personal number
            validator on the broker.
          type: boolean
          xml:
            attribute: true
        isValid:
          description: If the personal number is valid.
          type: boolean
          xml:
            attribute: true
        normalized:
          description: The normalized personal number.
          type: string
          xml:
            attribute: true
      required:
      - countrySupported
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetApplicationAttributesBody:
      type: object
      xml:
        name: GetApplicationAttributes
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetApplicationAttributesResponse:
      example:
        nrReviewers: 0
        Required:
        - Required
        - Required
        peerReview: true
        nrPhotos: 6
        iso3166: true
      properties:
        peerReview:
          description: If peer review is required.
          type: boolean
          xml:
            attribute: true
        nrReviewers:
          description: Number of successfuls peer reviews required for a process to
            conclude successfully.
          nullable: true
          type: integer
          xml:
            attribute: true
        nrPhotos:
          description: "Number of photos required in an application, for a peer-review\
            \ process."
          nullable: true
          type: integer
          xml:
            attribute: true
        iso3166:
          description: If ISO 3166 country codes are required to be used.
          nullable: true
          type: boolean
          xml:
            attribute: true
        Required:
          items:
            type: string
            xml:
              name: Item
          type: array
          xml:
            name: Required
            wrapped: true
      required:
      - peerReview
      type: object
      xml:
        name: ApplicationAttributes
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetIdentityBody:
      example:
        legalId: legalId
      properties:
        legalId:
          description: Identity of the Legal Identity to get.
          type: string
          xml:
            attribute: true
      required:
      - legalId
      type: object
      xml:
        name: GetIdentity
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    IdentityResponse:
      example:
        Identity:
          key: ""
      properties:
        Identity:
          additionalProperties: true
          type: object
          xml:
            name: Identity
            namespace: urn:ieee:iot:leg:id:1.0
      required:
      - Identity
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetIdentitiesBody:
      example:
        offset: 0
        maxCount: 6
      properties:
        offset:
          description: Offset into the identities where response begins.
          type: integer
          xml:
            attribute: true
        maxCount:
          description: Maximum number of identities to return.
          type: integer
          xml:
            attribute: true
      type: object
      xml:
        name: GetIdentities
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    IdentitiesResponse:
      properties:
        Identities:
          items:
            additionalProperties: true
            type: object
            xml:
              name: Identity
              namespace: urn:ieee:iot:leg:id:1.0
          nullable: true
          type: array
          xml:
            name: Identities
            wrapped: true
      required:
      - Identity
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    IdentityResponseJSON:
      example:
        Identity:
          clientPublicKey:
            __name: __name
            __ns: __ns
          __name: __name
          xmlns: xmlns
          clientSignature:
            __name: __name
            __ns: __ns
            value: value
          property:
          - __name: __name
            xmlns: xmlns
            __ns: __ns
          - __name: __name
            xmlns: xmlns
            __ns: __ns
          __ns: __ns
          id: id
          serverSignature:
            __name: __name
            __ns: __ns
            value: value
          status:
            __name: __name
            provider: provider
            created: 2000-01-23T04:56:07.000+00:00
            __ns: __ns
            from: 2000-01-23T04:56:07.000+00:00
            state: state
            to: 2000-01-23T04:56:07.000+00:00
            updated: 2000-01-23T04:56:07.000+00:00
      properties:
        Identity:
          $ref: '#/components/schemas/IdentityJson'
      required:
      - Identity
      type: object
    IdentitiesResponseJSON:
      example:
        Identities:
        - clientPublicKey:
            __name: __name
            __ns: __ns
          __name: __name
          xmlns: xmlns
          clientSignature:
            __name: __name
            __ns: __ns
            value: value
          property:
          - __name: __name
            xmlns: xmlns
            __ns: __ns
          - __name: __name
            xmlns: xmlns
            __ns: __ns
          __ns: __ns
          id: id
          serverSignature:
            __name: __name
            __ns: __ns
            value: value
          status:
            __name: __name
            provider: provider
            created: 2000-01-23T04:56:07.000+00:00
            __ns: __ns
            from: 2000-01-23T04:56:07.000+00:00
            state: state
            to: 2000-01-23T04:56:07.000+00:00
            updated: 2000-01-23T04:56:07.000+00:00
        - clientPublicKey:
            __name: __name
            __ns: __ns
          __name: __name
          xmlns: xmlns
          clientSignature:
            __name: __name
            __ns: __ns
            value: value
          property:
          - __name: __name
            xmlns: xmlns
            __ns: __ns
          - __name: __name
            xmlns: xmlns
            __ns: __ns
          __ns: __ns
          id: id
          serverSignature:
            __name: __name
            __ns: __ns
            value: value
          status:
            __name: __name
            provider: provider
            created: 2000-01-23T04:56:07.000+00:00
            __ns: __ns
            from: 2000-01-23T04:56:07.000+00:00
            state: state
            to: 2000-01-23T04:56:07.000+00:00
            updated: 2000-01-23T04:56:07.000+00:00
      properties:
        Identities:
          items:
            $ref: '#/components/schemas/IdentityJson'
          nullable: true
          type: array
      required:
      - Identities
      type: object
    IdentityJson:
      example:
        clientPublicKey:
          __name: __name
          __ns: __ns
        __name: __name
        xmlns: xmlns
        clientSignature:
          __name: __name
          __ns: __ns
          value: value
        property:
        - __name: __name
          xmlns: xmlns
          __ns: __ns
        - __name: __name
          xmlns: xmlns
          __ns: __ns
        __ns: __ns
        id: id
        serverSignature:
          __name: __name
          __ns: __ns
          value: value
        status:
          __name: __name
          provider: provider
          created: 2000-01-23T04:56:07.000+00:00
          __ns: __ns
          from: 2000-01-23T04:56:07.000+00:00
          state: state
          to: 2000-01-23T04:56:07.000+00:00
          updated: 2000-01-23T04:56:07.000+00:00
      properties:
        __name:
          description: The local name of the identity.
          type: string
        __ns:
          description: The namespace of the identity.
          type: string
        id:
          description: The ID of the identity.
          type: string
        xmlns:
          description: The XML namespace of the identity.
          type: string
        clientPublicKey:
          $ref: '#/components/schemas/IdentityJson_clientPublicKey'
        property:
          items:
            $ref: '#/components/schemas/IdentityJson_property_inner'
          nullable: true
          type: array
        clientSignature:
          $ref: '#/components/schemas/IdentityJson_clientSignature'
        status:
          $ref: '#/components/schemas/IdentityJson_status'
        serverSignature:
          $ref: '#/components/schemas/IdentityJson_serverSignature'
      required:
      - __name
      - __ns
      - clientPublicKey
      - clientSignature
      - id
      - property
      - serverSignature
      - status
      - xmlns
      type: object
    AddIdAttachmentBody:
      example:
        attachmentFileName: attachmentFileName
        attachmentBase64: attachmentBase64
        legalId: legalId
        attachmentContentType: attachmentContentType
        keyId: keyId
        keySignature: keySignature
        nonce: nonce
        requestSignature: requestSignature
      properties:
        keyId:
          description: Identity of key to use for signing the Identity application.
          type: string
          xml:
            attribute: true
        legalId:
          description: Identity of the Legal Identity Application.
          type: string
          xml:
            attribute: true
        nonce:
          description: "A unique random string, at least 32 characters long, with\
            \ sufficient entropy to not be reused again. If reused, an error will\
            \ be returned."
          type: string
          xml:
            attribute: true
        keySignature:
          description: |
            Cryptographic signature of the key ID, using the key password.
          type: string
          xml:
            attribute: true
        requestSignature:
          description: |
            Cryptographic signature of the request, using the account password.
          type: string
          xml:
            attribute: true
        attachmentBase64:
          description: Base-64-encoding of attachment to add to the Identity application.
          type: string
          xml:
            attribute: true
        attachmentFileName:
          description: File name of attachment.
          type: string
          xml:
            attribute: true
        attachmentContentType:
          description: Content type of attachment.
          type: string
          xml:
            attribute: true
      required:
      - attachmentBase64
      - attachmentContentType
      - attachmentFileName
      - keyId
      - keySignature
      - legalId
      - nonce
      - requestSignature
      type: object
      xml:
        name: AddIdAttachment
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    ReadyForApprovalBody:
      example:
        legalId: legalId
      properties:
        legalId:
          description: Identity of the Legal Identity Application.
          type: string
          xml:
            attribute: true
      required:
      - legalId
      type: object
      xml:
        name: ReadyForApproval
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetServiceProvidersForIdReviewBody:
      example:
        legalId: legalId
      properties:
        legalId:
          description: Identity of the Legal Identity Application.
          type: string
          xml:
            attribute: true
      required:
      - legalId
      type: object
      xml:
        name: GetServiceProvidersForIdReview
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    Provider:
      example:
        external: true
        reviewerId: reviewerId
        iconHeight: 6
        iconWidth: 0
        name: name
        id: id
        iconUrl: iconUrl
        type: type
      properties:
        id:
          description: Identity of the provider.
          type: string
          xml:
            attribute: true
        type:
          description: Type of provider.
          type: string
          xml:
            attribute: true
        name:
          description: Name of provider.
          type: string
          xml:
            attribute: true
        reviewerId:
          description: Identity of reviewer.
          type: string
          xml:
            attribute: true
        external:
          description: If provider is external.
          type: boolean
          xml:
            attribute: true
        iconUrl:
          description: URL of icon.
          nullable: true
          type: string
          xml:
            attribute: true
        iconWidth:
          description: Width of icon.
          nullable: true
          type: integer
          xml:
            attribute: true
        iconHeight:
          description: Height of icon.
          nullable: true
          type: integer
          xml:
            attribute: true
      required:
      - external
      - id
      - name
      - reviewerId
      - type
      type: object
      xml:
        name: Provider
        wrapped: true
    ProvidersResponse:
      example:
        Providers:
        - external: true
          reviewerId: reviewerId
          iconHeight: 6
          iconWidth: 0
          name: name
          id: id
          iconUrl: iconUrl
          type: type
        - external: true
          reviewerId: reviewerId
          iconHeight: 6
          iconWidth: 0
          name: name
          id: id
          iconUrl: iconUrl
          type: type
      properties:
        Providers:
          items:
            $ref: '#/components/schemas/Provider'
          nullable: true
          type: array
          xml:
            name: Providers
            wrapped: true
      required:
      - Providers
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    SelectReviewServiceBody:
      example:
        serviceProvider: serviceProvider
        serviceId: serviceId
      properties:
        serviceId:
          description: ID of internal peer review service.
          type: string
          xml:
            attribute: true
        serviceProvider:
          description: Type (class name) of service provider.
          type: string
          xml:
            attribute: true
      required:
      - serviceId
      - serviceProvider
      type: object
      xml:
        name: SelectReviewService
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    AuthorizeAccessToIdBody:
      example:
        legalId: legalId
        authorized: true
        remoteId: remoteId
      properties:
        legalId:
          description: Identifier of the corresponding Legal Identity of the client.
          type: string
          xml:
            attribute: true
        remoteId:
          description: Identifier of the Legal Identity of the corresponding remote
            entity.
          type: string
          xml:
            attribute: true
        authorized:
          description: If the remote entity is authorized access to the corresponding
            identity or not.
          type: boolean
          xml:
            attribute: true
      required:
      - authorized
      - legalId
      - remoteId
      type: object
      xml:
        name: AuthorizeAccessToId
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    PetitionPeerReviewBody:
      example:
        purpose: purpose
        legalId: legalId
        keyId: keyId
        keySignature: keySignature
        petitionId: petitionId
        requestSignature: requestSignature
        remoteId: remoteId
      properties:
        keyId:
          description: Identity of key to use for signing the petition. It must correspond
            to the key used when signing the Legal Identity application that will
            be used to sign the petition.
          type: string
          xml:
            attribute: true
        legalId:
          description: "Identifier of the Legal Identity that will be used to sign\
            \ the petition, and that will be reviewed by the peer."
          type: string
          xml:
            attribute: true
        remoteId:
          description: Identifier of the remote legal identity the client requests
            review the identity application.
          type: string
          xml:
            attribute: true
        petitionId:
          description: "An identifier of the request, the client can use to correlate\
            \ asynchronous responses with the corresponding petition request."
          type: string
          xml:
            attribute: true
        purpose:
          description: "A human readable text that will be presented to the remote\
            \ user, describing the purpose of the petition."
          type: string
          xml:
            attribute: true
        keySignature:
          description: |
            Cryptographic signature of the key ID, using the key password.
          type: string
          xml:
            attribute: true
        requestSignature:
          description: |
            Cryptographic signature of the request, using the account password.
          type: string
          xml:
            attribute: true
      required:
      - keyId
      - keySignature
      - legalId
      - petitionId
      - purpose
      - remoteId
      - requestSignature
      type: object
      xml:
        name: PetitionPeerReview
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    PetitionIdBody:
      example:
        purpose: purpose
        legalId: legalId
        keyId: keyId
        keySignature: keySignature
        petitionId: petitionId
        requestSignature: requestSignature
        remoteId: remoteId
      properties:
        keyId:
          description: Identity of key to use for signing the petition. It must correspond
            to the key used when signing the Legal Identity application that will
            be used to sign the petition.
          type: string
          xml:
            attribute: true
        legalId:
          description: Identifier of the Legal Identity that will be used to sign
            the petition.
          type: string
          xml:
            attribute: true
        remoteId:
          description: Identifier of the remote legal identity the client requests
            access to.
          type: string
          xml:
            attribute: true
        petitionId:
          description: "An identifier of the request, the client can use to correlate\
            \ asynchronous responses with the corresponding petition request."
          type: string
          xml:
            attribute: true
        purpose:
          description: "A human readable text that will be presented to the remote\
            \ user, describing the purpose of the petition."
          type: string
          xml:
            attribute: true
        keySignature:
          description: |
            Cryptographic signature of the key ID, using the key password.
          type: string
          xml:
            attribute: true
        requestSignature:
          description: |
            Cryptographic signature of the request, using the account password.
          type: string
          xml:
            attribute: true
      required:
      - keyId
      - keySignature
      - legalId
      - petitionId
      - purpose
      - remoteId
      - requestSignature
      type: object
      xml:
        name: PetitionId
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    PetitionSignatureBody:
      example:
        purpose: purpose
        contentBase64: contentBase64
        legalId: legalId
        keyId: keyId
        keySignature: keySignature
        petitionId: petitionId
        requestSignature: requestSignature
        remoteId: remoteId
      properties:
        keyId:
          description: Identity of key to use for signing the petition. It must correspond
            to the key used when signing the Legal Identity application that will
            be used to sign the petition.
          type: string
          xml:
            attribute: true
        legalId:
          description: Identifier of the Legal Identity that will be used to sign
            the petition.
          type: string
          xml:
            attribute: true
        remoteId:
          description: Identifier of the remote legal identity the client requests
            access to.
          type: string
          xml:
            attribute: true
        contentBase64:
          description: Base64-encoded binary content requested to be signed by the
            remote legal identity.
          type: string
          xml:
            attribute: true
        petitionId:
          description: "An identifier of the request, the client can use to correlate\
            \ asynchronous responses with the corresponding petition request."
          type: string
          xml:
            attribute: true
        purpose:
          description: "A human readable text that will be presented to the remote\
            \ user, describing the purpose of the petition."
          type: string
          xml:
            attribute: true
        keySignature:
          description: |
            Cryptographic signature of the key ID, using the key password.
          type: string
          xml:
            attribute: true
        requestSignature:
          description: |
            Cryptographic signature of the request, using the account password.
          type: string
          xml:
            attribute: true
      required:
      - contentBase64
      - keyId
      - keySignature
      - legalId
      - petitionId
      - purpose
      - remoteId
      - requestSignature
      type: object
      xml:
        name: PetitionSignature
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    Part:
      example:
        role: role
        legalId: legalId
      properties:
        role:
          description: Role of a predefined part to the contract.
          type: string
          xml:
            attribute: true
        legalId:
          description: Identity of part.
          type: string
          xml:
            attribute: true
      required:
      - legalId
      - role
      type: object
      xml:
        name: Part
    Parts:
      items:
        $ref: '#/components/schemas/Part'
      nullable: true
      type: array
      xml:
        name: Parts
        wrapped: true
    Parameter:
      example:
        name: name
        value: value
      properties:
        name:
          description: Name of parameter.
          type: string
          xml:
            attribute: true
        value:
          description: Value of parameter.
          type: string
          xml:
            attribute: true
      required:
      - name
      - value
      type: object
      xml:
        name: Parameter
    Parameters:
      items:
        $ref: '#/components/schemas/Parameter'
      nullable: true
      type: array
      xml:
        name: Parameters
        wrapped: true
    CreateContractBody:
      example:
        Parameters:
        - name: name
          value: value
        - name: name
          value: value
        visibility: Public
        Parts:
        - role: role
          legalId: legalId
        - role: role
          legalId: legalId
        templateId: templateId
      properties:
        templateId:
          description: Identity of template to use.
          type: string
          xml:
            attribute: true
        visibility:
          description: Visibility of contract.
          enum:
          - Public
          - PublicSearchable
          - CreatorAndParts
          - DomainAndParts
          type: string
          xml:
            attribute: true
        Parts:
          items:
            $ref: '#/components/schemas/Part'
          nullable: true
          type: array
          xml:
            name: Parts
            wrapped: true
        Parameters:
          items:
            $ref: '#/components/schemas/Parameter'
          nullable: true
          type: array
          xml:
            name: Parameters
            wrapped: true
      required:
      - templateId
      - visibility
      type: object
      xml:
        name: CreateContract
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    ContractResponse:
      example:
        Contract:
          key: ""
      properties:
        Contract:
          additionalProperties: true
          description: The contract object
          type: object
          xml:
            attribute: false
      required:
      - Contract
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetContractBody:
      example:
        contractId: contractId
      properties:
        contractId:
          description: Identity of contract to get.
          type: string
          xml:
            attribute: true
      required:
      - contractId
      type: object
      xml:
        name: GetContract
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    SignContractBody:
      example:
        role: role
        legalId: legalId
        contractId: contractId
        keyId: keyId
        keySignature: keySignature
        nonce: nonce
        requestSignature: requestSignature
      properties:
        keyId:
          description: Identity of key to use for signing the contract.
          type: string
          xml:
            attribute: true
        legalId:
          description: Identity of the Legal Identity that will be used to sign the
            contract.
          type: string
          xml:
            attribute: true
        contractId:
          description: Identity of contract to sign.
          type: string
          xml:
            attribute: true
        role:
          description: Role of a predefined part to the contract.
          type: string
          xml:
            attribute: true
        nonce:
          description: "A unique random string, at least 32 characters long, with\
            \ sufficient entropy to not be reused again. If reused, an error will\
            \ be returned."
          type: string
          xml:
            attribute: true
        keySignature:
          description: |
            Cryptographic signature of the key ID, using the key password.
          type: string
          xml:
            attribute: true
        requestSignature:
          description: |
            Cryptographic signature of the request, using the account password.
          type: string
          xml:
            attribute: true
      required:
      - contractId
      - keyId
      - keySignature
      - legalId
      - nonce
      - requestSignature
      - role
      type: object
      xml:
        name: SignContract
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    SignDataBody:
      example:
        dataBase64: dataBase64
        legalId: legalId
        keyId: keyId
        keySignature: keySignature
        requestSignature: requestSignature
      properties:
        keyId:
          description: Identity of key to use for signing the data.
          type: string
          xml:
            attribute: true
        legalId:
          description: Identity of the Legal Identity that will be used to sign the
            data.
          type: string
          xml:
            attribute: true
        dataBase64:
          description: Base64-encoded binary data to sign.
          type: string
          xml:
            attribute: true
        keySignature:
          description: |
            Cryptographic signature of the key ID, using the key password.
          type: string
          xml:
            attribute: true
        requestSignature:
          description: |
            Cryptographic signature of the request, using the account password.
          type: string
          xml:
            attribute: true
      required:
      - dataBase64
      - keyId
      - keySignature
      - legalId
      - requestSignature
      type: object
      xml:
        name: SignData
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    SignatureResponse:
      example:
        Signature: Signature
      properties:
        Signature:
          description: Base64-encoded signature.
          type: string
          xml:
            attribute: true
      required:
      - Signature
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetCreatedContractsBody:
      example:
        offset: 0
        maxCount: 6
      properties:
        offset:
          description: Offset into the list of contracts where response begins.
          type: integer
          xml:
            attribute: true
        maxCount:
          description: Maximum number of contracts to return.
          type: integer
          xml:
            attribute: true
      type: object
      xml:
        name: GetCreatedContracts
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    ContractsResponse:
      example:
        Contracts:
        - "{}"
        - "{}"
      properties:
        Contracts:
          items:
            description: The contract object
            type: object
            xml:
              attribute: false
              name: Contract
          nullable: true
          type: array
          xml:
            name: Contracts
            wrapped: true
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    AuthorizeAccessToContractBody:
      example:
        authorized: true
        contractId: contractId
        remoteId: remoteId
      properties:
        contractId:
          description: "Identifier of the corresponding Smart Contract of the client,\
            \ or for which the client is part."
          type: string
          xml:
            attribute: true
        remoteId:
          description: Identifier of the Legal Identity of the corresponding remote
            entity.
          type: string
          xml:
            attribute: true
        authorized:
          description: If the remote entity is authorized access to the corresponding
            contract or not.
          type: boolean
          xml:
            attribute: true
      required:
      - authorized
      - contractId
      - remoteId
      type: object
      xml:
        name: AuthorizeAccessToContract
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetBalanceBody:
      type: object
      xml:
        name: GetBalance
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetBalanceResponse:
      example:
        amount: 0.8008281904610115
        reserved: 6.027456183070403
        currency: currency
        timestamp: 1
      properties:
        amount:
          description: Current amount of eDaler that can be used.
          type: number
          xml:
            attribute: true
        reserved:
          description: Current amount of eDaler that has been reserved.
          type: number
          xml:
            attribute: true
        currency:
          description: Currency of wallet.
          type: string
          xml:
            attribute: true
        timestamp:
          description: Timestamp of balance statement.
          format: timestamp
          type: integer
          xml:
            attribute: true
      required:
      - amount
      - currency
      - reserved
      - timestamp
      type: object
      xml:
        name: Balance
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    ProcessEDalerUriBody:
      example:
        uri: uri
      properties:
        uri:
          description: URI to process.
          type: string
          xml:
            attribute: true
      required:
      - uri
      type: object
      xml:
        name: ProcessEDalerUri
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    ProcessResult:
      example:
        Balance:
          amount: 0.8008281904610115
          reserved: 6.027456183070403
          currency: currency
          timestamp: 1
        Result:
          key: ""
      properties:
        Balance:
          $ref: '#/components/schemas/GetBalanceResponse'
        Result:
          additionalProperties: true
          description: The result of the process operation.
          type: object
          xml:
            attribute: false
      required:
      - Balance
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetServiceProvidersForBuyingEDalerBody:
      type: object
      xml:
        name: GetServiceProvidersForBuyingEDaler
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetServiceProvidersForSellingEDalerBody:
      type: object
      xml:
        name: GetServiceProvidersForSellingEDaler
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetPaymentOptionsForBuyingEDalerBody:
      example:
        tabId: tabId
        cancelUrl: https://openapi-generator.tech
        functionName: functionName
        serviceProvider: serviceProvider
        successUrl: https://openapi-generator.tech
        serviceId: serviceId
        transactionId: transactionId
        failureUrl: https://openapi-generator.tech
      properties:
        serviceId:
          description: ID of internal eDaler service.
          type: string
          xml:
            attribute: true
        serviceProvider:
          description: Type (class name) of service provider.
          type: string
          xml:
            attribute: true
        successUrl:
          description: URL to redirect to if the operation is successful.
          format: uri
          type: string
          xml:
            attribute: true
        failureUrl:
          description: URL to redirect to if the operation fails.
          format: uri
          type: string
          xml:
            attribute: true
        cancelUrl:
          description: URL to redirect to if the operation is cancelled.
          format: uri
          type: string
          xml:
            attribute: true
        transactionId:
          description: Transaction ID.
          type: string
          xml:
            attribute: true
        tabId:
          description: Tab ID.
          type: string
          xml:
            attribute: true
        functionName:
          description: Function name.
          type: string
          xml:
            attribute: true
      required:
      - serviceId
      - serviceProvider
      type: object
      xml:
        name: GetPaymentOptionsForBuyingEDaler
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetPaymentOptionsForSellingEDalerBody:
      example:
        tabId: tabId
        cancelUrl: https://openapi-generator.tech
        functionName: functionName
        serviceProvider: serviceProvider
        successUrl: https://openapi-generator.tech
        serviceId: serviceId
        transactionId: transactionId
        failureUrl: https://openapi-generator.tech
      properties:
        serviceId:
          description: ID of internal eDaler service.
          type: string
          xml:
            attribute: true
        serviceProvider:
          description: Type (class name) of service provider.
          type: string
          xml:
            attribute: true
        successUrl:
          description: URL to redirect to if the operation is successful.
          format: uri
          type: string
          xml:
            attribute: true
        failureUrl:
          description: URL to redirect to if the operation fails.
          format: uri
          type: string
          xml:
            attribute: true
        cancelUrl:
          description: URL to redirect to if the operation is cancelled.
          format: uri
          type: string
          xml:
            attribute: true
        transactionId:
          description: Transaction ID.
          type: string
          xml:
            attribute: true
        tabId:
          description: Tab ID.
          type: string
          xml:
            attribute: true
        functionName:
          description: Function name.
          type: string
          xml:
            attribute: true
      required:
      - serviceId
      - serviceProvider
      type: object
      xml:
        name: GetPaymentOptionsForSellingEDaler
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    InitiateBuyEDalerBody:
      example:
        tabId: tabId
        amount: 0.8008281904610115
        cancelUrl: cancelUrl
        serviceProvider: serviceProvider
        successUrl: successUrl
        currency: currency
        serviceId: serviceId
        transactionId: transactionId
        failureUrl: failureUrl
      properties:
        serviceId:
          description: ID of internal eDaler service.
          type: string
          xml:
            attribute: true
        serviceProvider:
          description: Type (class name) of service provider.
          type: string
          xml:
            attribute: true
        amount:
          description: Amount of eDaler to buy.
          format: double
          type: number
          xml:
            attribute: true
        currency:
          description: Currency to buy.
          type: string
          xml:
            attribute: true
        successUrl:
          description: URL to redirect to if the operation is successful.
          type: string
          xml:
            attribute: true
        failureUrl:
          description: URL to redirect to if the operation fails.
          type: string
          xml:
            attribute: true
        cancelUrl:
          description: URL to redirect to if the operation is cancelled.
          type: string
          xml:
            attribute: true
        transactionId:
          description: Transaction ID.
          type: string
          xml:
            attribute: true
        tabId:
          description: Tab ID.
          type: string
          xml:
            attribute: true
      required:
      - amount
      - currency
      - serviceId
      - serviceProvider
      type: object
      xml:
        name: InitiateBuyEDaler
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    InitiateSellEDalerBody:
      example:
        tabId: tabId
        amount: 0.8008281904610115
        cancelUrl: cancelUrl
        serviceProvider: serviceProvider
        successUrl: successUrl
        currency: currency
        serviceId: serviceId
        transactionId: transactionId
        failureUrl: failureUrl
      properties:
        serviceId:
          description: ID of internal eDaler service.
          type: string
          xml:
            attribute: true
        serviceProvider:
          description: Type (class name) of service provider.
          type: string
          xml:
            attribute: true
        amount:
          description: Amount of eDaler to buy.
          format: double
          type: number
          xml:
            attribute: true
        currency:
          description: Currency to buy.
          type: string
          xml:
            attribute: true
        successUrl:
          description: URL to redirect to if the operation is successful.
          type: string
          xml:
            attribute: true
        failureUrl:
          description: URL to redirect to if the operation fails.
          type: string
          xml:
            attribute: true
        cancelUrl:
          description: URL to redirect to if the operation is cancelled.
          type: string
          xml:
            attribute: true
        transactionId:
          description: Transaction ID.
          type: string
          xml:
            attribute: true
        tabId:
          description: Tab ID.
          type: string
          xml:
            attribute: true
      required:
      - amount
      - currency
      - serviceId
      - serviceProvider
      type: object
      xml:
        name: InitiateSellEDaler
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    TransactionInformation:
      example:
        amount: 0.8008281904610115
        cancelUrl: cancelUrl
        clientUrl: clientUrl
        ended: 2000-01-23T04:56:07.000+00:00
        serviceProvider: serviceProvider
        successUrl: successUrl
        started: 2000-01-23T04:56:07.000+00:00
        currency: currency
        id: id
        state: state
        serviceId: serviceId
        failureUrl: failureUrl
      properties:
        id:
          description: Transaction ID.
          type: string
          xml:
            attribute: true
        state:
          description: Current state of transaction.
          type: string
          xml:
            attribute: true
        started:
          description: When the transaction was started.
          format: date-time
          type: string
          xml:
            attribute: true
        ended:
          description: When the transaction ended.
          format: date-time
          type: string
          xml:
            attribute: true
        serviceId:
          description: ID of internal eDaler service.
          type: string
          xml:
            attribute: true
        serviceProvider:
          description: Type (class name) of service provider.
          type: string
          xml:
            attribute: true
        amount:
          description: Amount of eDaler to buy.
          format: double
          type: number
          xml:
            attribute: true
        currency:
          description: Currency to buy.
          type: string
          xml:
            attribute: true
        successUrl:
          description: URL to redirect to if the operation is successful.
          type: string
          xml:
            attribute: true
        failureUrl:
          description: URL to redirect to if the operation fails.
          type: string
          xml:
            attribute: true
        cancelUrl:
          description: URL to redirect to if the operation is cancelled.
          type: string
          xml:
            attribute: true
        clientUrl:
          description: URL to redirect to if the operation is cancelled.
          type: string
          xml:
            attribute: true
      required:
      - amount
      - cancelUrl
      - clientUrl
      - currency
      - ended
      - failureUrl
      - id
      - serviceId
      - serviceProvider
      - started
      - state
      - successUrl
      type: object
      xml:
        name: TransactionInformation
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetTransactionInformationBody:
      example:
        tabId: tabId
        functionName: functionName
        transactionId: transactionId
      properties:
        transactionId:
          description: Transaction ID.
          type: string
          xml:
            attribute: true
        tabId:
          description: Tab ID.
          type: string
          xml:
            attribute: true
        functionName:
          description: Function name.
          type: string
          xml:
            attribute: true
      required:
      - transactionId
      type: object
      xml:
        name: GetTransactionInformation
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetTokensBody:
      example:
        offset: 0
        references: true
        maxCount: 6
      properties:
        offset:
          description: Offset into the list of tokens where response begins.
          type: integer
          xml:
            attribute: true
        maxCount:
          description: Maximum number of tokens to return.
          type: integer
          xml:
            attribute: true
        references:
          description: "If token references is sufficient (true, default), or if entire\
            \ tokens are to be returned (false)."
          type: boolean
          xml:
            attribute: true
      type: object
      xml:
        name: GetTokens
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    TokensResult:
      example:
        Tokens:
          key: ""
      properties:
        Tokens:
          additionalProperties: true
          type: object
          xml:
            attribute: false
            name: Tokens
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetContractTokensBody:
      example:
        offset: 0
        references: true
        contractId: contractId
        maxCount: 6
      properties:
        contractId:
          description: Identity of contract to get tokens for.
          type: string
          xml:
            attribute: true
        offset:
          description: Offset into the list where response begins.
          type: integer
          xml:
            attribute: true
        maxCount:
          description: Maximum number of tokens to return.
          type: integer
          xml:
            attribute: true
        references:
          description: "If token references is sufficient (true, default), or if entire\
            \ tokens are to be returned (false)."
          type: boolean
          xml:
            attribute: true
      required:
      - contractId
      type: object
      xml:
        name: GetContractTokens
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetCreationAttributesBody:
      type: object
      xml:
        name: GetCreationAttributes
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    CreationAttributes:
      example:
        trustProvider: trustProvider
        currency: currency
        commision: 0.8008281904610115
      properties:
        currency:
          description: Currency of wallet.
          type: string
          xml:
            attribute: true
        commision:
          description: Commision to charge.
          format: double
          type: number
          xml:
            attribute: true
        trustProvider:
          description: Trust provider to use.
          type: string
          xml:
            attribute: true
      required:
      - commision
      - currency
      - trustProvider
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetTokenBody:
      example:
        tokenId: tokenId
      properties:
        tokenId:
          description: Identity of token to get.
          type: string
          xml:
            attribute: true
      required:
      - tokenId
      type: object
      xml:
        name: GetToken
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    TokenResult:
      example:
        Token:
          key: ""
      properties:
        Token:
          additionalProperties: true
          type: object
          xml:
            attribute: false
            name: Token
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetDescriptionBody:
      example:
        tokenId: tokenId
        reportFormat: null
      properties:
        tokenId:
          description: Identity of token to get description for.
          type: string
          xml:
            attribute: true
        reportFormat:
          $ref: '#/components/schemas/reportFormat'
      required:
      - reportFormat
      - tokenId
      type: object
      xml:
        name: GetDescription
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    ReportResult:
      example:
        report: report
      properties:
        report:
          description: Generated report.
          type: string
          xml:
            attribute: true
      required:
      - report
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    AddTextNoteBody:
      example:
        note: note
        tokenId: tokenId
        personal: true
      properties:
        tokenId:
          description: Identity of token to add text note to.
          type: string
          xml:
            attribute: true
        note:
          description: Text note to add.
          type: string
          xml:
            attribute: true
        personal:
          description: If the note is personal or note. Personal notes are deleted
            when the token changes owner.
          type: boolean
          xml:
            attribute: true
      required:
      - note
      - personal
      - tokenId
      type: object
      xml:
        name: AddTextNote
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    NoteResult:
      example:
        Note:
          key: ""
      properties:
        Note:
          additionalProperties: true
          type: object
          xml:
            attribute: false
            name: Note
      required:
      - Note
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    AddXmlNoteBody:
      example:
        note: note
        tokenId: tokenId
        personal: true
      properties:
        tokenId:
          description: Identity of token to add XML note to.
          type: string
          xml:
            attribute: true
        note:
          description: XML note to add.
          type: string
          xml:
            attribute: true
        personal:
          description: If the note is personal or note. Personal notes are deleted
            when the token changes owner.
          type: boolean
          xml:
            attribute: true
      required:
      - note
      - personal
      - tokenId
      type: object
      xml:
        name: AddXmlNote
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetTokenEventsBody:
      example:
        tokenId: tokenId
        offset: 0
        maxCount: 6
      properties:
        tokenId:
          description: Identity of token to get events for.
          type: string
          xml:
            attribute: true
        offset:
          description: Offset into the list where response begins.
          type: integer
          xml:
            attribute: true
        maxCount:
          description: Maximum number of events to return.
          type: integer
          xml:
            attribute: true
      required:
      - tokenId
      type: object
      xml:
        name: GetTokenEvents
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    EventsResult:
      example:
        Events:
          key: ""
      properties:
        Events:
          additionalProperties: true
          type: object
          xml:
            name: Events
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    GetCurrentStateBody:
      example:
        tokenId: tokenId
      properties:
        tokenId:
          description: Identity of token to get current state for.
          type: string
          xml:
            attribute: true
      required:
      - tokenId
      type: object
      xml:
        name: GetCurrentState
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    CreateReportBody:
      example:
        reportType: Present
        tokenId: tokenId
        reportFormat: null
      properties:
        tokenId:
          description: Identity of token to get description for.
          type: string
          xml:
            attribute: true
        reportType:
          description: Type of report to generate.
          enum:
          - Present
          - Historsy
          - StateDiagram
          - Profiling
          type: string
          xml:
            attribute: true
        reportFormat:
          $ref: '#/components/schemas/reportFormat'
      required:
      - reportFormat
      - reportType
      - tokenId
      type: object
      xml:
        name: CreateReport
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    reportFormat:
      description: Format of report.
      enum:
      - Html
      - Text
      - Xml
      - Markdown
      - Xaml
      - XamarinXaml
      - SmartContract
      type: string
      xml:
        attribute: true
    StateResult:
      example:
        CurrentState:
          key: ""
      properties:
        CurrentState:
          additionalProperties: true
          type: object
          xml:
            attribute: false
            name: CurrentState
      type: object
      xml:
        namespace: https://waher.se/Schema/BrokerAgent.xsd
    postContent_request:
      properties:
        Content:
          format: binary
          type: string
        ContentId:
          type: string
        Visibility:
          enum:
          - Public
          - Presence
          - Private
          type: string
      type: object
    IdentityJson_clientPublicKey:
      additionalProperties: true
      description: The public key object of the client.
      example:
        __name: __name
        __ns: __ns
      properties:
        __name:
          description: The local name of the public key.
          type: string
        __ns:
          description: The namespace of the public key.
          type: string
      required:
      - __name
      - __ns
      type: object
    IdentityJson_property_inner:
      additionalProperties: true
      example:
        __name: __name
        xmlns: xmlns
        __ns: __ns
      properties:
        __name:
          description: The local name of the property.
          type: string
        __ns:
          description: The namespace of the property.
          type: string
        xmlns:
          description: The XML namespace of the property.
          type: string
      required:
      - __name
      - __ns
      type: object
    IdentityJson_clientSignature:
      description: The signature object of the client.
      example:
        __name: __name
        __ns: __ns
        value: value
      properties:
        __name:
          description: The local name of the signature.
          type: string
        __ns:
          description: The namespace of the signature.
          type: string
        value:
          description: The signature.
          type: string
      required:
      - __name
      - __ns
      - value
      type: object
    IdentityJson_status:
      description: The status object of the identity.
      example:
        __name: __name
        provider: provider
        created: 2000-01-23T04:56:07.000+00:00
        __ns: __ns
        from: 2000-01-23T04:56:07.000+00:00
        state: state
        to: 2000-01-23T04:56:07.000+00:00
        updated: 2000-01-23T04:56:07.000+00:00
      properties:
        __name:
          description: The local name of the status.
          type: string
        __ns:
          description: The namespace of the status.
          type: string
        created:
          description: When the status was created.
          format: date-time
          type: string
        from:
          format: date-time
          type: string
        provider:
          description: The Bare JID of the provider.
          type: string
        state:
          description: The state of the status.
          type: string
        to:
          format: date-time
          type: string
        updated:
          description: When the status was last updated.
          format: date-time
          type: string
      required:
      - __name
      - __ns
      - created
      - from
      - provider
      - state
      - to
      - updated
      type: object
    IdentityJson_serverSignature:
      description: The signature object of the server.
      example:
        __name: __name
        __ns: __ns
        value: value
      properties:
        __name:
          description: The local name of the signature.
          type: string
        __ns:
          description: The namespace of the signature.
          type: string
        value:
          description: The signature.
          type: string
      required:
      - __name
      - __ns
      - value
      type: object
  securitySchemes:
    WwwAuth:
      scheme: basic
      type: http
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http

