/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using TAG.Networking.Agent.Client;
using TAG.Networking.Agent.Api;
// uncomment below to import models
//using TAG.Networking.Agent.Model;

namespace TAG.Networking.Agent.Test.Api
{
    /// <summary>
    ///  Class for testing AccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountApiTests : IDisposable
    {
        private AccountApi instance;

        public AccountApiTests()
        {
            instance = new AccountApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AccountApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AccountApi
            //Assert.IsType<AccountApi>(instance);
        }

        /// <summary>
        /// Test CreateAccount
        /// </summary>
        [Fact]
        public void CreateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateAccountBody createAccountBody = null;
            //var response = instance.CreateAccount(createAccountBody);
            //Assert.IsType<CreateAccountResponse>(response);
        }

        /// <summary>
        /// Test GetDomainInfo
        /// </summary>
        [Fact]
        public void GetDomainInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptLanguage = null;
            //var response = instance.GetDomainInfo(acceptLanguage);
            //Assert.IsType<DomainInfoResponse>(response);
        }

        /// <summary>
        /// Test GetSessionToken
        /// </summary>
        [Fact]
        public void GetSessionTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //var response = instance.GetSessionToken(body);
            //Assert.IsType<GetSessionTokenResponse>(response);
        }

        /// <summary>
        /// Test Login
        /// </summary>
        [Fact]
        public void LoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LoginBody loginBody = null;
            //var response = instance.Login(loginBody);
            //Assert.IsType<LoginResponse>(response);
        }

        /// <summary>
        /// Test Logout
        /// </summary>
        [Fact]
        public void LogoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //var response = instance.Logout(body);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Recover
        /// </summary>
        [Fact]
        public void RecoverTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecoverBody recoverBody = null;
            //var response = instance.Recover(recoverBody);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Refresh
        /// </summary>
        [Fact]
        public void RefreshTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RefreshBody refreshBody = null;
            //var response = instance.Refresh(refreshBody);
            //Assert.IsType<LoginResponse>(response);
        }

        /// <summary>
        /// Test VerifyEMail
        /// </summary>
        [Fact]
        public void VerifyEMailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //VerifyEMailBody verifyEMailBody = null;
            //var response = instance.VerifyEMail(verifyEMailBody);
            //Assert.IsType<VerifyEMailResponse>(response);
        }

        /// <summary>
        /// Test WwwLogin
        /// </summary>
        [Fact]
        public void WwwLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WwwLoginBody wwwLoginBody = null;
            //var response = instance.WwwLogin(wwwLoginBody);
            //Assert.IsType<LoginResponse>(response);
        }
    }
}
