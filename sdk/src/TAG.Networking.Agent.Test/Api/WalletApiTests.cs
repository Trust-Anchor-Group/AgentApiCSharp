/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using TAG.Networking.Agent.Client;
using TAG.Networking.Agent.Api;
// uncomment below to import models
//using TAG.Networking.Agent.Model;

namespace TAG.Networking.Agent.Test.Api
{
    /// <summary>
    ///  Class for testing WalletApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WalletApiTests : IDisposable
    {
        private WalletApi instance;

        public WalletApiTests()
        {
            instance = new WalletApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WalletApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WalletApi
            //Assert.IsType<WalletApi>(instance);
        }

        /// <summary>
        /// Test GetBalance
        /// </summary>
        [Fact]
        public void GetBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //var response = instance.GetBalance(body);
            //Assert.IsType<GetBalanceResponse>(response);
        }

        /// <summary>
        /// Test GetPaymentOptionsForBuyingEDaler
        /// </summary>
        [Fact]
        public void GetPaymentOptionsForBuyingEDalerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetPaymentOptionsForBuyingEDalerBody getPaymentOptionsForBuyingEDalerBody = null;
            //var response = instance.GetPaymentOptionsForBuyingEDaler(getPaymentOptionsForBuyingEDalerBody);
            //Assert.IsType<TransactionInformation>(response);
        }

        /// <summary>
        /// Test GetPaymentOptionsForSellingEDaler
        /// </summary>
        [Fact]
        public void GetPaymentOptionsForSellingEDalerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetPaymentOptionsForSellingEDalerBody getPaymentOptionsForSellingEDalerBody = null;
            //var response = instance.GetPaymentOptionsForSellingEDaler(getPaymentOptionsForSellingEDalerBody);
            //Assert.IsType<TransactionInformation>(response);
        }

        /// <summary>
        /// Test GetServiceProvidersForBuyingEDaler
        /// </summary>
        [Fact]
        public void GetServiceProvidersForBuyingEDalerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //var response = instance.GetServiceProvidersForBuyingEDaler(body);
            //Assert.IsType<ProvidersResponse>(response);
        }

        /// <summary>
        /// Test GetServiceProvidersForSellingEDaler
        /// </summary>
        [Fact]
        public void GetServiceProvidersForSellingEDalerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //var response = instance.GetServiceProvidersForSellingEDaler(body);
            //Assert.IsType<ProvidersResponse>(response);
        }

        /// <summary>
        /// Test GetTransactionInformation
        /// </summary>
        [Fact]
        public void GetTransactionInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetTransactionInformationBody getTransactionInformationBody = null;
            //var response = instance.GetTransactionInformation(getTransactionInformationBody);
            //Assert.IsType<TransactionInformation>(response);
        }

        /// <summary>
        /// Test InitiateBuyEDaler
        /// </summary>
        [Fact]
        public void InitiateBuyEDalerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InitiateBuyEDalerBody initiateBuyEDalerBody = null;
            //var response = instance.InitiateBuyEDaler(initiateBuyEDalerBody);
            //Assert.IsType<TransactionInformation>(response);
        }

        /// <summary>
        /// Test InitiateSellEDaler
        /// </summary>
        [Fact]
        public void InitiateSellEDalerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InitiateSellEDalerBody initiateSellEDalerBody = null;
            //var response = instance.InitiateSellEDaler(initiateSellEDalerBody);
            //Assert.IsType<TransactionInformation>(response);
        }

        /// <summary>
        /// Test ProcessEDalerUri
        /// </summary>
        [Fact]
        public void ProcessEDalerUriTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProcessEDalerUriBody processEDalerUriBody = null;
            //var response = instance.ProcessEDalerUri(processEDalerUriBody);
            //Assert.IsType<ProcessResult>(response);
        }
    }
}
