/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using TAG.Networking.Agent.Client;
using TAG.Networking.Agent.Api;
// uncomment below to import models
//using TAG.Networking.Agent.Model;

namespace TAG.Networking.Agent.Test.Api
{
    /// <summary>
    ///  Class for testing XMPPApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class XMPPApiTests : IDisposable
    {
        private XMPPApi instance;

        public XMPPApiTests()
        {
            instance = new XMPPApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of XMPPApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' XMPPApi
            //Assert.IsType<XMPPApi>(instance);
        }

        /// <summary>
        /// Test GetRoster
        /// </summary>
        [Fact]
        public void GetRosterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetRosterBody getRosterBody = null;
            //var response = instance.GetRoster(getRosterBody);
            //Assert.IsType<GetRosterResponse>(response);
        }

        /// <summary>
        /// Test GetRosterItem
        /// </summary>
        [Fact]
        public void GetRosterItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetRosterItemBody getRosterItemBody = null;
            //var response = instance.GetRosterItem(getRosterItemBody);
            //Assert.IsType<RosterItem>(response);
        }

        /// <summary>
        /// Test InformationQuery
        /// </summary>
        [Fact]
        public void InformationQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InformationQueryBody informationQueryBody = null;
            //var response = instance.InformationQuery(informationQueryBody);
            //Assert.IsType<QueryResultJson>(response);
        }

        /// <summary>
        /// Test PopMessages
        /// </summary>
        [Fact]
        public void PopMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PopMessagesBody popMessagesBody = null;
            //var response = instance.PopMessages(popMessagesBody);
            //Assert.IsType<MessageResult>(response);
        }

        /// <summary>
        /// Test PresenceProbe
        /// </summary>
        [Fact]
        public void PresenceProbeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PresenceProbeBody presenceProbeBody = null;
            //var response = instance.PresenceProbe(presenceProbeBody);
            //Assert.IsType<ProbeResult>(response);
        }

        /// <summary>
        /// Test RemoveRosterItem
        /// </summary>
        [Fact]
        public void RemoveRosterItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RemoveRosterItemBody removeRosterItemBody = null;
            //var response = instance.RemoveRosterItem(removeRosterItemBody);
            //Assert.IsType<RosterItem>(response);
        }

        /// <summary>
        /// Test SendFormattedMessage
        /// </summary>
        [Fact]
        public void SendFormattedMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SendFormattedMessage sendFormattedMessage = null;
            //var response = instance.SendFormattedMessage(sendFormattedMessage);
            //Assert.IsType<StanzaResult>(response);
        }

        /// <summary>
        /// Test SendPresenceSubscription
        /// </summary>
        [Fact]
        public void SendPresenceSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SendPresenceSubscriptionBody sendPresenceSubscriptionBody = null;
            //var response = instance.SendPresenceSubscription(sendPresenceSubscriptionBody);
            //Assert.IsType<PresenceSubscriptionResult>(response);
        }

        /// <summary>
        /// Test SendPresenceUnsubscription
        /// </summary>
        [Fact]
        public void SendPresenceUnsubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SendPresenceUnsubscriptionBody sendPresenceUnsubscriptionBody = null;
            //var response = instance.SendPresenceUnsubscription(sendPresenceUnsubscriptionBody);
            //Assert.IsType<StanzaResult>(response);
        }

        /// <summary>
        /// Test SendSubscriptionAccepted
        /// </summary>
        [Fact]
        public void SendSubscriptionAcceptedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SendSubscriptionAcceptedBody sendSubscriptionAcceptedBody = null;
            //var response = instance.SendSubscriptionAccepted(sendSubscriptionAcceptedBody);
            //Assert.IsType<SendSubscriptionAcceptedResponse>(response);
        }

        /// <summary>
        /// Test SendSubscriptionDeclined
        /// </summary>
        [Fact]
        public void SendSubscriptionDeclinedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SendSubscriptionDeclinedBody sendSubscriptionDeclinedBody = null;
            //var response = instance.SendSubscriptionDeclined(sendSubscriptionDeclinedBody);
            //Assert.IsType<StanzaResult>(response);
        }

        /// <summary>
        /// Test SendTextMessage
        /// </summary>
        [Fact]
        public void SendTextMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SendTextMessageBody sendTextMessageBody = null;
            //var response = instance.SendTextMessage(sendTextMessageBody);
            //Assert.IsType<StanzaResult>(response);
        }

        /// <summary>
        /// Test SendXmlMessage
        /// </summary>
        [Fact]
        public void SendXmlMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SendXmlMessage sendXmlMessage = null;
            //var response = instance.SendXmlMessage(sendXmlMessage);
            //Assert.IsType<StanzaResult>(response);
        }

        /// <summary>
        /// Test SetRosterItem
        /// </summary>
        [Fact]
        public void SetRosterItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetRosterItemBody setRosterItemBody = null;
            //var response = instance.SetRosterItem(setRosterItemBody);
            //Assert.IsType<RosterItem>(response);
        }
    }
}
