/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using TAG.Networking.Agent.Client;
using TAG.Networking.Agent.Api;
// uncomment below to import models
//using TAG.Networking.Agent.Model;

namespace TAG.Networking.Agent.Test.Api
{
    /// <summary>
    ///  Class for testing TokensApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TokensApiTests : IDisposable
    {
        private TokensApi instance;

        public TokensApiTests()
        {
            instance = new TokensApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TokensApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TokensApi
            //Assert.IsType<TokensApi>(instance);
        }

        /// <summary>
        /// Test AddTextNote
        /// </summary>
        [Fact]
        public void AddTextNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddTextNoteBody addTextNoteBody = null;
            //var response = instance.AddTextNote(addTextNoteBody);
            //Assert.IsType<NoteResult>(response);
        }

        /// <summary>
        /// Test AddXmlNote
        /// </summary>
        [Fact]
        public void AddXmlNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddXmlNoteBody addXmlNoteBody = null;
            //var response = instance.AddXmlNote(addXmlNoteBody);
            //Assert.IsType<NoteResult>(response);
        }

        /// <summary>
        /// Test GetContractTokens
        /// </summary>
        [Fact]
        public void GetContractTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetContractTokensBody getContractTokensBody = null;
            //var response = instance.GetContractTokens(getContractTokensBody);
            //Assert.IsType<TokensResult>(response);
        }

        /// <summary>
        /// Test GetCreationAttributes
        /// </summary>
        [Fact]
        public void GetCreationAttributesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //var response = instance.GetCreationAttributes(body);
            //Assert.IsType<CreationAttributes>(response);
        }

        /// <summary>
        /// Test GetDescription
        /// </summary>
        [Fact]
        public void GetDescriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetDescriptionBody getDescriptionBody = null;
            //var response = instance.GetDescription(getDescriptionBody);
            //Assert.IsType<ReportResult>(response);
        }

        /// <summary>
        /// Test GetToken
        /// </summary>
        [Fact]
        public void GetTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetTokenBody getTokenBody = null;
            //var response = instance.GetToken(getTokenBody);
            //Assert.IsType<TokenResult>(response);
        }

        /// <summary>
        /// Test GetTokenEvents
        /// </summary>
        [Fact]
        public void GetTokenEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetTokenEventsBody getTokenEventsBody = null;
            //var response = instance.GetTokenEvents(getTokenEventsBody);
            //Assert.IsType<EventsResult>(response);
        }

        /// <summary>
        /// Test GetTokens
        /// </summary>
        [Fact]
        public void GetTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetTokensBody getTokensBody = null;
            //var response = instance.GetTokens(getTokensBody);
            //Assert.IsType<TokensResult>(response);
        }
    }
}
