/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// CreateReportBody
    /// </summary>
    [DataContract(Name = "CreateReportBody")]
    public partial class CreateReportBody : IEquatable<CreateReportBody>, IValidatableObject
    {
        /// <summary>
        /// Type of report to generate.
        /// </summary>
        /// <value>Type of report to generate.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReportTypeEnum
        {
            /// <summary>
            /// Enum Present for value: Present
            /// </summary>
            [EnumMember(Value = "Present")]
            Present = 1,

            /// <summary>
            /// Enum Historsy for value: Historsy
            /// </summary>
            [EnumMember(Value = "Historsy")]
            Historsy = 2,

            /// <summary>
            /// Enum StateDiagram for value: StateDiagram
            /// </summary>
            [EnumMember(Value = "StateDiagram")]
            StateDiagram = 3,

            /// <summary>
            /// Enum Profiling for value: Profiling
            /// </summary>
            [EnumMember(Value = "Profiling")]
            Profiling = 4
        }


        /// <summary>
        /// Type of report to generate.
        /// </summary>
        /// <value>Type of report to generate.</value>
        [DataMember(Name = "reportType", IsRequired = true, EmitDefaultValue = true)]
        public ReportTypeEnum ReportType { get; set; }

        /// <summary>
        /// Gets or Sets ReportFormat
        /// </summary>
        [DataMember(Name = "reportFormat", IsRequired = true, EmitDefaultValue = true)]
        public ReportFormat ReportFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateReportBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateReportBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateReportBody" /> class.
        /// </summary>
        /// <param name="tokenId">Identity of token to get description for. (required).</param>
        /// <param name="reportType">Type of report to generate. (required).</param>
        /// <param name="reportFormat">reportFormat (required).</param>
        public CreateReportBody(string tokenId = default(string), ReportTypeEnum reportType = default(ReportTypeEnum), ReportFormat reportFormat = default(ReportFormat))
        {
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
            {
                throw new ArgumentNullException("tokenId is a required property for CreateReportBody and cannot be null");
            }
            this.TokenId = tokenId;
            this.ReportType = reportType;
            this.ReportFormat = reportFormat;
        }

        /// <summary>
        /// Identity of token to get description for.
        /// </summary>
        /// <value>Identity of token to get description for.</value>
        [DataMember(Name = "tokenId", IsRequired = true, EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateReportBody {\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  ReportFormat: ").Append(ReportFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateReportBody);
        }

        /// <summary>
        /// Returns true if CreateReportBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateReportBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateReportBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                ) && 
                (
                    this.ReportType == input.ReportType ||
                    this.ReportType.Equals(input.ReportType)
                ) && 
                (
                    this.ReportFormat == input.ReportFormat ||
                    this.ReportFormat.Equals(input.ReportFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReportType.GetHashCode();
                hashCode = (hashCode * 59) + this.ReportFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
