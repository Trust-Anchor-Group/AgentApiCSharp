/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// GetSessionTokenResponse
    /// </summary>
    [DataContract(Name = "GetSessionTokenResponse")]
    public partial class GetSessionTokenResponse : IEquatable<GetSessionTokenResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSessionTokenResponse" /> class.
        /// </summary>
        /// <param name="accountCreated">accountCreated.</param>
        /// <param name="seconds">The number of seconds until the JWT expires..</param>
        public GetSessionTokenResponse(CreateAccountResponse accountCreated = default(CreateAccountResponse), int seconds = default(int))
        {
            this.AccountCreated = accountCreated;
            this.Seconds = seconds;
        }

        /// <summary>
        /// Gets or Sets AccountCreated
        /// </summary>
        [DataMember(Name = "AccountCreated", EmitDefaultValue = false)]
        public CreateAccountResponse AccountCreated { get; set; }

        /// <summary>
        /// The number of seconds until the JWT expires.
        /// </summary>
        /// <value>The number of seconds until the JWT expires.</value>
        [DataMember(Name = "seconds", EmitDefaultValue = false)]
        public int Seconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSessionTokenResponse {\n");
            sb.Append("  AccountCreated: ").Append(AccountCreated).Append("\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSessionTokenResponse);
        }

        /// <summary>
        /// Returns true if GetSessionTokenResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSessionTokenResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSessionTokenResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountCreated == input.AccountCreated ||
                    (this.AccountCreated != null &&
                    this.AccountCreated.Equals(input.AccountCreated))
                ) && 
                (
                    this.Seconds == input.Seconds ||
                    this.Seconds.Equals(input.Seconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountCreated != null)
                {
                    hashCode = (hashCode * 59) + this.AccountCreated.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Seconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Seconds (int) maximum
            if (this.Seconds > (int)3600)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Seconds, must be a value less than or equal to 3600.", new [] { "Seconds" });
            }

            // Seconds (int) minimum
            if (this.Seconds < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Seconds, must be a value greater than or equal to 0.", new [] { "Seconds" });
            }

            yield break;
        }
    }

}
