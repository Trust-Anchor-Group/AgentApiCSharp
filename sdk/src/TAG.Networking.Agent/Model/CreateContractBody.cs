/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// CreateContractBody
    /// </summary>
    [DataContract(Name = "CreateContractBody")]
    public partial class CreateContractBody : IEquatable<CreateContractBody>, IValidatableObject
    {
        /// <summary>
        /// Visibility of contract.
        /// </summary>
        /// <value>Visibility of contract.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibilityEnum
        {
            /// <summary>
            /// Enum Public for value: Public
            /// </summary>
            [EnumMember(Value = "Public")]
            Public = 1,

            /// <summary>
            /// Enum PublicSearchable for value: PublicSearchable
            /// </summary>
            [EnumMember(Value = "PublicSearchable")]
            PublicSearchable = 2,

            /// <summary>
            /// Enum CreatorAndParts for value: CreatorAndParts
            /// </summary>
            [EnumMember(Value = "CreatorAndParts")]
            CreatorAndParts = 3,

            /// <summary>
            /// Enum DomainAndParts for value: DomainAndParts
            /// </summary>
            [EnumMember(Value = "DomainAndParts")]
            DomainAndParts = 4
        }


        /// <summary>
        /// Visibility of contract.
        /// </summary>
        /// <value>Visibility of contract.</value>
        [DataMember(Name = "visibility", IsRequired = true, EmitDefaultValue = true)]
        public VisibilityEnum Visibility { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateContractBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateContractBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateContractBody" /> class.
        /// </summary>
        /// <param name="templateId">Identity of template to use. (required).</param>
        /// <param name="visibility">Visibility of contract. (required).</param>
        /// <param name="parts">parts.</param>
        /// <param name="parameters">parameters.</param>
        public CreateContractBody(string templateId = default(string), VisibilityEnum visibility = default(VisibilityEnum), List<Part> parts = default(List<Part>), List<Parameter> parameters = default(List<Parameter>))
        {
            // to ensure "templateId" is required (not null)
            if (templateId == null)
            {
                throw new ArgumentNullException("templateId is a required property for CreateContractBody and cannot be null");
            }
            this.TemplateId = templateId;
            this.Visibility = visibility;
            this.Parts = parts;
            this.Parameters = parameters;
        }

        /// <summary>
        /// Identity of template to use.
        /// </summary>
        /// <value>Identity of template to use.</value>
        [DataMember(Name = "templateId", IsRequired = true, EmitDefaultValue = true)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Gets or Sets Parts
        /// </summary>
        [DataMember(Name = "Parts", EmitDefaultValue = true)]
        public List<Part> Parts { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "Parameters", EmitDefaultValue = true)]
        public List<Parameter> Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateContractBody {\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Parts: ").Append(Parts).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateContractBody);
        }

        /// <summary>
        /// Returns true if CreateContractBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateContractBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateContractBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    this.Visibility.Equals(input.Visibility)
                ) && 
                (
                    this.Parts == input.Parts ||
                    this.Parts != null &&
                    input.Parts != null &&
                    this.Parts.SequenceEqual(input.Parts)
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Visibility.GetHashCode();
                if (this.Parts != null)
                {
                    hashCode = (hashCode * 59) + this.Parts.GetHashCode();
                }
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
