/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// CreateAccountResponse
    /// </summary>
    [DataContract(Name = "CreateAccountResponse")]
    public partial class CreateAccountResponse : IEquatable<CreateAccountResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAccountResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAccountResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAccountResponse" /> class.
        /// </summary>
        /// <param name="created">The server timestamp when the account was created. (required).</param>
        /// <param name="enabled">Whether the account is enabled. (required).</param>
        /// <param name="canRelay">Whether the account can relay e-mails. (required).</param>
        /// <param name="jwt">The JSON Web Token for authentication. (required).</param>
        /// <param name="expires">The timestamp when the jwt token expires. (required).</param>
        public CreateAccountResponse(int created = default(int), bool enabled = default(bool), bool canRelay = default(bool), string jwt = default(string), int expires = default(int))
        {
            this.Created = created;
            this.Enabled = enabled;
            this.CanRelay = canRelay;
            // to ensure "jwt" is required (not null)
            if (jwt == null)
            {
                throw new ArgumentNullException("jwt is a required property for CreateAccountResponse and cannot be null");
            }
            this.Jwt = jwt;
            this.Expires = expires;
        }

        /// <summary>
        /// The server timestamp when the account was created.
        /// </summary>
        /// <value>The server timestamp when the account was created.</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public int Created { get; set; }

        /// <summary>
        /// Whether the account is enabled.
        /// </summary>
        /// <value>Whether the account is enabled.</value>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Whether the account can relay e-mails.
        /// </summary>
        /// <value>Whether the account can relay e-mails.</value>
        [DataMember(Name = "canRelay", IsRequired = true, EmitDefaultValue = true)]
        public bool CanRelay { get; set; }

        /// <summary>
        /// The JSON Web Token for authentication.
        /// </summary>
        /// <value>The JSON Web Token for authentication.</value>
        [DataMember(Name = "jwt", IsRequired = true, EmitDefaultValue = true)]
        public string Jwt { get; set; }

        /// <summary>
        /// The timestamp when the jwt token expires.
        /// </summary>
        /// <value>The timestamp when the jwt token expires.</value>
        [DataMember(Name = "expires", IsRequired = true, EmitDefaultValue = true)]
        public int Expires { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAccountResponse {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  CanRelay: ").Append(CanRelay).Append("\n");
            sb.Append("  Jwt: ").Append(Jwt).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAccountResponse);
        }

        /// <summary>
        /// Returns true if CreateAccountResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAccountResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAccountResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Created == input.Created ||
                    this.Created.Equals(input.Created)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.CanRelay == input.CanRelay ||
                    this.CanRelay.Equals(input.CanRelay)
                ) && 
                (
                    this.Jwt == input.Jwt ||
                    (this.Jwt != null &&
                    this.Jwt.Equals(input.Jwt))
                ) && 
                (
                    this.Expires == input.Expires ||
                    this.Expires.Equals(input.Expires)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Created.GetHashCode();
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                hashCode = (hashCode * 59) + this.CanRelay.GetHashCode();
                if (this.Jwt != null)
                {
                    hashCode = (hashCode * 59) + this.Jwt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Expires.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
