/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// ReportResult
    /// </summary>
    [DataContract(Name = "ReportResult")]
    public partial class ReportResult : IEquatable<ReportResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportResult" /> class.
        /// </summary>
        /// <param name="report">Generated report. (required).</param>
        public ReportResult(string report = default(string))
        {
            // to ensure "report" is required (not null)
            if (report == null)
            {
                throw new ArgumentNullException("report is a required property for ReportResult and cannot be null");
            }
            this.Report = report;
        }

        /// <summary>
        /// Generated report.
        /// </summary>
        /// <value>Generated report.</value>
        [DataMember(Name = "report", IsRequired = true, EmitDefaultValue = true)]
        public string Report { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportResult {\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportResult);
        }

        /// <summary>
        /// Returns true if ReportResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Report == input.Report ||
                    (this.Report != null &&
                    this.Report.Equals(input.Report))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Report != null)
                {
                    hashCode = (hashCode * 59) + this.Report.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
