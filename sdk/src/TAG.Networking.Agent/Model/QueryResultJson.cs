/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// QueryResultJson
    /// </summary>
    [DataContract(Name = "QueryResultJson")]
    public partial class QueryResultJson : IEquatable<QueryResultJson>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryResultJson" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QueryResultJson() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryResultJson" /> class.
        /// </summary>
        /// <param name="ok">Whether the query was successful or not. (required).</param>
        /// <param name="errorCode">If the query was not successful, this is the error code..</param>
        /// <param name="errorText">If the query was not successful, this is the error text..</param>
        /// <param name="errorType">If the query was not successful, this is the error type..</param>
        /// <param name="errorElement">If the query was not successful, this is the error element..</param>
        /// <param name="stanza">The XML stanza that was sent..</param>
        public QueryResultJson(bool ok = default(bool), int errorCode = default(int), string errorText = default(string), string errorType = default(string), string errorElement = default(string), string stanza = default(string))
        {
            this.Ok = ok;
            this.ErrorCode = errorCode;
            this.ErrorText = errorText;
            this.ErrorType = errorType;
            this.ErrorElement = errorElement;
            this.Stanza = stanza;
        }

        /// <summary>
        /// Whether the query was successful or not.
        /// </summary>
        /// <value>Whether the query was successful or not.</value>
        [DataMember(Name = "ok", IsRequired = true, EmitDefaultValue = true)]
        public bool Ok { get; set; }

        /// <summary>
        /// If the query was not successful, this is the error code.
        /// </summary>
        /// <value>If the query was not successful, this is the error code.</value>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        public int ErrorCode { get; set; }

        /// <summary>
        /// If the query was not successful, this is the error text.
        /// </summary>
        /// <value>If the query was not successful, this is the error text.</value>
        [DataMember(Name = "errorText", EmitDefaultValue = false)]
        public string ErrorText { get; set; }

        /// <summary>
        /// If the query was not successful, this is the error type.
        /// </summary>
        /// <value>If the query was not successful, this is the error type.</value>
        [DataMember(Name = "errorType", EmitDefaultValue = false)]
        public string ErrorType { get; set; }

        /// <summary>
        /// If the query was not successful, this is the error element.
        /// </summary>
        /// <value>If the query was not successful, this is the error element.</value>
        [DataMember(Name = "ErrorElement", EmitDefaultValue = false)]
        public string ErrorElement { get; set; }

        /// <summary>
        /// The XML stanza that was sent.
        /// </summary>
        /// <value>The XML stanza that was sent.</value>
        [DataMember(Name = "Stanza", EmitDefaultValue = false)]
        public string Stanza { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryResultJson {\n");
            sb.Append("  Ok: ").Append(Ok).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorText: ").Append(ErrorText).Append("\n");
            sb.Append("  ErrorType: ").Append(ErrorType).Append("\n");
            sb.Append("  ErrorElement: ").Append(ErrorElement).Append("\n");
            sb.Append("  Stanza: ").Append(Stanza).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryResultJson);
        }

        /// <summary>
        /// Returns true if QueryResultJson instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryResultJson to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryResultJson input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ok == input.Ok ||
                    this.Ok.Equals(input.Ok)
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    this.ErrorCode.Equals(input.ErrorCode)
                ) && 
                (
                    this.ErrorText == input.ErrorText ||
                    (this.ErrorText != null &&
                    this.ErrorText.Equals(input.ErrorText))
                ) && 
                (
                    this.ErrorType == input.ErrorType ||
                    (this.ErrorType != null &&
                    this.ErrorType.Equals(input.ErrorType))
                ) && 
                (
                    this.ErrorElement == input.ErrorElement ||
                    (this.ErrorElement != null &&
                    this.ErrorElement.Equals(input.ErrorElement))
                ) && 
                (
                    this.Stanza == input.Stanza ||
                    (this.Stanza != null &&
                    this.Stanza.Equals(input.Stanza))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Ok.GetHashCode();
                hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                if (this.ErrorText != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorText.GetHashCode();
                }
                if (this.ErrorType != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorType.GetHashCode();
                }
                if (this.ErrorElement != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorElement.GetHashCode();
                }
                if (this.Stanza != null)
                {
                    hashCode = (hashCode * 59) + this.Stanza.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
