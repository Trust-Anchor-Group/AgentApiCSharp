/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// Provider
    /// </summary>
    [DataContract(Name = "Provider")]
    public partial class Provider : IEquatable<Provider>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Provider" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Provider() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Provider" /> class.
        /// </summary>
        /// <param name="id">Identity of the provider. (required).</param>
        /// <param name="type">Type of provider. (required).</param>
        /// <param name="name">Name of provider. (required).</param>
        /// <param name="reviewerId">Identity of reviewer. (required).</param>
        /// <param name="external">If provider is external. (required).</param>
        /// <param name="iconUrl">URL of icon..</param>
        /// <param name="iconWidth">Width of icon..</param>
        /// <param name="iconHeight">Height of icon..</param>
        public Provider(string id = default(string), string type = default(string), string name = default(string), string reviewerId = default(string), bool external = default(bool), string iconUrl = default(string), int? iconWidth = default(int?), int? iconHeight = default(int?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Provider and cannot be null");
            }
            this.Id = id;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Provider and cannot be null");
            }
            this.Type = type;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Provider and cannot be null");
            }
            this.Name = name;
            // to ensure "reviewerId" is required (not null)
            if (reviewerId == null)
            {
                throw new ArgumentNullException("reviewerId is a required property for Provider and cannot be null");
            }
            this.ReviewerId = reviewerId;
            this.External = external;
            this.IconUrl = iconUrl;
            this.IconWidth = iconWidth;
            this.IconHeight = iconHeight;
        }

        /// <summary>
        /// Identity of the provider.
        /// </summary>
        /// <value>Identity of the provider.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Type of provider.
        /// </summary>
        /// <value>Type of provider.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Name of provider.
        /// </summary>
        /// <value>Name of provider.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Identity of reviewer.
        /// </summary>
        /// <value>Identity of reviewer.</value>
        [DataMember(Name = "reviewerId", IsRequired = true, EmitDefaultValue = true)]
        public string ReviewerId { get; set; }

        /// <summary>
        /// If provider is external.
        /// </summary>
        /// <value>If provider is external.</value>
        [DataMember(Name = "external", IsRequired = true, EmitDefaultValue = true)]
        public bool External { get; set; }

        /// <summary>
        /// URL of icon.
        /// </summary>
        /// <value>URL of icon.</value>
        [DataMember(Name = "iconUrl", EmitDefaultValue = true)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Width of icon.
        /// </summary>
        /// <value>Width of icon.</value>
        [DataMember(Name = "iconWidth", EmitDefaultValue = true)]
        public int? IconWidth { get; set; }

        /// <summary>
        /// Height of icon.
        /// </summary>
        /// <value>Height of icon.</value>
        [DataMember(Name = "iconHeight", EmitDefaultValue = true)]
        public int? IconHeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Provider {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReviewerId: ").Append(ReviewerId).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  IconWidth: ").Append(IconWidth).Append("\n");
            sb.Append("  IconHeight: ").Append(IconHeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Provider);
        }

        /// <summary>
        /// Returns true if Provider instances are equal
        /// </summary>
        /// <param name="input">Instance of Provider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Provider input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ReviewerId == input.ReviewerId ||
                    (this.ReviewerId != null &&
                    this.ReviewerId.Equals(input.ReviewerId))
                ) && 
                (
                    this.External == input.External ||
                    this.External.Equals(input.External)
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                ) && 
                (
                    this.IconWidth == input.IconWidth ||
                    (this.IconWidth != null &&
                    this.IconWidth.Equals(input.IconWidth))
                ) && 
                (
                    this.IconHeight == input.IconHeight ||
                    (this.IconHeight != null &&
                    this.IconHeight.Equals(input.IconHeight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ReviewerId != null)
                {
                    hashCode = (hashCode * 59) + this.ReviewerId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.External.GetHashCode();
                if (this.IconUrl != null)
                {
                    hashCode = (hashCode * 59) + this.IconUrl.GetHashCode();
                }
                if (this.IconWidth != null)
                {
                    hashCode = (hashCode * 59) + this.IconWidth.GetHashCode();
                }
                if (this.IconHeight != null)
                {
                    hashCode = (hashCode * 59) + this.IconHeight.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
