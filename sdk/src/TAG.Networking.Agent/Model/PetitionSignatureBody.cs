/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// PetitionSignatureBody
    /// </summary>
    [DataContract(Name = "PetitionSignatureBody")]
    public partial class PetitionSignatureBody : IEquatable<PetitionSignatureBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PetitionSignatureBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PetitionSignatureBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PetitionSignatureBody" /> class.
        /// </summary>
        /// <param name="keyId">Identity of key to use for signing the petition. It must correspond to the key used when signing the Legal Identity application that will be used to sign the petition. (required).</param>
        /// <param name="legalId">Identifier of the Legal Identity that will be used to sign the petition. (required).</param>
        /// <param name="remoteId">Identifier of the remote legal identity the client requests access to. (required).</param>
        /// <param name="contentBase64">Base64-encoded binary content requested to be signed by the remote legal identity. (required).</param>
        /// <param name="petitionId">An identifier of the request, the client can use to correlate asynchronous responses with the corresponding petition request. (required).</param>
        /// <param name="purpose">A human readable text that will be presented to the remote user, describing the purpose of the petition. (required).</param>
        /// <param name="keySignature">Cryptographic signature of the key ID, using the key password.  (required).</param>
        /// <param name="requestSignature">Cryptographic signature of the request, using the account password.  (required).</param>
        public PetitionSignatureBody(string keyId = default(string), string legalId = default(string), string remoteId = default(string), string contentBase64 = default(string), string petitionId = default(string), string purpose = default(string), string keySignature = default(string), string requestSignature = default(string))
        {
            // to ensure "keyId" is required (not null)
            if (keyId == null)
            {
                throw new ArgumentNullException("keyId is a required property for PetitionSignatureBody and cannot be null");
            }
            this.KeyId = keyId;
            // to ensure "legalId" is required (not null)
            if (legalId == null)
            {
                throw new ArgumentNullException("legalId is a required property for PetitionSignatureBody and cannot be null");
            }
            this.LegalId = legalId;
            // to ensure "remoteId" is required (not null)
            if (remoteId == null)
            {
                throw new ArgumentNullException("remoteId is a required property for PetitionSignatureBody and cannot be null");
            }
            this.RemoteId = remoteId;
            // to ensure "contentBase64" is required (not null)
            if (contentBase64 == null)
            {
                throw new ArgumentNullException("contentBase64 is a required property for PetitionSignatureBody and cannot be null");
            }
            this.ContentBase64 = contentBase64;
            // to ensure "petitionId" is required (not null)
            if (petitionId == null)
            {
                throw new ArgumentNullException("petitionId is a required property for PetitionSignatureBody and cannot be null");
            }
            this.PetitionId = petitionId;
            // to ensure "purpose" is required (not null)
            if (purpose == null)
            {
                throw new ArgumentNullException("purpose is a required property for PetitionSignatureBody and cannot be null");
            }
            this.Purpose = purpose;
            // to ensure "keySignature" is required (not null)
            if (keySignature == null)
            {
                throw new ArgumentNullException("keySignature is a required property for PetitionSignatureBody and cannot be null");
            }
            this.KeySignature = keySignature;
            // to ensure "requestSignature" is required (not null)
            if (requestSignature == null)
            {
                throw new ArgumentNullException("requestSignature is a required property for PetitionSignatureBody and cannot be null");
            }
            this.RequestSignature = requestSignature;
        }

        /// <summary>
        /// Identity of key to use for signing the petition. It must correspond to the key used when signing the Legal Identity application that will be used to sign the petition.
        /// </summary>
        /// <value>Identity of key to use for signing the petition. It must correspond to the key used when signing the Legal Identity application that will be used to sign the petition.</value>
        [DataMember(Name = "keyId", IsRequired = true, EmitDefaultValue = true)]
        public string KeyId { get; set; }

        /// <summary>
        /// Identifier of the Legal Identity that will be used to sign the petition.
        /// </summary>
        /// <value>Identifier of the Legal Identity that will be used to sign the petition.</value>
        [DataMember(Name = "legalId", IsRequired = true, EmitDefaultValue = true)]
        public string LegalId { get; set; }

        /// <summary>
        /// Identifier of the remote legal identity the client requests access to.
        /// </summary>
        /// <value>Identifier of the remote legal identity the client requests access to.</value>
        [DataMember(Name = "remoteId", IsRequired = true, EmitDefaultValue = true)]
        public string RemoteId { get; set; }

        /// <summary>
        /// Base64-encoded binary content requested to be signed by the remote legal identity.
        /// </summary>
        /// <value>Base64-encoded binary content requested to be signed by the remote legal identity.</value>
        [DataMember(Name = "contentBase64", IsRequired = true, EmitDefaultValue = true)]
        public string ContentBase64 { get; set; }

        /// <summary>
        /// An identifier of the request, the client can use to correlate asynchronous responses with the corresponding petition request.
        /// </summary>
        /// <value>An identifier of the request, the client can use to correlate asynchronous responses with the corresponding petition request.</value>
        [DataMember(Name = "petitionId", IsRequired = true, EmitDefaultValue = true)]
        public string PetitionId { get; set; }

        /// <summary>
        /// A human readable text that will be presented to the remote user, describing the purpose of the petition.
        /// </summary>
        /// <value>A human readable text that will be presented to the remote user, describing the purpose of the petition.</value>
        [DataMember(Name = "purpose", IsRequired = true, EmitDefaultValue = true)]
        public string Purpose { get; set; }

        /// <summary>
        /// Cryptographic signature of the key ID, using the key password. 
        /// </summary>
        /// <value>Cryptographic signature of the key ID, using the key password. </value>
        [DataMember(Name = "keySignature", IsRequired = true, EmitDefaultValue = true)]
        public string KeySignature { get; set; }

        /// <summary>
        /// Cryptographic signature of the request, using the account password. 
        /// </summary>
        /// <value>Cryptographic signature of the request, using the account password. </value>
        [DataMember(Name = "requestSignature", IsRequired = true, EmitDefaultValue = true)]
        public string RequestSignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PetitionSignatureBody {\n");
            sb.Append("  KeyId: ").Append(KeyId).Append("\n");
            sb.Append("  LegalId: ").Append(LegalId).Append("\n");
            sb.Append("  RemoteId: ").Append(RemoteId).Append("\n");
            sb.Append("  ContentBase64: ").Append(ContentBase64).Append("\n");
            sb.Append("  PetitionId: ").Append(PetitionId).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  KeySignature: ").Append(KeySignature).Append("\n");
            sb.Append("  RequestSignature: ").Append(RequestSignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PetitionSignatureBody);
        }

        /// <summary>
        /// Returns true if PetitionSignatureBody instances are equal
        /// </summary>
        /// <param name="input">Instance of PetitionSignatureBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PetitionSignatureBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.KeyId == input.KeyId ||
                    (this.KeyId != null &&
                    this.KeyId.Equals(input.KeyId))
                ) && 
                (
                    this.LegalId == input.LegalId ||
                    (this.LegalId != null &&
                    this.LegalId.Equals(input.LegalId))
                ) && 
                (
                    this.RemoteId == input.RemoteId ||
                    (this.RemoteId != null &&
                    this.RemoteId.Equals(input.RemoteId))
                ) && 
                (
                    this.ContentBase64 == input.ContentBase64 ||
                    (this.ContentBase64 != null &&
                    this.ContentBase64.Equals(input.ContentBase64))
                ) && 
                (
                    this.PetitionId == input.PetitionId ||
                    (this.PetitionId != null &&
                    this.PetitionId.Equals(input.PetitionId))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.KeySignature == input.KeySignature ||
                    (this.KeySignature != null &&
                    this.KeySignature.Equals(input.KeySignature))
                ) && 
                (
                    this.RequestSignature == input.RequestSignature ||
                    (this.RequestSignature != null &&
                    this.RequestSignature.Equals(input.RequestSignature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KeyId != null)
                {
                    hashCode = (hashCode * 59) + this.KeyId.GetHashCode();
                }
                if (this.LegalId != null)
                {
                    hashCode = (hashCode * 59) + this.LegalId.GetHashCode();
                }
                if (this.RemoteId != null)
                {
                    hashCode = (hashCode * 59) + this.RemoteId.GetHashCode();
                }
                if (this.ContentBase64 != null)
                {
                    hashCode = (hashCode * 59) + this.ContentBase64.GetHashCode();
                }
                if (this.PetitionId != null)
                {
                    hashCode = (hashCode * 59) + this.PetitionId.GetHashCode();
                }
                if (this.Purpose != null)
                {
                    hashCode = (hashCode * 59) + this.Purpose.GetHashCode();
                }
                if (this.KeySignature != null)
                {
                    hashCode = (hashCode * 59) + this.KeySignature.GetHashCode();
                }
                if (this.RequestSignature != null)
                {
                    hashCode = (hashCode * 59) + this.RequestSignature.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
