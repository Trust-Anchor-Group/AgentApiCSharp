/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// SignDataBody
    /// </summary>
    [DataContract(Name = "SignDataBody")]
    public partial class SignDataBody : IEquatable<SignDataBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignDataBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignDataBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignDataBody" /> class.
        /// </summary>
        /// <param name="keyId">Identity of key to use for signing the data. (required).</param>
        /// <param name="legalId">Identity of the Legal Identity that will be used to sign the data. (required).</param>
        /// <param name="dataBase64">Base64-encoded binary data to sign. (required).</param>
        /// <param name="keySignature">Cryptographic signature of the key ID, using the key password.  (required).</param>
        /// <param name="requestSignature">Cryptographic signature of the request, using the account password.  (required).</param>
        public SignDataBody(string keyId = default(string), string legalId = default(string), string dataBase64 = default(string), string keySignature = default(string), string requestSignature = default(string))
        {
            // to ensure "keyId" is required (not null)
            if (keyId == null)
            {
                throw new ArgumentNullException("keyId is a required property for SignDataBody and cannot be null");
            }
            this.KeyId = keyId;
            // to ensure "legalId" is required (not null)
            if (legalId == null)
            {
                throw new ArgumentNullException("legalId is a required property for SignDataBody and cannot be null");
            }
            this.LegalId = legalId;
            // to ensure "dataBase64" is required (not null)
            if (dataBase64 == null)
            {
                throw new ArgumentNullException("dataBase64 is a required property for SignDataBody and cannot be null");
            }
            this.DataBase64 = dataBase64;
            // to ensure "keySignature" is required (not null)
            if (keySignature == null)
            {
                throw new ArgumentNullException("keySignature is a required property for SignDataBody and cannot be null");
            }
            this.KeySignature = keySignature;
            // to ensure "requestSignature" is required (not null)
            if (requestSignature == null)
            {
                throw new ArgumentNullException("requestSignature is a required property for SignDataBody and cannot be null");
            }
            this.RequestSignature = requestSignature;
        }

        /// <summary>
        /// Identity of key to use for signing the data.
        /// </summary>
        /// <value>Identity of key to use for signing the data.</value>
        [DataMember(Name = "keyId", IsRequired = true, EmitDefaultValue = true)]
        public string KeyId { get; set; }

        /// <summary>
        /// Identity of the Legal Identity that will be used to sign the data.
        /// </summary>
        /// <value>Identity of the Legal Identity that will be used to sign the data.</value>
        [DataMember(Name = "legalId", IsRequired = true, EmitDefaultValue = true)]
        public string LegalId { get; set; }

        /// <summary>
        /// Base64-encoded binary data to sign.
        /// </summary>
        /// <value>Base64-encoded binary data to sign.</value>
        [DataMember(Name = "dataBase64", IsRequired = true, EmitDefaultValue = true)]
        public string DataBase64 { get; set; }

        /// <summary>
        /// Cryptographic signature of the key ID, using the key password. 
        /// </summary>
        /// <value>Cryptographic signature of the key ID, using the key password. </value>
        [DataMember(Name = "keySignature", IsRequired = true, EmitDefaultValue = true)]
        public string KeySignature { get; set; }

        /// <summary>
        /// Cryptographic signature of the request, using the account password. 
        /// </summary>
        /// <value>Cryptographic signature of the request, using the account password. </value>
        [DataMember(Name = "requestSignature", IsRequired = true, EmitDefaultValue = true)]
        public string RequestSignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignDataBody {\n");
            sb.Append("  KeyId: ").Append(KeyId).Append("\n");
            sb.Append("  LegalId: ").Append(LegalId).Append("\n");
            sb.Append("  DataBase64: ").Append(DataBase64).Append("\n");
            sb.Append("  KeySignature: ").Append(KeySignature).Append("\n");
            sb.Append("  RequestSignature: ").Append(RequestSignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignDataBody);
        }

        /// <summary>
        /// Returns true if SignDataBody instances are equal
        /// </summary>
        /// <param name="input">Instance of SignDataBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignDataBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.KeyId == input.KeyId ||
                    (this.KeyId != null &&
                    this.KeyId.Equals(input.KeyId))
                ) && 
                (
                    this.LegalId == input.LegalId ||
                    (this.LegalId != null &&
                    this.LegalId.Equals(input.LegalId))
                ) && 
                (
                    this.DataBase64 == input.DataBase64 ||
                    (this.DataBase64 != null &&
                    this.DataBase64.Equals(input.DataBase64))
                ) && 
                (
                    this.KeySignature == input.KeySignature ||
                    (this.KeySignature != null &&
                    this.KeySignature.Equals(input.KeySignature))
                ) && 
                (
                    this.RequestSignature == input.RequestSignature ||
                    (this.RequestSignature != null &&
                    this.RequestSignature.Equals(input.RequestSignature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KeyId != null)
                {
                    hashCode = (hashCode * 59) + this.KeyId.GetHashCode();
                }
                if (this.LegalId != null)
                {
                    hashCode = (hashCode * 59) + this.LegalId.GetHashCode();
                }
                if (this.DataBase64 != null)
                {
                    hashCode = (hashCode * 59) + this.DataBase64.GetHashCode();
                }
                if (this.KeySignature != null)
                {
                    hashCode = (hashCode * 59) + this.KeySignature.GetHashCode();
                }
                if (this.RequestSignature != null)
                {
                    hashCode = (hashCode * 59) + this.RequestSignature.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
