/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// GetApplicationAttributesResponse
    /// </summary>
    [DataContract(Name = "GetApplicationAttributesResponse")]
    public partial class GetApplicationAttributesResponse : IEquatable<GetApplicationAttributesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetApplicationAttributesResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetApplicationAttributesResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetApplicationAttributesResponse" /> class.
        /// </summary>
        /// <param name="peerReview">If peer review is required. (required).</param>
        /// <param name="nrReviewers">Number of successfuls peer reviews required for a process to conclude successfully..</param>
        /// <param name="nrPhotos">Number of photos required in an application, for a peer-review process..</param>
        /// <param name="iso3166">If ISO 3166 country codes are required to be used..</param>
        /// <param name="required">required.</param>
        public GetApplicationAttributesResponse(bool peerReview = default(bool), int? nrReviewers = default(int?), int? nrPhotos = default(int?), bool? iso3166 = default(bool?), List<string> required = default(List<string>))
        {
            this.PeerReview = peerReview;
            this.NrReviewers = nrReviewers;
            this.NrPhotos = nrPhotos;
            this.Iso3166 = iso3166;
            this.Required = required;
        }

        /// <summary>
        /// If peer review is required.
        /// </summary>
        /// <value>If peer review is required.</value>
        [DataMember(Name = "peerReview", IsRequired = true, EmitDefaultValue = true)]
        public bool PeerReview { get; set; }

        /// <summary>
        /// Number of successfuls peer reviews required for a process to conclude successfully.
        /// </summary>
        /// <value>Number of successfuls peer reviews required for a process to conclude successfully.</value>
        [DataMember(Name = "nrReviewers", EmitDefaultValue = true)]
        public int? NrReviewers { get; set; }

        /// <summary>
        /// Number of photos required in an application, for a peer-review process.
        /// </summary>
        /// <value>Number of photos required in an application, for a peer-review process.</value>
        [DataMember(Name = "nrPhotos", EmitDefaultValue = true)]
        public int? NrPhotos { get; set; }

        /// <summary>
        /// If ISO 3166 country codes are required to be used.
        /// </summary>
        /// <value>If ISO 3166 country codes are required to be used.</value>
        [DataMember(Name = "iso3166", EmitDefaultValue = true)]
        public bool? Iso3166 { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name = "Required", EmitDefaultValue = false)]
        public List<string> Required { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetApplicationAttributesResponse {\n");
            sb.Append("  PeerReview: ").Append(PeerReview).Append("\n");
            sb.Append("  NrReviewers: ").Append(NrReviewers).Append("\n");
            sb.Append("  NrPhotos: ").Append(NrPhotos).Append("\n");
            sb.Append("  Iso3166: ").Append(Iso3166).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetApplicationAttributesResponse);
        }

        /// <summary>
        /// Returns true if GetApplicationAttributesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetApplicationAttributesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetApplicationAttributesResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PeerReview == input.PeerReview ||
                    this.PeerReview.Equals(input.PeerReview)
                ) && 
                (
                    this.NrReviewers == input.NrReviewers ||
                    (this.NrReviewers != null &&
                    this.NrReviewers.Equals(input.NrReviewers))
                ) && 
                (
                    this.NrPhotos == input.NrPhotos ||
                    (this.NrPhotos != null &&
                    this.NrPhotos.Equals(input.NrPhotos))
                ) && 
                (
                    this.Iso3166 == input.Iso3166 ||
                    (this.Iso3166 != null &&
                    this.Iso3166.Equals(input.Iso3166))
                ) && 
                (
                    this.Required == input.Required ||
                    this.Required != null &&
                    input.Required != null &&
                    this.Required.SequenceEqual(input.Required)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PeerReview.GetHashCode();
                if (this.NrReviewers != null)
                {
                    hashCode = (hashCode * 59) + this.NrReviewers.GetHashCode();
                }
                if (this.NrPhotos != null)
                {
                    hashCode = (hashCode * 59) + this.NrPhotos.GetHashCode();
                }
                if (this.Iso3166 != null)
                {
                    hashCode = (hashCode * 59) + this.Iso3166.GetHashCode();
                }
                if (this.Required != null)
                {
                    hashCode = (hashCode * 59) + this.Required.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
