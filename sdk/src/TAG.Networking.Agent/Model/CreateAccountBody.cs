/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// CreateAccountBody
    /// </summary>
    [DataContract(Name = "CreateAccountBody")]
    public partial class CreateAccountBody : IEquatable<CreateAccountBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAccountBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAccountBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAccountBody" /> class.
        /// </summary>
        /// <param name="userName">The user&#39;s name. (required).</param>
        /// <param name="eMail">The user&#39;s email address. (required).</param>
        /// <param name="password">The user&#39;s password. (required).</param>
        /// <param name="apiKey">The API key used for identification. (required).</param>
        /// <param name="nonce">A unique nonce for this request. (required).</param>
        /// <param name="signature">The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature.  (required).</param>
        /// <param name="seconds">The number of seconds until the request expires. (required).</param>
        public CreateAccountBody(string userName = default(string), string eMail = default(string), string password = default(string), string apiKey = default(string), string nonce = default(string), string signature = default(string), int seconds = default(int))
        {
            // to ensure "userName" is required (not null)
            if (userName == null)
            {
                throw new ArgumentNullException("userName is a required property for CreateAccountBody and cannot be null");
            }
            this.UserName = userName;
            // to ensure "eMail" is required (not null)
            if (eMail == null)
            {
                throw new ArgumentNullException("eMail is a required property for CreateAccountBody and cannot be null");
            }
            this.EMail = eMail;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for CreateAccountBody and cannot be null");
            }
            this.Password = password;
            // to ensure "apiKey" is required (not null)
            if (apiKey == null)
            {
                throw new ArgumentNullException("apiKey is a required property for CreateAccountBody and cannot be null");
            }
            this.ApiKey = apiKey;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for CreateAccountBody and cannot be null");
            }
            this.Nonce = nonce;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for CreateAccountBody and cannot be null");
            }
            this.Signature = signature;
            this.Seconds = seconds;
        }

        /// <summary>
        /// The user&#39;s name.
        /// </summary>
        /// <value>The user&#39;s name.</value>
        [DataMember(Name = "userName", IsRequired = true, EmitDefaultValue = true)]
        public string UserName { get; set; }

        /// <summary>
        /// The user&#39;s email address.
        /// </summary>
        /// <value>The user&#39;s email address.</value>
        [DataMember(Name = "eMail", IsRequired = true, EmitDefaultValue = true)]
        public string EMail { get; set; }

        /// <summary>
        /// The user&#39;s password.
        /// </summary>
        /// <value>The user&#39;s password.</value>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// The API key used for identification.
        /// </summary>
        /// <value>The API key used for identification.</value>
        [DataMember(Name = "apiKey", IsRequired = true, EmitDefaultValue = true)]
        public string ApiKey { get; set; }

        /// <summary>
        /// A unique nonce for this request.
        /// </summary>
        /// <value>A unique nonce for this request.</value>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public string Nonce { get; set; }

        /// <summary>
        /// The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature. 
        /// </summary>
        /// <value>The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature. </value>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public string Signature { get; set; }

        /// <summary>
        /// The number of seconds until the request expires.
        /// </summary>
        /// <value>The number of seconds until the request expires.</value>
        [DataMember(Name = "seconds", IsRequired = true, EmitDefaultValue = true)]
        public int Seconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAccountBody {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  EMail: ").Append(EMail).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAccountBody);
        }

        /// <summary>
        /// Returns true if CreateAccountBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAccountBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAccountBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.EMail == input.EMail ||
                    (this.EMail != null &&
                    this.EMail.Equals(input.EMail))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.Seconds == input.Seconds ||
                    this.Seconds.Equals(input.Seconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.EMail != null)
                {
                    hashCode = (hashCode * 59) + this.EMail.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.ApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.ApiKey.GetHashCode();
                }
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                if (this.Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Signature.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Seconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Seconds (int) maximum
            if (this.Seconds > (int)3600)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Seconds, must be a value less than or equal to 3600.", new [] { "Seconds" });
            }

            // Seconds (int) minimum
            if (this.Seconds < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Seconds, must be a value greater than or equal to 0.", new [] { "Seconds" });
            }

            yield break;
        }
    }

}
