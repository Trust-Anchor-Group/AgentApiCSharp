/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// The status object of the identity.
    /// </summary>
    [DataContract(Name = "IdentityJson_status")]
    public partial class IdentityJsonStatus : IEquatable<IdentityJsonStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityJsonStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdentityJsonStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityJsonStatus" /> class.
        /// </summary>
        /// <param name="name">The local name of the status. (required).</param>
        /// <param name="ns">The namespace of the status. (required).</param>
        /// <param name="created">When the status was created. (required).</param>
        /// <param name="from">from (required).</param>
        /// <param name="provider">The Bare JID of the provider. (required).</param>
        /// <param name="state">The state of the status. (required).</param>
        /// <param name="to">to (required).</param>
        /// <param name="updated">When the status was last updated. (required).</param>
        public IdentityJsonStatus(string name = default(string), string ns = default(string), DateTime created = default(DateTime), DateTime from = default(DateTime), string provider = default(string), string state = default(string), DateTime to = default(DateTime), DateTime updated = default(DateTime))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for IdentityJsonStatus and cannot be null");
            }
            this.Name = name;
            // to ensure "ns" is required (not null)
            if (ns == null)
            {
                throw new ArgumentNullException("ns is a required property for IdentityJsonStatus and cannot be null");
            }
            this.Ns = ns;
            this.Created = created;
            this.From = from;
            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new ArgumentNullException("provider is a required property for IdentityJsonStatus and cannot be null");
            }
            this.Provider = provider;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for IdentityJsonStatus and cannot be null");
            }
            this.State = state;
            this.To = to;
            this.Updated = updated;
        }

        /// <summary>
        /// The local name of the status.
        /// </summary>
        /// <value>The local name of the status.</value>
        [DataMember(Name = "__name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The namespace of the status.
        /// </summary>
        /// <value>The namespace of the status.</value>
        [DataMember(Name = "__ns", IsRequired = true, EmitDefaultValue = true)]
        public string Ns { get; set; }

        /// <summary>
        /// When the status was created.
        /// </summary>
        /// <value>When the status was created.</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public DateTime From { get; set; }

        /// <summary>
        /// The Bare JID of the provider.
        /// </summary>
        /// <value>The Bare JID of the provider.</value>
        [DataMember(Name = "provider", IsRequired = true, EmitDefaultValue = true)]
        public string Provider { get; set; }

        /// <summary>
        /// The state of the status.
        /// </summary>
        /// <value>The state of the status.</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public DateTime To { get; set; }

        /// <summary>
        /// When the status was last updated.
        /// </summary>
        /// <value>When the status was last updated.</value>
        [DataMember(Name = "updated", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Updated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentityJsonStatus {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ns: ").Append(Ns).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityJsonStatus);
        }

        /// <summary>
        /// Returns true if IdentityJsonStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityJsonStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityJsonStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Ns == input.Ns ||
                    (this.Ns != null &&
                    this.Ns.Equals(input.Ns))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Ns != null)
                {
                    hashCode = (hashCode * 59) + this.Ns.GetHashCode();
                }
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.Provider != null)
                {
                    hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.Updated != null)
                {
                    hashCode = (hashCode * 59) + this.Updated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
