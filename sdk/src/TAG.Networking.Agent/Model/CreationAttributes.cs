/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// CreationAttributes
    /// </summary>
    [DataContract(Name = "CreationAttributes")]
    public partial class CreationAttributes : IEquatable<CreationAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreationAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreationAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreationAttributes" /> class.
        /// </summary>
        /// <param name="currency">Currency of wallet. (required).</param>
        /// <param name="commision">Commision to charge. (required).</param>
        /// <param name="trustProvider">Trust provider to use. (required).</param>
        public CreationAttributes(string currency = default(string), double commision = default(double), string trustProvider = default(string))
        {
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for CreationAttributes and cannot be null");
            }
            this.Currency = currency;
            this.Commision = commision;
            // to ensure "trustProvider" is required (not null)
            if (trustProvider == null)
            {
                throw new ArgumentNullException("trustProvider is a required property for CreationAttributes and cannot be null");
            }
            this.TrustProvider = trustProvider;
        }

        /// <summary>
        /// Currency of wallet.
        /// </summary>
        /// <value>Currency of wallet.</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Commision to charge.
        /// </summary>
        /// <value>Commision to charge.</value>
        [DataMember(Name = "commision", IsRequired = true, EmitDefaultValue = true)]
        public double Commision { get; set; }

        /// <summary>
        /// Trust provider to use.
        /// </summary>
        /// <value>Trust provider to use.</value>
        [DataMember(Name = "trustProvider", IsRequired = true, EmitDefaultValue = true)]
        public string TrustProvider { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreationAttributes {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Commision: ").Append(Commision).Append("\n");
            sb.Append("  TrustProvider: ").Append(TrustProvider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreationAttributes);
        }

        /// <summary>
        /// Returns true if CreationAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of CreationAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreationAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Commision == input.Commision ||
                    this.Commision.Equals(input.Commision)
                ) && 
                (
                    this.TrustProvider == input.TrustProvider ||
                    (this.TrustProvider != null &&
                    this.TrustProvider.Equals(input.TrustProvider))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Commision.GetHashCode();
                if (this.TrustProvider != null)
                {
                    hashCode = (hashCode * 59) + this.TrustProvider.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
