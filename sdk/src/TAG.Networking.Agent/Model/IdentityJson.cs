/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TAG.Networking.Agent.Client.OpenAPIDateConverter;

namespace TAG.Networking.Agent.Model
{
    /// <summary>
    /// IdentityJson
    /// </summary>
    [DataContract(Name = "IdentityJson")]
    public partial class IdentityJson : IEquatable<IdentityJson>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityJson" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdentityJson() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityJson" /> class.
        /// </summary>
        /// <param name="name">The local name of the identity. (required).</param>
        /// <param name="ns">The namespace of the identity. (required).</param>
        /// <param name="id">The ID of the identity. (required).</param>
        /// <param name="xmlns">The XML namespace of the identity. (required).</param>
        /// <param name="clientPublicKey">clientPublicKey (required).</param>
        /// <param name="property">property (required).</param>
        /// <param name="clientSignature">clientSignature (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="serverSignature">serverSignature (required).</param>
        public IdentityJson(string name = default(string), string ns = default(string), string id = default(string), string xmlns = default(string), IdentityJsonClientPublicKey clientPublicKey = default(IdentityJsonClientPublicKey), List<IdentityJsonPropertyInner> property = default(List<IdentityJsonPropertyInner>), IdentityJsonClientSignature clientSignature = default(IdentityJsonClientSignature), IdentityJsonStatus status = default(IdentityJsonStatus), IdentityJsonServerSignature serverSignature = default(IdentityJsonServerSignature))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for IdentityJson and cannot be null");
            }
            this.Name = name;
            // to ensure "ns" is required (not null)
            if (ns == null)
            {
                throw new ArgumentNullException("ns is a required property for IdentityJson and cannot be null");
            }
            this.Ns = ns;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for IdentityJson and cannot be null");
            }
            this.Id = id;
            // to ensure "xmlns" is required (not null)
            if (xmlns == null)
            {
                throw new ArgumentNullException("xmlns is a required property for IdentityJson and cannot be null");
            }
            this.Xmlns = xmlns;
            // to ensure "clientPublicKey" is required (not null)
            if (clientPublicKey == null)
            {
                throw new ArgumentNullException("clientPublicKey is a required property for IdentityJson and cannot be null");
            }
            this.ClientPublicKey = clientPublicKey;
            // to ensure "property" is required (not null)
            if (property == null)
            {
                throw new ArgumentNullException("property is a required property for IdentityJson and cannot be null");
            }
            this.Property = property;
            // to ensure "clientSignature" is required (not null)
            if (clientSignature == null)
            {
                throw new ArgumentNullException("clientSignature is a required property for IdentityJson and cannot be null");
            }
            this.ClientSignature = clientSignature;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for IdentityJson and cannot be null");
            }
            this.Status = status;
            // to ensure "serverSignature" is required (not null)
            if (serverSignature == null)
            {
                throw new ArgumentNullException("serverSignature is a required property for IdentityJson and cannot be null");
            }
            this.ServerSignature = serverSignature;
        }

        /// <summary>
        /// The local name of the identity.
        /// </summary>
        /// <value>The local name of the identity.</value>
        [DataMember(Name = "__name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The namespace of the identity.
        /// </summary>
        /// <value>The namespace of the identity.</value>
        [DataMember(Name = "__ns", IsRequired = true, EmitDefaultValue = true)]
        public string Ns { get; set; }

        /// <summary>
        /// The ID of the identity.
        /// </summary>
        /// <value>The ID of the identity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The XML namespace of the identity.
        /// </summary>
        /// <value>The XML namespace of the identity.</value>
        [DataMember(Name = "xmlns", IsRequired = true, EmitDefaultValue = true)]
        public string Xmlns { get; set; }

        /// <summary>
        /// Gets or Sets ClientPublicKey
        /// </summary>
        [DataMember(Name = "clientPublicKey", IsRequired = true, EmitDefaultValue = true)]
        public IdentityJsonClientPublicKey ClientPublicKey { get; set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name = "property", IsRequired = true, EmitDefaultValue = true)]
        public List<IdentityJsonPropertyInner> Property { get; set; }

        /// <summary>
        /// Gets or Sets ClientSignature
        /// </summary>
        [DataMember(Name = "clientSignature", IsRequired = true, EmitDefaultValue = true)]
        public IdentityJsonClientSignature ClientSignature { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public IdentityJsonStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets ServerSignature
        /// </summary>
        [DataMember(Name = "serverSignature", IsRequired = true, EmitDefaultValue = true)]
        public IdentityJsonServerSignature ServerSignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentityJson {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ns: ").Append(Ns).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Xmlns: ").Append(Xmlns).Append("\n");
            sb.Append("  ClientPublicKey: ").Append(ClientPublicKey).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  ClientSignature: ").Append(ClientSignature).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ServerSignature: ").Append(ServerSignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityJson);
        }

        /// <summary>
        /// Returns true if IdentityJson instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityJson to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityJson input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Ns == input.Ns ||
                    (this.Ns != null &&
                    this.Ns.Equals(input.Ns))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Xmlns == input.Xmlns ||
                    (this.Xmlns != null &&
                    this.Xmlns.Equals(input.Xmlns))
                ) && 
                (
                    this.ClientPublicKey == input.ClientPublicKey ||
                    (this.ClientPublicKey != null &&
                    this.ClientPublicKey.Equals(input.ClientPublicKey))
                ) && 
                (
                    this.Property == input.Property ||
                    this.Property != null &&
                    input.Property != null &&
                    this.Property.SequenceEqual(input.Property)
                ) && 
                (
                    this.ClientSignature == input.ClientSignature ||
                    (this.ClientSignature != null &&
                    this.ClientSignature.Equals(input.ClientSignature))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ServerSignature == input.ServerSignature ||
                    (this.ServerSignature != null &&
                    this.ServerSignature.Equals(input.ServerSignature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Ns != null)
                {
                    hashCode = (hashCode * 59) + this.Ns.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Xmlns != null)
                {
                    hashCode = (hashCode * 59) + this.Xmlns.GetHashCode();
                }
                if (this.ClientPublicKey != null)
                {
                    hashCode = (hashCode * 59) + this.ClientPublicKey.GetHashCode();
                }
                if (this.Property != null)
                {
                    hashCode = (hashCode * 59) + this.Property.GetHashCode();
                }
                if (this.ClientSignature != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSignature.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.ServerSignature != null)
                {
                    hashCode = (hashCode * 59) + this.ServerSignature.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
