/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TAG.Networking.Agent.Client;
using TAG.Networking.Agent.Model;

namespace TAG.Networking.Agent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILegalApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add attachment to legal id application (NOT IMPLEMENTED)
        /// </summary>
        /// <remarks>
        /// Allows the client to add an attachment to a Legal Identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIdAttachmentBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentityResponse</returns>
        IdentityResponse AddIdAttachment(AddIdAttachmentBody addIdAttachmentBody = default(AddIdAttachmentBody), int operationIndex = 0);

        /// <summary>
        /// Add attachment to legal id application (NOT IMPLEMENTED)
        /// </summary>
        /// <remarks>
        /// Allows the client to add an attachment to a Legal Identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIdAttachmentBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentityResponse</returns>
        ApiResponse<IdentityResponse> AddIdAttachmentWithHttpInfo(AddIdAttachmentBody addIdAttachmentBody = default(AddIdAttachmentBody), int operationIndex = 0);
        /// <summary>
        /// Apply for a legal identity
        /// </summary>
        /// <remarks>
        /// Allows the client to apply for a new Legal Identity on the server. The application must be signed using one of the keys created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentityResponseJSON</returns>
        IdentityResponseJSON ApplyId(ApplyIdBody applyIdBody = default(ApplyIdBody), int operationIndex = 0);

        /// <summary>
        /// Apply for a legal identity
        /// </summary>
        /// <remarks>
        /// Allows the client to apply for a new Legal Identity on the server. The application must be signed using one of the keys created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentityResponseJSON</returns>
        ApiResponse<IdentityResponseJSON> ApplyIdWithHttpInfo(ApplyIdBody applyIdBody = default(ApplyIdBody), int operationIndex = 0);
        /// <summary>
        /// Authorize Access to Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Smart Contracts (or one of the Smart Contracts for which the client is part) to a remote party. When (if) the remote party requests access to the the Smart Contract, the broker will return it automatically, if already authorized. If not authorized, a petition to access the Smart Contract will be sent to the clients of the part of the contract for manual approval. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AuthorizeAccessToContract(AuthorizeAccessToContractBody authorizeAccessToContractBody = default(AuthorizeAccessToContractBody), int operationIndex = 0);

        /// <summary>
        /// Authorize Access to Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Smart Contracts (or one of the Smart Contracts for which the client is part) to a remote party. When (if) the remote party requests access to the the Smart Contract, the broker will return it automatically, if already authorized. If not authorized, a petition to access the Smart Contract will be sent to the clients of the part of the contract for manual approval. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AuthorizeAccessToContractWithHttpInfo(AuthorizeAccessToContractBody authorizeAccessToContractBody = default(AuthorizeAccessToContractBody), int operationIndex = 0);
        /// <summary>
        /// Authorize Access to ID
        /// </summary>
        /// <remarks>
        /// Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Legal Identities to a remote party. When (if) the remote party requests the ID, the broker will return it automatically, if already authorized. If not authorized, a petition to access the identity will be sent to the client for manual approval (or rejection).
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AuthorizeAccessToId(AuthorizeAccessToIdBody authorizeAccessToIdBody = default(AuthorizeAccessToIdBody), int operationIndex = 0);

        /// <summary>
        /// Authorize Access to ID
        /// </summary>
        /// <remarks>
        /// Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Legal Identities to a remote party. When (if) the remote party requests the ID, the broker will return it automatically, if already authorized. If not authorized, a petition to access the identity will be sent to the client for manual approval (or rejection).
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AuthorizeAccessToIdWithHttpInfo(AuthorizeAccessToIdBody authorizeAccessToIdBody = default(AuthorizeAccessToIdBody), int operationIndex = 0);
        /// <summary>
        /// Create Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to create a new smart contract, based on an existing (and approved) contract template. The request must be signed using one of the keys created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractResponse</returns>
        ContractResponse CreateContract(CreateContractBody createContractBody = default(CreateContractBody), int operationIndex = 0);

        /// <summary>
        /// Create Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to create a new smart contract, based on an existing (and approved) contract template. The request must be signed using one of the keys created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractResponse</returns>
        ApiResponse<ContractResponse> CreateContractWithHttpInfo(CreateContractBody createContractBody = default(CreateContractBody), int operationIndex = 0);
        /// <summary>
        /// Get Application Attributes
        /// </summary>
        /// <remarks>
        /// Allows the client to get the attributes of a legal identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetApplicationAttributesResponse</returns>
        GetApplicationAttributesResponse GetApplicationAttributes(Object body = default(Object), int operationIndex = 0);

        /// <summary>
        /// Get Application Attributes
        /// </summary>
        /// <remarks>
        /// Allows the client to get the attributes of a legal identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetApplicationAttributesResponse</returns>
        ApiResponse<GetApplicationAttributesResponse> GetApplicationAttributesWithHttpInfo(Object body = default(Object), int operationIndex = 0);
        /// <summary>
        /// Get Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to get a Smart Contract. If the Contract belongs to someone else, and the client is not authorized access to the Contract, an error will be returned.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractResponse</returns>
        ContractResponse GetContract(GetContractBody getContractBody = default(GetContractBody), int operationIndex = 0);

        /// <summary>
        /// Get Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to get a Smart Contract. If the Contract belongs to someone else, and the client is not authorized access to the Contract, an error will be returned.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractResponse</returns>
        ApiResponse<ContractResponse> GetContractWithHttpInfo(GetContractBody getContractBody = default(GetContractBody), int operationIndex = 0);
        /// <summary>
        /// Get Created Contracts
        /// </summary>
        /// <remarks>
        /// Allows the client to get a list of all Smart Contracts created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCreatedContractsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractsResponse</returns>
        ContractsResponse GetCreatedContracts(GetCreatedContractsBody getCreatedContractsBody = default(GetCreatedContractsBody), int operationIndex = 0);

        /// <summary>
        /// Get Created Contracts
        /// </summary>
        /// <remarks>
        /// Allows the client to get a list of all Smart Contracts created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCreatedContractsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractsResponse</returns>
        ApiResponse<ContractsResponse> GetCreatedContractsWithHttpInfo(GetCreatedContractsBody getCreatedContractsBody = default(GetCreatedContractsBody), int operationIndex = 0);
        /// <summary>
        /// Get Legal Identities
        /// </summary>
        /// <remarks>
        /// Allows the client to get a list of identities. If the identities belong to someone else, and the client is not authorized access to the identities, an error will be returned.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentitiesBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentitiesResponseJSON</returns>
        IdentitiesResponseJSON GetIdentities(GetIdentitiesBody getIdentitiesBody = default(GetIdentitiesBody), int operationIndex = 0);

        /// <summary>
        /// Get Legal Identities
        /// </summary>
        /// <remarks>
        /// Allows the client to get a list of identities. If the identities belong to someone else, and the client is not authorized access to the identities, an error will be returned.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentitiesBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentitiesResponseJSON</returns>
        ApiResponse<IdentitiesResponseJSON> GetIdentitiesWithHttpInfo(GetIdentitiesBody getIdentitiesBody = default(GetIdentitiesBody), int operationIndex = 0);
        /// <summary>
        /// Get Legal Identity
        /// </summary>
        /// <remarks>
        /// Allows the client to get an Identity. If the Identity belongs to someone else, and the client is not authorized access to the Identity, an error will be returned.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentityResponseJSON</returns>
        IdentityResponseJSON GetIdentity(GetIdentityBody getIdentityBody = default(GetIdentityBody), int operationIndex = 0);

        /// <summary>
        /// Get Legal Identity
        /// </summary>
        /// <remarks>
        /// Allows the client to get an Identity. If the Identity belongs to someone else, and the client is not authorized access to the Identity, an error will be returned.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentityResponseJSON</returns>
        ApiResponse<IdentityResponseJSON> GetIdentityWithHttpInfo(GetIdentityBody getIdentityBody = default(GetIdentityBody), int operationIndex = 0);
        /// <summary>
        /// Get Service Provider for ID Review
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve a list of available service providers that can be used to review a recent ID application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getServiceProvidersForIdReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvidersResponse</returns>
        ProvidersResponse GetServiceProviderForIdReview(GetServiceProvidersForIdReviewBody getServiceProvidersForIdReviewBody = default(GetServiceProvidersForIdReviewBody), int operationIndex = 0);

        /// <summary>
        /// Get Service Provider for ID Review
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve a list of available service providers that can be used to review a recent ID application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getServiceProvidersForIdReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvidersResponse</returns>
        ApiResponse<ProvidersResponse> GetServiceProviderForIdReviewWithHttpInfo(GetServiceProvidersForIdReviewBody getServiceProvidersForIdReviewBody = default(GetServiceProvidersForIdReviewBody), int operationIndex = 0);
        /// <summary>
        /// Petition ID
        /// </summary>
        /// <remarks>
        /// Allows the client to petition the owner of a Legal Identity, for information about the identity.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object PetitionId(PetitionIdBody petitionIdBody = default(PetitionIdBody), int operationIndex = 0);

        /// <summary>
        /// Petition ID
        /// </summary>
        /// <remarks>
        /// Allows the client to petition the owner of a Legal Identity, for information about the identity.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PetitionIdWithHttpInfo(PetitionIdBody petitionIdBody = default(PetitionIdBody), int operationIndex = 0);
        /// <summary>
        /// Petition Peer Review
        /// </summary>
        /// <remarks>
        /// Allows the client to petition a peer review service to review a recent identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionPeerReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object PetitionPeerReview(PetitionPeerReviewBody petitionPeerReviewBody = default(PetitionPeerReviewBody), int operationIndex = 0);

        /// <summary>
        /// Petition Peer Review
        /// </summary>
        /// <remarks>
        /// Allows the client to petition a peer review service to review a recent identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionPeerReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PetitionPeerReviewWithHttpInfo(PetitionPeerReviewBody petitionPeerReviewBody = default(PetitionPeerReviewBody), int operationIndex = 0);
        /// <summary>
        /// Petition Signature
        /// </summary>
        /// <remarks>
        /// Allows the client to petition the owner of a Legal Identity for a digital signature on some digital content.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionSignatureBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object PetitionSignature(PetitionSignatureBody petitionSignatureBody = default(PetitionSignatureBody), int operationIndex = 0);

        /// <summary>
        /// Petition Signature
        /// </summary>
        /// <remarks>
        /// Allows the client to petition the owner of a Legal Identity for a digital signature on some digital content.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionSignatureBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PetitionSignatureWithHttpInfo(PetitionSignatureBody petitionSignatureBody = default(PetitionSignatureBody), int operationIndex = 0);
        /// <summary>
        /// Ready for Approval
        /// </summary>
        /// <remarks>
        /// When an ID application is ready (all attachments have been signed and uploaded),  the client can call this resource to flag the application as ready for approval.   This will execute any automated onboarding procedures to analyze the application, and, if passing them, will take the identity to the approved state.  They can also take the application to the rejected state, in case they find the information invalid. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyForApprovalBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ReadyForApproval(ReadyForApprovalBody readyForApprovalBody = default(ReadyForApprovalBody), int operationIndex = 0);

        /// <summary>
        /// Ready for Approval
        /// </summary>
        /// <remarks>
        /// When an ID application is ready (all attachments have been signed and uploaded),  the client can call this resource to flag the application as ready for approval.   This will execute any automated onboarding procedures to analyze the application, and, if passing them, will take the identity to the approved state.  They can also take the application to the rejected state, in case they find the information invalid. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyForApprovalBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ReadyForApprovalWithHttpInfo(ReadyForApprovalBody readyForApprovalBody = default(ReadyForApprovalBody), int operationIndex = 0);
        /// <summary>
        /// Select Review Service
        /// </summary>
        /// <remarks>
        /// Allows the client to select an internal peer review service, for reviewing a recent identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectReviewServiceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SelectReviewService(SelectReviewServiceBody selectReviewServiceBody = default(SelectReviewServiceBody), int operationIndex = 0);

        /// <summary>
        /// Select Review Service
        /// </summary>
        /// <remarks>
        /// Allows the client to select an internal peer review service, for reviewing a recent identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectReviewServiceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SelectReviewServiceWithHttpInfo(SelectReviewServiceBody selectReviewServiceBody = default(SelectReviewServiceBody), int operationIndex = 0);
        /// <summary>
        /// Sign Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to sign a Smart Contract. The request must be signed using one of the keys created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractResponse</returns>
        ContractResponse SignContract(SignContractBody signContractBody = default(SignContractBody), int operationIndex = 0);

        /// <summary>
        /// Sign Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to sign a Smart Contract. The request must be signed using one of the keys created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractResponse</returns>
        ApiResponse<ContractResponse> SignContractWithHttpInfo(SignContractBody signContractBody = default(SignContractBody), int operationIndex = 0);
        /// <summary>
        /// Sign Data
        /// </summary>
        /// <remarks>
        /// Allows the client to sign binary data.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signDataBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SignatureResponse</returns>
        SignatureResponse SignData(SignDataBody signDataBody = default(SignDataBody), int operationIndex = 0);

        /// <summary>
        /// Sign Data
        /// </summary>
        /// <remarks>
        /// Allows the client to sign binary data.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signDataBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SignatureResponse</returns>
        ApiResponse<SignatureResponse> SignDataWithHttpInfo(SignDataBody signDataBody = default(SignDataBody), int operationIndex = 0);
        /// <summary>
        /// Validate Personal Number
        /// </summary>
        /// <remarks>
        /// Allows the client to validate a personal number before using it to apply for a Legal Identity.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePNrBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidatePNrResponse</returns>
        ValidatePNrResponse ValidatePNr(ValidatePNrBody validatePNrBody = default(ValidatePNrBody), int operationIndex = 0);

        /// <summary>
        /// Validate Personal Number
        /// </summary>
        /// <remarks>
        /// Allows the client to validate a personal number before using it to apply for a Legal Identity.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePNrBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidatePNrResponse</returns>
        ApiResponse<ValidatePNrResponse> ValidatePNrWithHttpInfo(ValidatePNrBody validatePNrBody = default(ValidatePNrBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILegalApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add attachment to legal id application (NOT IMPLEMENTED)
        /// </summary>
        /// <remarks>
        /// Allows the client to add an attachment to a Legal Identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIdAttachmentBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityResponse</returns>
        System.Threading.Tasks.Task<IdentityResponse> AddIdAttachmentAsync(AddIdAttachmentBody addIdAttachmentBody = default(AddIdAttachmentBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add attachment to legal id application (NOT IMPLEMENTED)
        /// </summary>
        /// <remarks>
        /// Allows the client to add an attachment to a Legal Identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIdAttachmentBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityResponse>> AddIdAttachmentWithHttpInfoAsync(AddIdAttachmentBody addIdAttachmentBody = default(AddIdAttachmentBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Apply for a legal identity
        /// </summary>
        /// <remarks>
        /// Allows the client to apply for a new Legal Identity on the server. The application must be signed using one of the keys created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityResponseJSON</returns>
        System.Threading.Tasks.Task<IdentityResponseJSON> ApplyIdAsync(ApplyIdBody applyIdBody = default(ApplyIdBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Apply for a legal identity
        /// </summary>
        /// <remarks>
        /// Allows the client to apply for a new Legal Identity on the server. The application must be signed using one of the keys created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityResponseJSON)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityResponseJSON>> ApplyIdWithHttpInfoAsync(ApplyIdBody applyIdBody = default(ApplyIdBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Authorize Access to Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Smart Contracts (or one of the Smart Contracts for which the client is part) to a remote party. When (if) the remote party requests access to the the Smart Contract, the broker will return it automatically, if already authorized. If not authorized, a petition to access the Smart Contract will be sent to the clients of the part of the contract for manual approval. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AuthorizeAccessToContractAsync(AuthorizeAccessToContractBody authorizeAccessToContractBody = default(AuthorizeAccessToContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authorize Access to Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Smart Contracts (or one of the Smart Contracts for which the client is part) to a remote party. When (if) the remote party requests access to the the Smart Contract, the broker will return it automatically, if already authorized. If not authorized, a petition to access the Smart Contract will be sent to the clients of the part of the contract for manual approval. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthorizeAccessToContractWithHttpInfoAsync(AuthorizeAccessToContractBody authorizeAccessToContractBody = default(AuthorizeAccessToContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Authorize Access to ID
        /// </summary>
        /// <remarks>
        /// Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Legal Identities to a remote party. When (if) the remote party requests the ID, the broker will return it automatically, if already authorized. If not authorized, a petition to access the identity will be sent to the client for manual approval (or rejection).
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AuthorizeAccessToIdAsync(AuthorizeAccessToIdBody authorizeAccessToIdBody = default(AuthorizeAccessToIdBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authorize Access to ID
        /// </summary>
        /// <remarks>
        /// Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Legal Identities to a remote party. When (if) the remote party requests the ID, the broker will return it automatically, if already authorized. If not authorized, a petition to access the identity will be sent to the client for manual approval (or rejection).
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthorizeAccessToIdWithHttpInfoAsync(AuthorizeAccessToIdBody authorizeAccessToIdBody = default(AuthorizeAccessToIdBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to create a new smart contract, based on an existing (and approved) contract template. The request must be signed using one of the keys created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractResponse</returns>
        System.Threading.Tasks.Task<ContractResponse> CreateContractAsync(CreateContractBody createContractBody = default(CreateContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to create a new smart contract, based on an existing (and approved) contract template. The request must be signed using one of the keys created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractResponse>> CreateContractWithHttpInfoAsync(CreateContractBody createContractBody = default(CreateContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Attributes
        /// </summary>
        /// <remarks>
        /// Allows the client to get the attributes of a legal identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicationAttributesResponse</returns>
        System.Threading.Tasks.Task<GetApplicationAttributesResponse> GetApplicationAttributesAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Attributes
        /// </summary>
        /// <remarks>
        /// Allows the client to get the attributes of a legal identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicationAttributesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApplicationAttributesResponse>> GetApplicationAttributesWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to get a Smart Contract. If the Contract belongs to someone else, and the client is not authorized access to the Contract, an error will be returned.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractResponse</returns>
        System.Threading.Tasks.Task<ContractResponse> GetContractAsync(GetContractBody getContractBody = default(GetContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to get a Smart Contract. If the Contract belongs to someone else, and the client is not authorized access to the Contract, an error will be returned.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractResponse>> GetContractWithHttpInfoAsync(GetContractBody getContractBody = default(GetContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Created Contracts
        /// </summary>
        /// <remarks>
        /// Allows the client to get a list of all Smart Contracts created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCreatedContractsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractsResponse</returns>
        System.Threading.Tasks.Task<ContractsResponse> GetCreatedContractsAsync(GetCreatedContractsBody getCreatedContractsBody = default(GetCreatedContractsBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Created Contracts
        /// </summary>
        /// <remarks>
        /// Allows the client to get a list of all Smart Contracts created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCreatedContractsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractsResponse>> GetCreatedContractsWithHttpInfoAsync(GetCreatedContractsBody getCreatedContractsBody = default(GetCreatedContractsBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Legal Identities
        /// </summary>
        /// <remarks>
        /// Allows the client to get a list of identities. If the identities belong to someone else, and the client is not authorized access to the identities, an error will be returned.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentitiesBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentitiesResponseJSON</returns>
        System.Threading.Tasks.Task<IdentitiesResponseJSON> GetIdentitiesAsync(GetIdentitiesBody getIdentitiesBody = default(GetIdentitiesBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Legal Identities
        /// </summary>
        /// <remarks>
        /// Allows the client to get a list of identities. If the identities belong to someone else, and the client is not authorized access to the identities, an error will be returned.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentitiesBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentitiesResponseJSON)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentitiesResponseJSON>> GetIdentitiesWithHttpInfoAsync(GetIdentitiesBody getIdentitiesBody = default(GetIdentitiesBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Legal Identity
        /// </summary>
        /// <remarks>
        /// Allows the client to get an Identity. If the Identity belongs to someone else, and the client is not authorized access to the Identity, an error will be returned.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityResponseJSON</returns>
        System.Threading.Tasks.Task<IdentityResponseJSON> GetIdentityAsync(GetIdentityBody getIdentityBody = default(GetIdentityBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Legal Identity
        /// </summary>
        /// <remarks>
        /// Allows the client to get an Identity. If the Identity belongs to someone else, and the client is not authorized access to the Identity, an error will be returned.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityResponseJSON)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityResponseJSON>> GetIdentityWithHttpInfoAsync(GetIdentityBody getIdentityBody = default(GetIdentityBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Service Provider for ID Review
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve a list of available service providers that can be used to review a recent ID application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getServiceProvidersForIdReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvidersResponse</returns>
        System.Threading.Tasks.Task<ProvidersResponse> GetServiceProviderForIdReviewAsync(GetServiceProvidersForIdReviewBody getServiceProvidersForIdReviewBody = default(GetServiceProvidersForIdReviewBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Service Provider for ID Review
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve a list of available service providers that can be used to review a recent ID application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getServiceProvidersForIdReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvidersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvidersResponse>> GetServiceProviderForIdReviewWithHttpInfoAsync(GetServiceProvidersForIdReviewBody getServiceProvidersForIdReviewBody = default(GetServiceProvidersForIdReviewBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Petition ID
        /// </summary>
        /// <remarks>
        /// Allows the client to petition the owner of a Legal Identity, for information about the identity.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PetitionIdAsync(PetitionIdBody petitionIdBody = default(PetitionIdBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Petition ID
        /// </summary>
        /// <remarks>
        /// Allows the client to petition the owner of a Legal Identity, for information about the identity.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PetitionIdWithHttpInfoAsync(PetitionIdBody petitionIdBody = default(PetitionIdBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Petition Peer Review
        /// </summary>
        /// <remarks>
        /// Allows the client to petition a peer review service to review a recent identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionPeerReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PetitionPeerReviewAsync(PetitionPeerReviewBody petitionPeerReviewBody = default(PetitionPeerReviewBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Petition Peer Review
        /// </summary>
        /// <remarks>
        /// Allows the client to petition a peer review service to review a recent identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionPeerReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PetitionPeerReviewWithHttpInfoAsync(PetitionPeerReviewBody petitionPeerReviewBody = default(PetitionPeerReviewBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Petition Signature
        /// </summary>
        /// <remarks>
        /// Allows the client to petition the owner of a Legal Identity for a digital signature on some digital content.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionSignatureBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PetitionSignatureAsync(PetitionSignatureBody petitionSignatureBody = default(PetitionSignatureBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Petition Signature
        /// </summary>
        /// <remarks>
        /// Allows the client to petition the owner of a Legal Identity for a digital signature on some digital content.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionSignatureBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PetitionSignatureWithHttpInfoAsync(PetitionSignatureBody petitionSignatureBody = default(PetitionSignatureBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ready for Approval
        /// </summary>
        /// <remarks>
        /// When an ID application is ready (all attachments have been signed and uploaded),  the client can call this resource to flag the application as ready for approval.   This will execute any automated onboarding procedures to analyze the application, and, if passing them, will take the identity to the approved state.  They can also take the application to the rejected state, in case they find the information invalid. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyForApprovalBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ReadyForApprovalAsync(ReadyForApprovalBody readyForApprovalBody = default(ReadyForApprovalBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ready for Approval
        /// </summary>
        /// <remarks>
        /// When an ID application is ready (all attachments have been signed and uploaded),  the client can call this resource to flag the application as ready for approval.   This will execute any automated onboarding procedures to analyze the application, and, if passing them, will take the identity to the approved state.  They can also take the application to the rejected state, in case they find the information invalid. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyForApprovalBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReadyForApprovalWithHttpInfoAsync(ReadyForApprovalBody readyForApprovalBody = default(ReadyForApprovalBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Select Review Service
        /// </summary>
        /// <remarks>
        /// Allows the client to select an internal peer review service, for reviewing a recent identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectReviewServiceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SelectReviewServiceAsync(SelectReviewServiceBody selectReviewServiceBody = default(SelectReviewServiceBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Select Review Service
        /// </summary>
        /// <remarks>
        /// Allows the client to select an internal peer review service, for reviewing a recent identity application.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectReviewServiceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SelectReviewServiceWithHttpInfoAsync(SelectReviewServiceBody selectReviewServiceBody = default(SelectReviewServiceBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sign Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to sign a Smart Contract. The request must be signed using one of the keys created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractResponse</returns>
        System.Threading.Tasks.Task<ContractResponse> SignContractAsync(SignContractBody signContractBody = default(SignContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sign Contract
        /// </summary>
        /// <remarks>
        /// Allows the client to sign a Smart Contract. The request must be signed using one of the keys created by the client.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractResponse>> SignContractWithHttpInfoAsync(SignContractBody signContractBody = default(SignContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sign Data
        /// </summary>
        /// <remarks>
        /// Allows the client to sign binary data.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signDataBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignatureResponse</returns>
        System.Threading.Tasks.Task<SignatureResponse> SignDataAsync(SignDataBody signDataBody = default(SignDataBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sign Data
        /// </summary>
        /// <remarks>
        /// Allows the client to sign binary data.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signDataBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignatureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignatureResponse>> SignDataWithHttpInfoAsync(SignDataBody signDataBody = default(SignDataBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate Personal Number
        /// </summary>
        /// <remarks>
        /// Allows the client to validate a personal number before using it to apply for a Legal Identity.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePNrBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidatePNrResponse</returns>
        System.Threading.Tasks.Task<ValidatePNrResponse> ValidatePNrAsync(ValidatePNrBody validatePNrBody = default(ValidatePNrBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate Personal Number
        /// </summary>
        /// <remarks>
        /// Allows the client to validate a personal number before using it to apply for a Legal Identity.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePNrBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidatePNrResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidatePNrResponse>> ValidatePNrWithHttpInfoAsync(ValidatePNrBody validatePNrBody = default(ValidatePNrBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILegalApi : ILegalApiSync, ILegalApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LegalApi : ILegalApi
    {
        private TAG.Networking.Agent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LegalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LegalApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LegalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LegalApi(string basePath)
        {
            this.Configuration = TAG.Networking.Agent.Client.Configuration.MergeConfigurations(
                TAG.Networking.Agent.Client.GlobalConfiguration.Instance,
                new TAG.Networking.Agent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TAG.Networking.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LegalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LegalApi(TAG.Networking.Agent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TAG.Networking.Agent.Client.Configuration.MergeConfigurations(
                TAG.Networking.Agent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TAG.Networking.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LegalApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LegalApi(TAG.Networking.Agent.Client.ISynchronousClient client, TAG.Networking.Agent.Client.IAsynchronousClient asyncClient, TAG.Networking.Agent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TAG.Networking.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TAG.Networking.Agent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TAG.Networking.Agent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TAG.Networking.Agent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TAG.Networking.Agent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add attachment to legal id application (NOT IMPLEMENTED) Allows the client to add an attachment to a Legal Identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIdAttachmentBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentityResponse</returns>
        public IdentityResponse AddIdAttachment(AddIdAttachmentBody addIdAttachmentBody = default(AddIdAttachmentBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<IdentityResponse> localVarResponse = AddIdAttachmentWithHttpInfo(addIdAttachmentBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add attachment to legal id application (NOT IMPLEMENTED) Allows the client to add an attachment to a Legal Identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIdAttachmentBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentityResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<IdentityResponse> AddIdAttachmentWithHttpInfo(AddIdAttachmentBody addIdAttachmentBody = default(AddIdAttachmentBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addIdAttachmentBody;

            localVarRequestOptions.Operation = "LegalApi.AddIdAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdentityResponse>("/Agent/Legal/AddIdAttachment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddIdAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add attachment to legal id application (NOT IMPLEMENTED) Allows the client to add an attachment to a Legal Identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIdAttachmentBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityResponse</returns>
        public async System.Threading.Tasks.Task<IdentityResponse> AddIdAttachmentAsync(AddIdAttachmentBody addIdAttachmentBody = default(AddIdAttachmentBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<IdentityResponse> localVarResponse = await AddIdAttachmentWithHttpInfoAsync(addIdAttachmentBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add attachment to legal id application (NOT IMPLEMENTED) Allows the client to add an attachment to a Legal Identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIdAttachmentBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<IdentityResponse>> AddIdAttachmentWithHttpInfoAsync(AddIdAttachmentBody addIdAttachmentBody = default(AddIdAttachmentBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addIdAttachmentBody;

            localVarRequestOptions.Operation = "LegalApi.AddIdAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdentityResponse>("/Agent/Legal/AddIdAttachment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddIdAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply for a legal identity Allows the client to apply for a new Legal Identity on the server. The application must be signed using one of the keys created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentityResponseJSON</returns>
        public IdentityResponseJSON ApplyId(ApplyIdBody applyIdBody = default(ApplyIdBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<IdentityResponseJSON> localVarResponse = ApplyIdWithHttpInfo(applyIdBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply for a legal identity Allows the client to apply for a new Legal Identity on the server. The application must be signed using one of the keys created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentityResponseJSON</returns>
        public TAG.Networking.Agent.Client.ApiResponse<IdentityResponseJSON> ApplyIdWithHttpInfo(ApplyIdBody applyIdBody = default(ApplyIdBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = applyIdBody;

            localVarRequestOptions.Operation = "LegalApi.ApplyId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdentityResponseJSON>("/Agent/Legal/ApplyId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply for a legal identity Allows the client to apply for a new Legal Identity on the server. The application must be signed using one of the keys created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityResponseJSON</returns>
        public async System.Threading.Tasks.Task<IdentityResponseJSON> ApplyIdAsync(ApplyIdBody applyIdBody = default(ApplyIdBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<IdentityResponseJSON> localVarResponse = await ApplyIdWithHttpInfoAsync(applyIdBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply for a legal identity Allows the client to apply for a new Legal Identity on the server. The application must be signed using one of the keys created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityResponseJSON)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<IdentityResponseJSON>> ApplyIdWithHttpInfoAsync(ApplyIdBody applyIdBody = default(ApplyIdBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = applyIdBody;

            localVarRequestOptions.Operation = "LegalApi.ApplyId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdentityResponseJSON>("/Agent/Legal/ApplyId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authorize Access to Contract Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Smart Contracts (or one of the Smart Contracts for which the client is part) to a remote party. When (if) the remote party requests access to the the Smart Contract, the broker will return it automatically, if already authorized. If not authorized, a petition to access the Smart Contract will be sent to the clients of the part of the contract for manual approval. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AuthorizeAccessToContract(AuthorizeAccessToContractBody authorizeAccessToContractBody = default(AuthorizeAccessToContractBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = AuthorizeAccessToContractWithHttpInfo(authorizeAccessToContractBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize Access to Contract Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Smart Contracts (or one of the Smart Contracts for which the client is part) to a remote party. When (if) the remote party requests access to the the Smart Contract, the broker will return it automatically, if already authorized. If not authorized, a petition to access the Smart Contract will be sent to the clients of the part of the contract for manual approval. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public TAG.Networking.Agent.Client.ApiResponse<Object> AuthorizeAccessToContractWithHttpInfo(AuthorizeAccessToContractBody authorizeAccessToContractBody = default(AuthorizeAccessToContractBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authorizeAccessToContractBody;

            localVarRequestOptions.Operation = "LegalApi.AuthorizeAccessToContract";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Agent/Legal/AuthorizeAccessToContract", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizeAccessToContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authorize Access to Contract Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Smart Contracts (or one of the Smart Contracts for which the client is part) to a remote party. When (if) the remote party requests access to the the Smart Contract, the broker will return it automatically, if already authorized. If not authorized, a petition to access the Smart Contract will be sent to the clients of the part of the contract for manual approval. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AuthorizeAccessToContractAsync(AuthorizeAccessToContractBody authorizeAccessToContractBody = default(AuthorizeAccessToContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = await AuthorizeAccessToContractWithHttpInfoAsync(authorizeAccessToContractBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize Access to Contract Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Smart Contracts (or one of the Smart Contracts for which the client is part) to a remote party. When (if) the remote party requests access to the the Smart Contract, the broker will return it automatically, if already authorized. If not authorized, a petition to access the Smart Contract will be sent to the clients of the part of the contract for manual approval. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<Object>> AuthorizeAccessToContractWithHttpInfoAsync(AuthorizeAccessToContractBody authorizeAccessToContractBody = default(AuthorizeAccessToContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authorizeAccessToContractBody;

            localVarRequestOptions.Operation = "LegalApi.AuthorizeAccessToContract";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Agent/Legal/AuthorizeAccessToContract", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizeAccessToContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authorize Access to ID Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Legal Identities to a remote party. When (if) the remote party requests the ID, the broker will return it automatically, if already authorized. If not authorized, a petition to access the identity will be sent to the client for manual approval (or rejection).
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AuthorizeAccessToId(AuthorizeAccessToIdBody authorizeAccessToIdBody = default(AuthorizeAccessToIdBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = AuthorizeAccessToIdWithHttpInfo(authorizeAccessToIdBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize Access to ID Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Legal Identities to a remote party. When (if) the remote party requests the ID, the broker will return it automatically, if already authorized. If not authorized, a petition to access the identity will be sent to the client for manual approval (or rejection).
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public TAG.Networking.Agent.Client.ApiResponse<Object> AuthorizeAccessToIdWithHttpInfo(AuthorizeAccessToIdBody authorizeAccessToIdBody = default(AuthorizeAccessToIdBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authorizeAccessToIdBody;

            localVarRequestOptions.Operation = "LegalApi.AuthorizeAccessToId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Agent/Legal/AuthorizeAccessToId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizeAccessToId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authorize Access to ID Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Legal Identities to a remote party. When (if) the remote party requests the ID, the broker will return it automatically, if already authorized. If not authorized, a petition to access the identity will be sent to the client for manual approval (or rejection).
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AuthorizeAccessToIdAsync(AuthorizeAccessToIdBody authorizeAccessToIdBody = default(AuthorizeAccessToIdBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = await AuthorizeAccessToIdWithHttpInfoAsync(authorizeAccessToIdBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize Access to ID Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Legal Identities to a remote party. When (if) the remote party requests the ID, the broker will return it automatically, if already authorized. If not authorized, a petition to access the identity will be sent to the client for manual approval (or rejection).
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeAccessToIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<Object>> AuthorizeAccessToIdWithHttpInfoAsync(AuthorizeAccessToIdBody authorizeAccessToIdBody = default(AuthorizeAccessToIdBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authorizeAccessToIdBody;

            localVarRequestOptions.Operation = "LegalApi.AuthorizeAccessToId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Agent/Legal/AuthorizeAccessToId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizeAccessToId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Contract Allows the client to create a new smart contract, based on an existing (and approved) contract template. The request must be signed using one of the keys created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractResponse</returns>
        public ContractResponse CreateContract(CreateContractBody createContractBody = default(CreateContractBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<ContractResponse> localVarResponse = CreateContractWithHttpInfo(createContractBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Contract Allows the client to create a new smart contract, based on an existing (and approved) contract template. The request must be signed using one of the keys created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<ContractResponse> CreateContractWithHttpInfo(CreateContractBody createContractBody = default(CreateContractBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createContractBody;

            localVarRequestOptions.Operation = "LegalApi.CreateContract";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ContractResponse>("/Agent/Legal/CreateContract", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Contract Allows the client to create a new smart contract, based on an existing (and approved) contract template. The request must be signed using one of the keys created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractResponse</returns>
        public async System.Threading.Tasks.Task<ContractResponse> CreateContractAsync(CreateContractBody createContractBody = default(CreateContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<ContractResponse> localVarResponse = await CreateContractWithHttpInfoAsync(createContractBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Contract Allows the client to create a new smart contract, based on an existing (and approved) contract template. The request must be signed using one of the keys created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<ContractResponse>> CreateContractWithHttpInfoAsync(CreateContractBody createContractBody = default(CreateContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createContractBody;

            localVarRequestOptions.Operation = "LegalApi.CreateContract";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContractResponse>("/Agent/Legal/CreateContract", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Attributes Allows the client to get the attributes of a legal identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetApplicationAttributesResponse</returns>
        public GetApplicationAttributesResponse GetApplicationAttributes(Object body = default(Object), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<GetApplicationAttributesResponse> localVarResponse = GetApplicationAttributesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Attributes Allows the client to get the attributes of a legal identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetApplicationAttributesResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<GetApplicationAttributesResponse> GetApplicationAttributesWithHttpInfo(Object body = default(Object), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LegalApi.GetApplicationAttributes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetApplicationAttributesResponse>("/Agent/Legal/GetApplicationAttributes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationAttributes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Attributes Allows the client to get the attributes of a legal identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicationAttributesResponse</returns>
        public async System.Threading.Tasks.Task<GetApplicationAttributesResponse> GetApplicationAttributesAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<GetApplicationAttributesResponse> localVarResponse = await GetApplicationAttributesWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Attributes Allows the client to get the attributes of a legal identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicationAttributesResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<GetApplicationAttributesResponse>> GetApplicationAttributesWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LegalApi.GetApplicationAttributes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetApplicationAttributesResponse>("/Agent/Legal/GetApplicationAttributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationAttributes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Contract Allows the client to get a Smart Contract. If the Contract belongs to someone else, and the client is not authorized access to the Contract, an error will be returned.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractResponse</returns>
        public ContractResponse GetContract(GetContractBody getContractBody = default(GetContractBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<ContractResponse> localVarResponse = GetContractWithHttpInfo(getContractBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Contract Allows the client to get a Smart Contract. If the Contract belongs to someone else, and the client is not authorized access to the Contract, an error will be returned.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<ContractResponse> GetContractWithHttpInfo(GetContractBody getContractBody = default(GetContractBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getContractBody;

            localVarRequestOptions.Operation = "LegalApi.GetContract";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ContractResponse>("/Agent/Legal/GetContract", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Contract Allows the client to get a Smart Contract. If the Contract belongs to someone else, and the client is not authorized access to the Contract, an error will be returned.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractResponse</returns>
        public async System.Threading.Tasks.Task<ContractResponse> GetContractAsync(GetContractBody getContractBody = default(GetContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<ContractResponse> localVarResponse = await GetContractWithHttpInfoAsync(getContractBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Contract Allows the client to get a Smart Contract. If the Contract belongs to someone else, and the client is not authorized access to the Contract, an error will be returned.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<ContractResponse>> GetContractWithHttpInfoAsync(GetContractBody getContractBody = default(GetContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getContractBody;

            localVarRequestOptions.Operation = "LegalApi.GetContract";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContractResponse>("/Agent/Legal/GetContract", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Created Contracts Allows the client to get a list of all Smart Contracts created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCreatedContractsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractsResponse</returns>
        public ContractsResponse GetCreatedContracts(GetCreatedContractsBody getCreatedContractsBody = default(GetCreatedContractsBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<ContractsResponse> localVarResponse = GetCreatedContractsWithHttpInfo(getCreatedContractsBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Created Contracts Allows the client to get a list of all Smart Contracts created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCreatedContractsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractsResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<ContractsResponse> GetCreatedContractsWithHttpInfo(GetCreatedContractsBody getCreatedContractsBody = default(GetCreatedContractsBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCreatedContractsBody;

            localVarRequestOptions.Operation = "LegalApi.GetCreatedContracts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ContractsResponse>("/Agent/Legal/GetCreatedContracts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreatedContracts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Created Contracts Allows the client to get a list of all Smart Contracts created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCreatedContractsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractsResponse</returns>
        public async System.Threading.Tasks.Task<ContractsResponse> GetCreatedContractsAsync(GetCreatedContractsBody getCreatedContractsBody = default(GetCreatedContractsBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<ContractsResponse> localVarResponse = await GetCreatedContractsWithHttpInfoAsync(getCreatedContractsBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Created Contracts Allows the client to get a list of all Smart Contracts created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCreatedContractsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractsResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<ContractsResponse>> GetCreatedContractsWithHttpInfoAsync(GetCreatedContractsBody getCreatedContractsBody = default(GetCreatedContractsBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCreatedContractsBody;

            localVarRequestOptions.Operation = "LegalApi.GetCreatedContracts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContractsResponse>("/Agent/Legal/GetCreatedContracts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreatedContracts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Legal Identities Allows the client to get a list of identities. If the identities belong to someone else, and the client is not authorized access to the identities, an error will be returned.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentitiesBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentitiesResponseJSON</returns>
        public IdentitiesResponseJSON GetIdentities(GetIdentitiesBody getIdentitiesBody = default(GetIdentitiesBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<IdentitiesResponseJSON> localVarResponse = GetIdentitiesWithHttpInfo(getIdentitiesBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Legal Identities Allows the client to get a list of identities. If the identities belong to someone else, and the client is not authorized access to the identities, an error will be returned.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentitiesBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentitiesResponseJSON</returns>
        public TAG.Networking.Agent.Client.ApiResponse<IdentitiesResponseJSON> GetIdentitiesWithHttpInfo(GetIdentitiesBody getIdentitiesBody = default(GetIdentitiesBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getIdentitiesBody;

            localVarRequestOptions.Operation = "LegalApi.GetIdentities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdentitiesResponseJSON>("/Agent/Legal/GetIdentities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Legal Identities Allows the client to get a list of identities. If the identities belong to someone else, and the client is not authorized access to the identities, an error will be returned.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentitiesBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentitiesResponseJSON</returns>
        public async System.Threading.Tasks.Task<IdentitiesResponseJSON> GetIdentitiesAsync(GetIdentitiesBody getIdentitiesBody = default(GetIdentitiesBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<IdentitiesResponseJSON> localVarResponse = await GetIdentitiesWithHttpInfoAsync(getIdentitiesBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Legal Identities Allows the client to get a list of identities. If the identities belong to someone else, and the client is not authorized access to the identities, an error will be returned.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentitiesBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentitiesResponseJSON)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<IdentitiesResponseJSON>> GetIdentitiesWithHttpInfoAsync(GetIdentitiesBody getIdentitiesBody = default(GetIdentitiesBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getIdentitiesBody;

            localVarRequestOptions.Operation = "LegalApi.GetIdentities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdentitiesResponseJSON>("/Agent/Legal/GetIdentities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Legal Identity Allows the client to get an Identity. If the Identity belongs to someone else, and the client is not authorized access to the Identity, an error will be returned.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentityResponseJSON</returns>
        public IdentityResponseJSON GetIdentity(GetIdentityBody getIdentityBody = default(GetIdentityBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<IdentityResponseJSON> localVarResponse = GetIdentityWithHttpInfo(getIdentityBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Legal Identity Allows the client to get an Identity. If the Identity belongs to someone else, and the client is not authorized access to the Identity, an error will be returned.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentityResponseJSON</returns>
        public TAG.Networking.Agent.Client.ApiResponse<IdentityResponseJSON> GetIdentityWithHttpInfo(GetIdentityBody getIdentityBody = default(GetIdentityBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getIdentityBody;

            localVarRequestOptions.Operation = "LegalApi.GetIdentity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdentityResponseJSON>("/Agent/Legal/GetIdentity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Legal Identity Allows the client to get an Identity. If the Identity belongs to someone else, and the client is not authorized access to the Identity, an error will be returned.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityResponseJSON</returns>
        public async System.Threading.Tasks.Task<IdentityResponseJSON> GetIdentityAsync(GetIdentityBody getIdentityBody = default(GetIdentityBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<IdentityResponseJSON> localVarResponse = await GetIdentityWithHttpInfoAsync(getIdentityBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Legal Identity Allows the client to get an Identity. If the Identity belongs to someone else, and the client is not authorized access to the Identity, an error will be returned.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityResponseJSON)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<IdentityResponseJSON>> GetIdentityWithHttpInfoAsync(GetIdentityBody getIdentityBody = default(GetIdentityBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getIdentityBody;

            localVarRequestOptions.Operation = "LegalApi.GetIdentity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdentityResponseJSON>("/Agent/Legal/GetIdentity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Provider for ID Review Allows the client to retrieve a list of available service providers that can be used to review a recent ID application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getServiceProvidersForIdReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvidersResponse</returns>
        public ProvidersResponse GetServiceProviderForIdReview(GetServiceProvidersForIdReviewBody getServiceProvidersForIdReviewBody = default(GetServiceProvidersForIdReviewBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<ProvidersResponse> localVarResponse = GetServiceProviderForIdReviewWithHttpInfo(getServiceProvidersForIdReviewBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Provider for ID Review Allows the client to retrieve a list of available service providers that can be used to review a recent ID application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getServiceProvidersForIdReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvidersResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<ProvidersResponse> GetServiceProviderForIdReviewWithHttpInfo(GetServiceProvidersForIdReviewBody getServiceProvidersForIdReviewBody = default(GetServiceProvidersForIdReviewBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getServiceProvidersForIdReviewBody;

            localVarRequestOptions.Operation = "LegalApi.GetServiceProviderForIdReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProvidersResponse>("/Agent/Legal/GetServiceProviderForIdReview", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceProviderForIdReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Provider for ID Review Allows the client to retrieve a list of available service providers that can be used to review a recent ID application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getServiceProvidersForIdReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvidersResponse</returns>
        public async System.Threading.Tasks.Task<ProvidersResponse> GetServiceProviderForIdReviewAsync(GetServiceProvidersForIdReviewBody getServiceProvidersForIdReviewBody = default(GetServiceProvidersForIdReviewBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<ProvidersResponse> localVarResponse = await GetServiceProviderForIdReviewWithHttpInfoAsync(getServiceProvidersForIdReviewBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Provider for ID Review Allows the client to retrieve a list of available service providers that can be used to review a recent ID application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getServiceProvidersForIdReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvidersResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<ProvidersResponse>> GetServiceProviderForIdReviewWithHttpInfoAsync(GetServiceProvidersForIdReviewBody getServiceProvidersForIdReviewBody = default(GetServiceProvidersForIdReviewBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getServiceProvidersForIdReviewBody;

            localVarRequestOptions.Operation = "LegalApi.GetServiceProviderForIdReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProvidersResponse>("/Agent/Legal/GetServiceProviderForIdReview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceProviderForIdReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Petition ID Allows the client to petition the owner of a Legal Identity, for information about the identity.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object PetitionId(PetitionIdBody petitionIdBody = default(PetitionIdBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = PetitionIdWithHttpInfo(petitionIdBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Petition ID Allows the client to petition the owner of a Legal Identity, for information about the identity.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public TAG.Networking.Agent.Client.ApiResponse<Object> PetitionIdWithHttpInfo(PetitionIdBody petitionIdBody = default(PetitionIdBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = petitionIdBody;

            localVarRequestOptions.Operation = "LegalApi.PetitionId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Agent/Legal/PetitionId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PetitionId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Petition ID Allows the client to petition the owner of a Legal Identity, for information about the identity.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PetitionIdAsync(PetitionIdBody petitionIdBody = default(PetitionIdBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = await PetitionIdWithHttpInfoAsync(petitionIdBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Petition ID Allows the client to petition the owner of a Legal Identity, for information about the identity.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionIdBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<Object>> PetitionIdWithHttpInfoAsync(PetitionIdBody petitionIdBody = default(PetitionIdBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = petitionIdBody;

            localVarRequestOptions.Operation = "LegalApi.PetitionId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Agent/Legal/PetitionId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PetitionId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Petition Peer Review Allows the client to petition a peer review service to review a recent identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionPeerReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object PetitionPeerReview(PetitionPeerReviewBody petitionPeerReviewBody = default(PetitionPeerReviewBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = PetitionPeerReviewWithHttpInfo(petitionPeerReviewBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Petition Peer Review Allows the client to petition a peer review service to review a recent identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionPeerReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public TAG.Networking.Agent.Client.ApiResponse<Object> PetitionPeerReviewWithHttpInfo(PetitionPeerReviewBody petitionPeerReviewBody = default(PetitionPeerReviewBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = petitionPeerReviewBody;

            localVarRequestOptions.Operation = "LegalApi.PetitionPeerReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Agent/Legal/PetitionPeerReview", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PetitionPeerReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Petition Peer Review Allows the client to petition a peer review service to review a recent identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionPeerReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PetitionPeerReviewAsync(PetitionPeerReviewBody petitionPeerReviewBody = default(PetitionPeerReviewBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = await PetitionPeerReviewWithHttpInfoAsync(petitionPeerReviewBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Petition Peer Review Allows the client to petition a peer review service to review a recent identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionPeerReviewBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<Object>> PetitionPeerReviewWithHttpInfoAsync(PetitionPeerReviewBody petitionPeerReviewBody = default(PetitionPeerReviewBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = petitionPeerReviewBody;

            localVarRequestOptions.Operation = "LegalApi.PetitionPeerReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Agent/Legal/PetitionPeerReview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PetitionPeerReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Petition Signature Allows the client to petition the owner of a Legal Identity for a digital signature on some digital content.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionSignatureBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object PetitionSignature(PetitionSignatureBody petitionSignatureBody = default(PetitionSignatureBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = PetitionSignatureWithHttpInfo(petitionSignatureBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Petition Signature Allows the client to petition the owner of a Legal Identity for a digital signature on some digital content.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionSignatureBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public TAG.Networking.Agent.Client.ApiResponse<Object> PetitionSignatureWithHttpInfo(PetitionSignatureBody petitionSignatureBody = default(PetitionSignatureBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = petitionSignatureBody;

            localVarRequestOptions.Operation = "LegalApi.PetitionSignature";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Agent/Legal/PetitionSignature", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PetitionSignature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Petition Signature Allows the client to petition the owner of a Legal Identity for a digital signature on some digital content.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionSignatureBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PetitionSignatureAsync(PetitionSignatureBody petitionSignatureBody = default(PetitionSignatureBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = await PetitionSignatureWithHttpInfoAsync(petitionSignatureBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Petition Signature Allows the client to petition the owner of a Legal Identity for a digital signature on some digital content.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="petitionSignatureBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<Object>> PetitionSignatureWithHttpInfoAsync(PetitionSignatureBody petitionSignatureBody = default(PetitionSignatureBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = petitionSignatureBody;

            localVarRequestOptions.Operation = "LegalApi.PetitionSignature";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Agent/Legal/PetitionSignature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PetitionSignature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ready for Approval When an ID application is ready (all attachments have been signed and uploaded),  the client can call this resource to flag the application as ready for approval.   This will execute any automated onboarding procedures to analyze the application, and, if passing them, will take the identity to the approved state.  They can also take the application to the rejected state, in case they find the information invalid. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyForApprovalBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ReadyForApproval(ReadyForApprovalBody readyForApprovalBody = default(ReadyForApprovalBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = ReadyForApprovalWithHttpInfo(readyForApprovalBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ready for Approval When an ID application is ready (all attachments have been signed and uploaded),  the client can call this resource to flag the application as ready for approval.   This will execute any automated onboarding procedures to analyze the application, and, if passing them, will take the identity to the approved state.  They can also take the application to the rejected state, in case they find the information invalid. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyForApprovalBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public TAG.Networking.Agent.Client.ApiResponse<Object> ReadyForApprovalWithHttpInfo(ReadyForApprovalBody readyForApprovalBody = default(ReadyForApprovalBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = readyForApprovalBody;

            localVarRequestOptions.Operation = "LegalApi.ReadyForApproval";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Agent/Legal/ReadyForApproval", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadyForApproval", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ready for Approval When an ID application is ready (all attachments have been signed and uploaded),  the client can call this resource to flag the application as ready for approval.   This will execute any automated onboarding procedures to analyze the application, and, if passing them, will take the identity to the approved state.  They can also take the application to the rejected state, in case they find the information invalid. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyForApprovalBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ReadyForApprovalAsync(ReadyForApprovalBody readyForApprovalBody = default(ReadyForApprovalBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = await ReadyForApprovalWithHttpInfoAsync(readyForApprovalBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ready for Approval When an ID application is ready (all attachments have been signed and uploaded),  the client can call this resource to flag the application as ready for approval.   This will execute any automated onboarding procedures to analyze the application, and, if passing them, will take the identity to the approved state.  They can also take the application to the rejected state, in case they find the information invalid. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyForApprovalBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<Object>> ReadyForApprovalWithHttpInfoAsync(ReadyForApprovalBody readyForApprovalBody = default(ReadyForApprovalBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = readyForApprovalBody;

            localVarRequestOptions.Operation = "LegalApi.ReadyForApproval";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Agent/Legal/ReadyForApproval", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadyForApproval", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Select Review Service Allows the client to select an internal peer review service, for reviewing a recent identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectReviewServiceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SelectReviewService(SelectReviewServiceBody selectReviewServiceBody = default(SelectReviewServiceBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = SelectReviewServiceWithHttpInfo(selectReviewServiceBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Select Review Service Allows the client to select an internal peer review service, for reviewing a recent identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectReviewServiceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public TAG.Networking.Agent.Client.ApiResponse<Object> SelectReviewServiceWithHttpInfo(SelectReviewServiceBody selectReviewServiceBody = default(SelectReviewServiceBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = selectReviewServiceBody;

            localVarRequestOptions.Operation = "LegalApi.SelectReviewService";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Agent/Legal/SelectReviewService", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SelectReviewService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Select Review Service Allows the client to select an internal peer review service, for reviewing a recent identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectReviewServiceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SelectReviewServiceAsync(SelectReviewServiceBody selectReviewServiceBody = default(SelectReviewServiceBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<Object> localVarResponse = await SelectReviewServiceWithHttpInfoAsync(selectReviewServiceBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Select Review Service Allows the client to select an internal peer review service, for reviewing a recent identity application.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectReviewServiceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<Object>> SelectReviewServiceWithHttpInfoAsync(SelectReviewServiceBody selectReviewServiceBody = default(SelectReviewServiceBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = selectReviewServiceBody;

            localVarRequestOptions.Operation = "LegalApi.SelectReviewService";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Agent/Legal/SelectReviewService", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SelectReviewService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign Contract Allows the client to sign a Smart Contract. The request must be signed using one of the keys created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractResponse</returns>
        public ContractResponse SignContract(SignContractBody signContractBody = default(SignContractBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<ContractResponse> localVarResponse = SignContractWithHttpInfo(signContractBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign Contract Allows the client to sign a Smart Contract. The request must be signed using one of the keys created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<ContractResponse> SignContractWithHttpInfo(SignContractBody signContractBody = default(SignContractBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = signContractBody;

            localVarRequestOptions.Operation = "LegalApi.SignContract";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ContractResponse>("/Agent/Legal/SignContract", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign Contract Allows the client to sign a Smart Contract. The request must be signed using one of the keys created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractResponse</returns>
        public async System.Threading.Tasks.Task<ContractResponse> SignContractAsync(SignContractBody signContractBody = default(SignContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<ContractResponse> localVarResponse = await SignContractWithHttpInfoAsync(signContractBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign Contract Allows the client to sign a Smart Contract. The request must be signed using one of the keys created by the client.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signContractBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<ContractResponse>> SignContractWithHttpInfoAsync(SignContractBody signContractBody = default(SignContractBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = signContractBody;

            localVarRequestOptions.Operation = "LegalApi.SignContract";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContractResponse>("/Agent/Legal/SignContract", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign Data Allows the client to sign binary data.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signDataBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SignatureResponse</returns>
        public SignatureResponse SignData(SignDataBody signDataBody = default(SignDataBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<SignatureResponse> localVarResponse = SignDataWithHttpInfo(signDataBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign Data Allows the client to sign binary data.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signDataBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SignatureResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<SignatureResponse> SignDataWithHttpInfo(SignDataBody signDataBody = default(SignDataBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = signDataBody;

            localVarRequestOptions.Operation = "LegalApi.SignData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SignatureResponse>("/Agent/Legal/SignData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign Data Allows the client to sign binary data.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signDataBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignatureResponse</returns>
        public async System.Threading.Tasks.Task<SignatureResponse> SignDataAsync(SignDataBody signDataBody = default(SignDataBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<SignatureResponse> localVarResponse = await SignDataWithHttpInfoAsync(signDataBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign Data Allows the client to sign binary data.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signDataBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignatureResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<SignatureResponse>> SignDataWithHttpInfoAsync(SignDataBody signDataBody = default(SignDataBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = signDataBody;

            localVarRequestOptions.Operation = "LegalApi.SignData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SignatureResponse>("/Agent/Legal/SignData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Personal Number Allows the client to validate a personal number before using it to apply for a Legal Identity.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePNrBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidatePNrResponse</returns>
        public ValidatePNrResponse ValidatePNr(ValidatePNrBody validatePNrBody = default(ValidatePNrBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<ValidatePNrResponse> localVarResponse = ValidatePNrWithHttpInfo(validatePNrBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Personal Number Allows the client to validate a personal number before using it to apply for a Legal Identity.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePNrBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidatePNrResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<ValidatePNrResponse> ValidatePNrWithHttpInfo(ValidatePNrBody validatePNrBody = default(ValidatePNrBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = validatePNrBody;

            localVarRequestOptions.Operation = "LegalApi.ValidatePNr";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ValidatePNrResponse>("/Agent/Legal/ValidatePNr", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidatePNr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Personal Number Allows the client to validate a personal number before using it to apply for a Legal Identity.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePNrBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidatePNrResponse</returns>
        public async System.Threading.Tasks.Task<ValidatePNrResponse> ValidatePNrAsync(ValidatePNrBody validatePNrBody = default(ValidatePNrBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<ValidatePNrResponse> localVarResponse = await ValidatePNrWithHttpInfoAsync(validatePNrBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Personal Number Allows the client to validate a personal number before using it to apply for a Legal Identity.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePNrBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidatePNrResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<ValidatePNrResponse>> ValidatePNrWithHttpInfoAsync(ValidatePNrBody validatePNrBody = default(ValidatePNrBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = validatePNrBody;

            localVarRequestOptions.Operation = "LegalApi.ValidatePNr";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ValidatePNrResponse>("/Agent/Legal/ValidatePNr", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidatePNr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
