/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TAG.Networking.Agent.Client;
using TAG.Networking.Agent.Model;

namespace TAG.Networking.Agent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Balance
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve information about the current state of its wallet.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBalanceResponse</returns>
        GetBalanceResponse GetBalance(Object body = default(Object), int operationIndex = 0);

        /// <summary>
        /// Get Balance
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve information about the current state of its wallet.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBalanceResponse</returns>
        ApiResponse<GetBalanceResponse> GetBalanceWithHttpInfo(Object body = default(Object), int operationIndex = 0);
        /// <summary>
        /// Get Payment Options for Buying eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of getting payment options for buying eDaler. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForBuyingEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInformation</returns>
        TransactionInformation GetPaymentOptionsForBuyingEDaler(GetPaymentOptionsForBuyingEDalerBody getPaymentOptionsForBuyingEDalerBody = default(GetPaymentOptionsForBuyingEDalerBody), int operationIndex = 0);

        /// <summary>
        /// Get Payment Options for Buying eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of getting payment options for buying eDaler. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForBuyingEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInformation</returns>
        ApiResponse<TransactionInformation> GetPaymentOptionsForBuyingEDalerWithHttpInfo(GetPaymentOptionsForBuyingEDalerBody getPaymentOptionsForBuyingEDalerBody = default(GetPaymentOptionsForBuyingEDalerBody), int operationIndex = 0);
        /// <summary>
        /// Get Payment Options for Selling eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of getting payment options for selling eDaler. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForSellingEDalerBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInformation</returns>
        TransactionInformation GetPaymentOptionsForSellingEDaler(GetPaymentOptionsForSellingEDalerBody getPaymentOptionsForSellingEDalerBody, int operationIndex = 0);

        /// <summary>
        /// Get Payment Options for Selling eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of getting payment options for selling eDaler. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForSellingEDalerBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInformation</returns>
        ApiResponse<TransactionInformation> GetPaymentOptionsForSellingEDalerWithHttpInfo(GetPaymentOptionsForSellingEDalerBody getPaymentOptionsForSellingEDalerBody, int operationIndex = 0);
        /// <summary>
        /// Get Service Providers for Buying eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve a list of available service providers that can be used to buy eDaler.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvidersResponse</returns>
        ProvidersResponse GetServiceProvidersForBuyingEDaler(Object body = default(Object), int operationIndex = 0);

        /// <summary>
        /// Get Service Providers for Buying eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve a list of available service providers that can be used to buy eDaler.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvidersResponse</returns>
        ApiResponse<ProvidersResponse> GetServiceProvidersForBuyingEDalerWithHttpInfo(Object body = default(Object), int operationIndex = 0);
        /// <summary>
        /// Get Service Providers for Selling eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve a list of available service providers that can be used to sell eDaler.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvidersResponse</returns>
        ProvidersResponse GetServiceProvidersForSellingEDaler(Object body = default(Object), int operationIndex = 0);

        /// <summary>
        /// Get Service Providers for Selling eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve a list of available service providers that can be used to sell eDaler.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvidersResponse</returns>
        ApiResponse<ProvidersResponse> GetServiceProvidersForSellingEDalerWithHttpInfo(Object body = default(Object), int operationIndex = 0);
        /// <summary>
        /// Get Transaction Information
        /// </summary>
        /// <remarks>
        /// Allows the client to get updated transaction information from the server. It also allows the client to re-register the current Tab ID (from Events.js) and function to call, in case changes are registered with the server-side transaction object. Call this function to restart event notification if you navigate between pages. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransactionInformationBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInformation</returns>
        TransactionInformation GetTransactionInformation(GetTransactionInformationBody getTransactionInformationBody = default(GetTransactionInformationBody), int operationIndex = 0);

        /// <summary>
        /// Get Transaction Information
        /// </summary>
        /// <remarks>
        /// Allows the client to get updated transaction information from the server. It also allows the client to re-register the current Tab ID (from Events.js) and function to call, in case changes are registered with the server-side transaction object. Call this function to restart event notification if you navigate between pages. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransactionInformationBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInformation</returns>
        ApiResponse<TransactionInformation> GetTransactionInformationWithHttpInfo(GetTransactionInformationBody getTransactionInformationBody = default(GetTransactionInformationBody), int operationIndex = 0);
        /// <summary>
        /// Initiate Buy eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of buying eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateBuyEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInformation</returns>
        TransactionInformation InitiateBuyEDaler(InitiateBuyEDalerBody initiateBuyEDalerBody = default(InitiateBuyEDalerBody), int operationIndex = 0);

        /// <summary>
        /// Initiate Buy eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of buying eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateBuyEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInformation</returns>
        ApiResponse<TransactionInformation> InitiateBuyEDalerWithHttpInfo(InitiateBuyEDalerBody initiateBuyEDalerBody = default(InitiateBuyEDalerBody), int operationIndex = 0);
        /// <summary>
        /// Initiate Sell eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of selling eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateSellEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInformation</returns>
        TransactionInformation InitiateSellEDaler(InitiateSellEDalerBody initiateSellEDalerBody = default(InitiateSellEDalerBody), int operationIndex = 0);

        /// <summary>
        /// Initiate Sell eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of selling eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateSellEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInformation</returns>
        ApiResponse<TransactionInformation> InitiateSellEDalerWithHttpInfo(InitiateSellEDalerBody initiateSellEDalerBody = default(InitiateSellEDalerBody), int operationIndex = 0);
        /// <summary>
        /// Process eDaler URI
        /// </summary>
        /// <remarks>
        /// Allows the client to process an eDaler URI.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEDalerUriBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessResult</returns>
        ProcessResult ProcessEDalerUri(ProcessEDalerUriBody processEDalerUriBody = default(ProcessEDalerUriBody), int operationIndex = 0);

        /// <summary>
        /// Process eDaler URI
        /// </summary>
        /// <remarks>
        /// Allows the client to process an eDaler URI.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEDalerUriBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessResult</returns>
        ApiResponse<ProcessResult> ProcessEDalerUriWithHttpInfo(ProcessEDalerUriBody processEDalerUriBody = default(ProcessEDalerUriBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Balance
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve information about the current state of its wallet.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBalanceResponse</returns>
        System.Threading.Tasks.Task<GetBalanceResponse> GetBalanceAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Balance
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve information about the current state of its wallet.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBalanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBalanceResponse>> GetBalanceWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Payment Options for Buying eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of getting payment options for buying eDaler. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForBuyingEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInformation</returns>
        System.Threading.Tasks.Task<TransactionInformation> GetPaymentOptionsForBuyingEDalerAsync(GetPaymentOptionsForBuyingEDalerBody getPaymentOptionsForBuyingEDalerBody = default(GetPaymentOptionsForBuyingEDalerBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Payment Options for Buying eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of getting payment options for buying eDaler. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForBuyingEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionInformation>> GetPaymentOptionsForBuyingEDalerWithHttpInfoAsync(GetPaymentOptionsForBuyingEDalerBody getPaymentOptionsForBuyingEDalerBody = default(GetPaymentOptionsForBuyingEDalerBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Payment Options for Selling eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of getting payment options for selling eDaler. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForSellingEDalerBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInformation</returns>
        System.Threading.Tasks.Task<TransactionInformation> GetPaymentOptionsForSellingEDalerAsync(GetPaymentOptionsForSellingEDalerBody getPaymentOptionsForSellingEDalerBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Payment Options for Selling eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of getting payment options for selling eDaler. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForSellingEDalerBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionInformation>> GetPaymentOptionsForSellingEDalerWithHttpInfoAsync(GetPaymentOptionsForSellingEDalerBody getPaymentOptionsForSellingEDalerBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Service Providers for Buying eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve a list of available service providers that can be used to buy eDaler.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvidersResponse</returns>
        System.Threading.Tasks.Task<ProvidersResponse> GetServiceProvidersForBuyingEDalerAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Service Providers for Buying eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve a list of available service providers that can be used to buy eDaler.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvidersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvidersResponse>> GetServiceProvidersForBuyingEDalerWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Service Providers for Selling eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve a list of available service providers that can be used to sell eDaler.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvidersResponse</returns>
        System.Threading.Tasks.Task<ProvidersResponse> GetServiceProvidersForSellingEDalerAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Service Providers for Selling eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to retrieve a list of available service providers that can be used to sell eDaler.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvidersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvidersResponse>> GetServiceProvidersForSellingEDalerWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Transaction Information
        /// </summary>
        /// <remarks>
        /// Allows the client to get updated transaction information from the server. It also allows the client to re-register the current Tab ID (from Events.js) and function to call, in case changes are registered with the server-side transaction object. Call this function to restart event notification if you navigate between pages. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransactionInformationBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInformation</returns>
        System.Threading.Tasks.Task<TransactionInformation> GetTransactionInformationAsync(GetTransactionInformationBody getTransactionInformationBody = default(GetTransactionInformationBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Transaction Information
        /// </summary>
        /// <remarks>
        /// Allows the client to get updated transaction information from the server. It also allows the client to re-register the current Tab ID (from Events.js) and function to call, in case changes are registered with the server-side transaction object. Call this function to restart event notification if you navigate between pages. 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransactionInformationBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionInformation>> GetTransactionInformationWithHttpInfoAsync(GetTransactionInformationBody getTransactionInformationBody = default(GetTransactionInformationBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initiate Buy eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of buying eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateBuyEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInformation</returns>
        System.Threading.Tasks.Task<TransactionInformation> InitiateBuyEDalerAsync(InitiateBuyEDalerBody initiateBuyEDalerBody = default(InitiateBuyEDalerBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initiate Buy eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of buying eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateBuyEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionInformation>> InitiateBuyEDalerWithHttpInfoAsync(InitiateBuyEDalerBody initiateBuyEDalerBody = default(InitiateBuyEDalerBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initiate Sell eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of selling eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateSellEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInformation</returns>
        System.Threading.Tasks.Task<TransactionInformation> InitiateSellEDalerAsync(InitiateSellEDalerBody initiateSellEDalerBody = default(InitiateSellEDalerBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initiate Sell eDaler
        /// </summary>
        /// <remarks>
        /// Allows the client to initiate the process of selling eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateSellEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionInformation>> InitiateSellEDalerWithHttpInfoAsync(InitiateSellEDalerBody initiateSellEDalerBody = default(InitiateSellEDalerBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Process eDaler URI
        /// </summary>
        /// <remarks>
        /// Allows the client to process an eDaler URI.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEDalerUriBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessResult</returns>
        System.Threading.Tasks.Task<ProcessResult> ProcessEDalerUriAsync(ProcessEDalerUriBody processEDalerUriBody = default(ProcessEDalerUriBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Process eDaler URI
        /// </summary>
        /// <remarks>
        /// Allows the client to process an eDaler URI.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEDalerUriBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessResult>> ProcessEDalerUriWithHttpInfoAsync(ProcessEDalerUriBody processEDalerUriBody = default(ProcessEDalerUriBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApi : IWalletApiSync, IWalletApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletApi : IWalletApi
    {
        private TAG.Networking.Agent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletApi(string basePath)
        {
            this.Configuration = TAG.Networking.Agent.Client.Configuration.MergeConfigurations(
                TAG.Networking.Agent.Client.GlobalConfiguration.Instance,
                new TAG.Networking.Agent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TAG.Networking.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WalletApi(TAG.Networking.Agent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TAG.Networking.Agent.Client.Configuration.MergeConfigurations(
                TAG.Networking.Agent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TAG.Networking.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WalletApi(TAG.Networking.Agent.Client.ISynchronousClient client, TAG.Networking.Agent.Client.IAsynchronousClient asyncClient, TAG.Networking.Agent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TAG.Networking.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TAG.Networking.Agent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TAG.Networking.Agent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TAG.Networking.Agent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TAG.Networking.Agent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Balance Allows the client to retrieve information about the current state of its wallet.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBalanceResponse</returns>
        public GetBalanceResponse GetBalance(Object body = default(Object), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<GetBalanceResponse> localVarResponse = GetBalanceWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Balance Allows the client to retrieve information about the current state of its wallet.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBalanceResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<GetBalanceResponse> GetBalanceWithHttpInfo(Object body = default(Object), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WalletApi.GetBalance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetBalanceResponse>("/Agent/Wallet/GetBalance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Balance Allows the client to retrieve information about the current state of its wallet.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBalanceResponse</returns>
        public async System.Threading.Tasks.Task<GetBalanceResponse> GetBalanceAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<GetBalanceResponse> localVarResponse = await GetBalanceWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Balance Allows the client to retrieve information about the current state of its wallet.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBalanceResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<GetBalanceResponse>> GetBalanceWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WalletApi.GetBalance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetBalanceResponse>("/Agent/Wallet/GetBalance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Options for Buying eDaler Allows the client to initiate the process of getting payment options for buying eDaler. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForBuyingEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInformation</returns>
        public TransactionInformation GetPaymentOptionsForBuyingEDaler(GetPaymentOptionsForBuyingEDalerBody getPaymentOptionsForBuyingEDalerBody = default(GetPaymentOptionsForBuyingEDalerBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> localVarResponse = GetPaymentOptionsForBuyingEDalerWithHttpInfo(getPaymentOptionsForBuyingEDalerBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Options for Buying eDaler Allows the client to initiate the process of getting payment options for buying eDaler. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForBuyingEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInformation</returns>
        public TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> GetPaymentOptionsForBuyingEDalerWithHttpInfo(GetPaymentOptionsForBuyingEDalerBody getPaymentOptionsForBuyingEDalerBody = default(GetPaymentOptionsForBuyingEDalerBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPaymentOptionsForBuyingEDalerBody;

            localVarRequestOptions.Operation = "WalletApi.GetPaymentOptionsForBuyingEDaler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionInformation>("/Agent/Wallet/GetPaymentOptionsForBuyingEDaler", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentOptionsForBuyingEDaler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Options for Buying eDaler Allows the client to initiate the process of getting payment options for buying eDaler. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForBuyingEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInformation</returns>
        public async System.Threading.Tasks.Task<TransactionInformation> GetPaymentOptionsForBuyingEDalerAsync(GetPaymentOptionsForBuyingEDalerBody getPaymentOptionsForBuyingEDalerBody = default(GetPaymentOptionsForBuyingEDalerBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> localVarResponse = await GetPaymentOptionsForBuyingEDalerWithHttpInfoAsync(getPaymentOptionsForBuyingEDalerBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Options for Buying eDaler Allows the client to initiate the process of getting payment options for buying eDaler. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForBuyingEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInformation)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<TransactionInformation>> GetPaymentOptionsForBuyingEDalerWithHttpInfoAsync(GetPaymentOptionsForBuyingEDalerBody getPaymentOptionsForBuyingEDalerBody = default(GetPaymentOptionsForBuyingEDalerBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPaymentOptionsForBuyingEDalerBody;

            localVarRequestOptions.Operation = "WalletApi.GetPaymentOptionsForBuyingEDaler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionInformation>("/Agent/Wallet/GetPaymentOptionsForBuyingEDaler", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentOptionsForBuyingEDaler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Options for Selling eDaler Allows the client to initiate the process of getting payment options for selling eDaler. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForSellingEDalerBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInformation</returns>
        public TransactionInformation GetPaymentOptionsForSellingEDaler(GetPaymentOptionsForSellingEDalerBody getPaymentOptionsForSellingEDalerBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> localVarResponse = GetPaymentOptionsForSellingEDalerWithHttpInfo(getPaymentOptionsForSellingEDalerBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Options for Selling eDaler Allows the client to initiate the process of getting payment options for selling eDaler. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForSellingEDalerBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInformation</returns>
        public TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> GetPaymentOptionsForSellingEDalerWithHttpInfo(GetPaymentOptionsForSellingEDalerBody getPaymentOptionsForSellingEDalerBody, int operationIndex = 0)
        {
            // verify the required parameter 'getPaymentOptionsForSellingEDalerBody' is set
            if (getPaymentOptionsForSellingEDalerBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'getPaymentOptionsForSellingEDalerBody' when calling WalletApi->GetPaymentOptionsForSellingEDaler");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPaymentOptionsForSellingEDalerBody;

            localVarRequestOptions.Operation = "WalletApi.GetPaymentOptionsForSellingEDaler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionInformation>("/Agent/Wallet/GetPaymentOptionsForSellingEDaler", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentOptionsForSellingEDaler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Options for Selling eDaler Allows the client to initiate the process of getting payment options for selling eDaler. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForSellingEDalerBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInformation</returns>
        public async System.Threading.Tasks.Task<TransactionInformation> GetPaymentOptionsForSellingEDalerAsync(GetPaymentOptionsForSellingEDalerBody getPaymentOptionsForSellingEDalerBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> localVarResponse = await GetPaymentOptionsForSellingEDalerWithHttpInfoAsync(getPaymentOptionsForSellingEDalerBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Options for Selling eDaler Allows the client to initiate the process of getting payment options for selling eDaler. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPaymentOptionsForSellingEDalerBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInformation)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<TransactionInformation>> GetPaymentOptionsForSellingEDalerWithHttpInfoAsync(GetPaymentOptionsForSellingEDalerBody getPaymentOptionsForSellingEDalerBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getPaymentOptionsForSellingEDalerBody' is set
            if (getPaymentOptionsForSellingEDalerBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'getPaymentOptionsForSellingEDalerBody' when calling WalletApi->GetPaymentOptionsForSellingEDaler");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPaymentOptionsForSellingEDalerBody;

            localVarRequestOptions.Operation = "WalletApi.GetPaymentOptionsForSellingEDaler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionInformation>("/Agent/Wallet/GetPaymentOptionsForSellingEDaler", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentOptionsForSellingEDaler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Providers for Buying eDaler Allows the client to retrieve a list of available service providers that can be used to buy eDaler.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvidersResponse</returns>
        public ProvidersResponse GetServiceProvidersForBuyingEDaler(Object body = default(Object), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<ProvidersResponse> localVarResponse = GetServiceProvidersForBuyingEDalerWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Providers for Buying eDaler Allows the client to retrieve a list of available service providers that can be used to buy eDaler.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvidersResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<ProvidersResponse> GetServiceProvidersForBuyingEDalerWithHttpInfo(Object body = default(Object), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WalletApi.GetServiceProvidersForBuyingEDaler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProvidersResponse>("/Agent/Wallet/GetServiceProvidersForBuyingEDaler", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceProvidersForBuyingEDaler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Providers for Buying eDaler Allows the client to retrieve a list of available service providers that can be used to buy eDaler.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvidersResponse</returns>
        public async System.Threading.Tasks.Task<ProvidersResponse> GetServiceProvidersForBuyingEDalerAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<ProvidersResponse> localVarResponse = await GetServiceProvidersForBuyingEDalerWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Providers for Buying eDaler Allows the client to retrieve a list of available service providers that can be used to buy eDaler.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvidersResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<ProvidersResponse>> GetServiceProvidersForBuyingEDalerWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WalletApi.GetServiceProvidersForBuyingEDaler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProvidersResponse>("/Agent/Wallet/GetServiceProvidersForBuyingEDaler", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceProvidersForBuyingEDaler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Providers for Selling eDaler Allows the client to retrieve a list of available service providers that can be used to sell eDaler.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvidersResponse</returns>
        public ProvidersResponse GetServiceProvidersForSellingEDaler(Object body = default(Object), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<ProvidersResponse> localVarResponse = GetServiceProvidersForSellingEDalerWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Providers for Selling eDaler Allows the client to retrieve a list of available service providers that can be used to sell eDaler.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvidersResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<ProvidersResponse> GetServiceProvidersForSellingEDalerWithHttpInfo(Object body = default(Object), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WalletApi.GetServiceProvidersForSellingEDaler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProvidersResponse>("/Agent/Wallet/GetServiceProvidersForSellingEDaler", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceProvidersForSellingEDaler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Providers for Selling eDaler Allows the client to retrieve a list of available service providers that can be used to sell eDaler.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvidersResponse</returns>
        public async System.Threading.Tasks.Task<ProvidersResponse> GetServiceProvidersForSellingEDalerAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<ProvidersResponse> localVarResponse = await GetServiceProvidersForSellingEDalerWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Providers for Selling eDaler Allows the client to retrieve a list of available service providers that can be used to sell eDaler.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvidersResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<ProvidersResponse>> GetServiceProvidersForSellingEDalerWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WalletApi.GetServiceProvidersForSellingEDaler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProvidersResponse>("/Agent/Wallet/GetServiceProvidersForSellingEDaler", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceProvidersForSellingEDaler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transaction Information Allows the client to get updated transaction information from the server. It also allows the client to re-register the current Tab ID (from Events.js) and function to call, in case changes are registered with the server-side transaction object. Call this function to restart event notification if you navigate between pages. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransactionInformationBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInformation</returns>
        public TransactionInformation GetTransactionInformation(GetTransactionInformationBody getTransactionInformationBody = default(GetTransactionInformationBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> localVarResponse = GetTransactionInformationWithHttpInfo(getTransactionInformationBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Information Allows the client to get updated transaction information from the server. It also allows the client to re-register the current Tab ID (from Events.js) and function to call, in case changes are registered with the server-side transaction object. Call this function to restart event notification if you navigate between pages. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransactionInformationBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInformation</returns>
        public TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> GetTransactionInformationWithHttpInfo(GetTransactionInformationBody getTransactionInformationBody = default(GetTransactionInformationBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTransactionInformationBody;

            localVarRequestOptions.Operation = "WalletApi.GetTransactionInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionInformation>("/Agent/Wallet/GetTransactionInformation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transaction Information Allows the client to get updated transaction information from the server. It also allows the client to re-register the current Tab ID (from Events.js) and function to call, in case changes are registered with the server-side transaction object. Call this function to restart event notification if you navigate between pages. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransactionInformationBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInformation</returns>
        public async System.Threading.Tasks.Task<TransactionInformation> GetTransactionInformationAsync(GetTransactionInformationBody getTransactionInformationBody = default(GetTransactionInformationBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> localVarResponse = await GetTransactionInformationWithHttpInfoAsync(getTransactionInformationBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Information Allows the client to get updated transaction information from the server. It also allows the client to re-register the current Tab ID (from Events.js) and function to call, in case changes are registered with the server-side transaction object. Call this function to restart event notification if you navigate between pages. 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransactionInformationBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInformation)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<TransactionInformation>> GetTransactionInformationWithHttpInfoAsync(GetTransactionInformationBody getTransactionInformationBody = default(GetTransactionInformationBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTransactionInformationBody;

            localVarRequestOptions.Operation = "WalletApi.GetTransactionInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionInformation>("/Agent/Wallet/GetTransactionInformation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate Buy eDaler Allows the client to initiate the process of buying eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateBuyEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInformation</returns>
        public TransactionInformation InitiateBuyEDaler(InitiateBuyEDalerBody initiateBuyEDalerBody = default(InitiateBuyEDalerBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> localVarResponse = InitiateBuyEDalerWithHttpInfo(initiateBuyEDalerBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Buy eDaler Allows the client to initiate the process of buying eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateBuyEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInformation</returns>
        public TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> InitiateBuyEDalerWithHttpInfo(InitiateBuyEDalerBody initiateBuyEDalerBody = default(InitiateBuyEDalerBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = initiateBuyEDalerBody;

            localVarRequestOptions.Operation = "WalletApi.InitiateBuyEDaler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionInformation>("/Agent/Wallet/InitiateBuyEDaler", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitiateBuyEDaler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate Buy eDaler Allows the client to initiate the process of buying eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateBuyEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInformation</returns>
        public async System.Threading.Tasks.Task<TransactionInformation> InitiateBuyEDalerAsync(InitiateBuyEDalerBody initiateBuyEDalerBody = default(InitiateBuyEDalerBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> localVarResponse = await InitiateBuyEDalerWithHttpInfoAsync(initiateBuyEDalerBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Buy eDaler Allows the client to initiate the process of buying eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateBuyEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInformation)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<TransactionInformation>> InitiateBuyEDalerWithHttpInfoAsync(InitiateBuyEDalerBody initiateBuyEDalerBody = default(InitiateBuyEDalerBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = initiateBuyEDalerBody;

            localVarRequestOptions.Operation = "WalletApi.InitiateBuyEDaler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionInformation>("/Agent/Wallet/InitiateBuyEDaler", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitiateBuyEDaler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate Sell eDaler Allows the client to initiate the process of selling eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateSellEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInformation</returns>
        public TransactionInformation InitiateSellEDaler(InitiateSellEDalerBody initiateSellEDalerBody = default(InitiateSellEDalerBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> localVarResponse = InitiateSellEDalerWithHttpInfo(initiateSellEDalerBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Sell eDaler Allows the client to initiate the process of selling eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateSellEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInformation</returns>
        public TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> InitiateSellEDalerWithHttpInfo(InitiateSellEDalerBody initiateSellEDalerBody = default(InitiateSellEDalerBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = initiateSellEDalerBody;

            localVarRequestOptions.Operation = "WalletApi.InitiateSellEDaler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionInformation>("/Agent/Wallet/InitiateSellEDaler", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitiateSellEDaler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate Sell eDaler Allows the client to initiate the process of selling eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateSellEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInformation</returns>
        public async System.Threading.Tasks.Task<TransactionInformation> InitiateSellEDalerAsync(InitiateSellEDalerBody initiateSellEDalerBody = default(InitiateSellEDalerBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<TransactionInformation> localVarResponse = await InitiateSellEDalerWithHttpInfoAsync(initiateSellEDalerBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Sell eDaler Allows the client to initiate the process of selling eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateSellEDalerBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInformation)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<TransactionInformation>> InitiateSellEDalerWithHttpInfoAsync(InitiateSellEDalerBody initiateSellEDalerBody = default(InitiateSellEDalerBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = initiateSellEDalerBody;

            localVarRequestOptions.Operation = "WalletApi.InitiateSellEDaler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionInformation>("/Agent/Wallet/InitiateSellEDaler", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitiateSellEDaler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process eDaler URI Allows the client to process an eDaler URI.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEDalerUriBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessResult</returns>
        public ProcessResult ProcessEDalerUri(ProcessEDalerUriBody processEDalerUriBody = default(ProcessEDalerUriBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<ProcessResult> localVarResponse = ProcessEDalerUriWithHttpInfo(processEDalerUriBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process eDaler URI Allows the client to process an eDaler URI.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEDalerUriBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessResult</returns>
        public TAG.Networking.Agent.Client.ApiResponse<ProcessResult> ProcessEDalerUriWithHttpInfo(ProcessEDalerUriBody processEDalerUriBody = default(ProcessEDalerUriBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processEDalerUriBody;

            localVarRequestOptions.Operation = "WalletApi.ProcessEDalerUri";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessResult>("/Agent/Wallet/ProcessEDalerUri", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessEDalerUri", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process eDaler URI Allows the client to process an eDaler URI.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEDalerUriBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessResult</returns>
        public async System.Threading.Tasks.Task<ProcessResult> ProcessEDalerUriAsync(ProcessEDalerUriBody processEDalerUriBody = default(ProcessEDalerUriBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<ProcessResult> localVarResponse = await ProcessEDalerUriWithHttpInfoAsync(processEDalerUriBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process eDaler URI Allows the client to process an eDaler URI.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEDalerUriBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessResult)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<ProcessResult>> ProcessEDalerUriWithHttpInfoAsync(ProcessEDalerUriBody processEDalerUriBody = default(ProcessEDalerUriBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processEDalerUriBody;

            localVarRequestOptions.Operation = "WalletApi.ProcessEDalerUri";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessResult>("/Agent/Wallet/ProcessEDalerUri", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessEDalerUri", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
