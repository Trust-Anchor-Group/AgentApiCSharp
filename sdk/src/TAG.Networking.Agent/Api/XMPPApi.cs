/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TAG.Networking.Agent.Client;
using TAG.Networking.Agent.Model;

namespace TAG.Networking.Agent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IXMPPApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Roster
        /// </summary>
        /// <remarks>
        /// Allows the client to get the roster of its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRosterResponse</returns>
        GetRosterResponse GetRoster(GetRosterBody getRosterBody = default(GetRosterBody), int operationIndex = 0);

        /// <summary>
        /// Get Roster
        /// </summary>
        /// <remarks>
        /// Allows the client to get the roster of its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRosterResponse</returns>
        ApiResponse<GetRosterResponse> GetRosterWithHttpInfo(GetRosterBody getRosterBody = default(GetRosterBody), int operationIndex = 0);
        /// <summary>
        /// Get Roster Item
        /// </summary>
        /// <remarks>
        /// Allows the client to get a specific roster item of its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RosterItem</returns>
        RosterItem GetRosterItem(GetRosterItemBody getRosterItemBody, int operationIndex = 0);

        /// <summary>
        /// Get Roster Item
        /// </summary>
        /// <remarks>
        /// Allows the client to get a specific roster item of its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RosterItem</returns>
        ApiResponse<RosterItem> GetRosterItemWithHttpInfo(GetRosterItemBody getRosterItemBody, int operationIndex = 0);
        /// <summary>
        /// Information Query
        /// </summary>
        /// <remarks>
        /// Sends an Information Query (iq) to an entity on the XMPP network, given its Full JID. For connected entities, you need to have an presence subscription to that entity, approved by the entity, to get the Full JID. You get the Full JID using the Presence Probe resource.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationQueryBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryResultJson</returns>
        QueryResultJson InformationQuery(InformationQueryBody informationQueryBody, int operationIndex = 0);

        /// <summary>
        /// Information Query
        /// </summary>
        /// <remarks>
        /// Sends an Information Query (iq) to an entity on the XMPP network, given its Full JID. For connected entities, you need to have an presence subscription to that entity, approved by the entity, to get the Full JID. You get the Full JID using the Presence Probe resource.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationQueryBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryResultJson</returns>
        ApiResponse<QueryResultJson> InformationQueryWithHttpInfo(InformationQueryBody informationQueryBody, int operationIndex = 0);
        /// <summary>
        /// Pop Messages
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="popMessagesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageResult</returns>
        MessageResult PopMessages(PopMessagesBody popMessagesBody, int operationIndex = 0);

        /// <summary>
        /// Pop Messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="popMessagesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageResult</returns>
        ApiResponse<MessageResult> PopMessagesWithHttpInfo(PopMessagesBody popMessagesBody, int operationIndex = 0);
        /// <summary>
        /// Presence Probe
        /// </summary>
        /// <remarks>
        /// Gets the latest presence issued by a contact in your roster who has approved your presence subscription request.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceProbeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProbeResult</returns>
        ProbeResult PresenceProbe(PresenceProbeBody presenceProbeBody, int operationIndex = 0);

        /// <summary>
        /// Presence Probe
        /// </summary>
        /// <remarks>
        /// Gets the latest presence issued by a contact in your roster who has approved your presence subscription request.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceProbeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProbeResult</returns>
        ApiResponse<ProbeResult> PresenceProbeWithHttpInfo(PresenceProbeBody presenceProbeBody, int operationIndex = 0);
        /// <summary>
        /// Remove Roster Item
        /// </summary>
        /// <remarks>
        /// Removes a specific roster item from the account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RosterItem</returns>
        RosterItem RemoveRosterItem(RemoveRosterItemBody removeRosterItemBody, int operationIndex = 0);

        /// <summary>
        /// Remove Roster Item
        /// </summary>
        /// <remarks>
        /// Removes a specific roster item from the account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RosterItem</returns>
        ApiResponse<RosterItem> RemoveRosterItemWithHttpInfo(RemoveRosterItemBody removeRosterItemBody, int operationIndex = 0);
        /// <summary>
        /// Send Formatted Message
        /// </summary>
        /// <remarks>
        /// Allows the client to send a formatted chat message from its account to an XMPP recipient. A formatted message contains the message in plain text, Markdown and HTML. The recipient, depending on capabilities, will select the representation it handles best to present the message.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFormattedMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StanzaResult</returns>
        StanzaResult SendFormattedMessage(SendFormattedMessage sendFormattedMessage, int operationIndex = 0);

        /// <summary>
        /// Send Formatted Message
        /// </summary>
        /// <remarks>
        /// Allows the client to send a formatted chat message from its account to an XMPP recipient. A formatted message contains the message in plain text, Markdown and HTML. The recipient, depending on capabilities, will select the representation it handles best to present the message.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFormattedMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StanzaResult</returns>
        ApiResponse<StanzaResult> SendFormattedMessageWithHttpInfo(SendFormattedMessage sendFormattedMessage, int operationIndex = 0);
        /// <summary>
        /// Send Presence Subscription
        /// </summary>
        /// <remarks>
        /// Allows the client to send a presence subscription stanza from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceSubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PresenceSubscriptionResult</returns>
        PresenceSubscriptionResult SendPresenceSubscription(SendPresenceSubscriptionBody sendPresenceSubscriptionBody, int operationIndex = 0);

        /// <summary>
        /// Send Presence Subscription
        /// </summary>
        /// <remarks>
        /// Allows the client to send a presence subscription stanza from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceSubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PresenceSubscriptionResult</returns>
        ApiResponse<PresenceSubscriptionResult> SendPresenceSubscriptionWithHttpInfo(SendPresenceSubscriptionBody sendPresenceSubscriptionBody, int operationIndex = 0);
        /// <summary>
        /// Send Presence Unsubscription
        /// </summary>
        /// <remarks>
        /// Allows the client to send a presence unsubscription stanza from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceUnsubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StanzaResult</returns>
        StanzaResult SendPresenceUnsubscription(SendPresenceUnsubscriptionBody sendPresenceUnsubscriptionBody, int operationIndex = 0);

        /// <summary>
        /// Send Presence Unsubscription
        /// </summary>
        /// <remarks>
        /// Allows the client to send a presence unsubscription stanza from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceUnsubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StanzaResult</returns>
        ApiResponse<StanzaResult> SendPresenceUnsubscriptionWithHttpInfo(SendPresenceUnsubscriptionBody sendPresenceUnsubscriptionBody, int operationIndex = 0);
        /// <summary>
        /// Send Subscription Accepted
        /// </summary>
        /// <remarks>
        /// Allows the client to accept a presence subscription made to its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionAcceptedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendSubscriptionAcceptedResponse</returns>
        SendSubscriptionAcceptedResponse SendSubscriptionAccepted(SendSubscriptionAcceptedBody sendSubscriptionAcceptedBody, int operationIndex = 0);

        /// <summary>
        /// Send Subscription Accepted
        /// </summary>
        /// <remarks>
        /// Allows the client to accept a presence subscription made to its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionAcceptedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendSubscriptionAcceptedResponse</returns>
        ApiResponse<SendSubscriptionAcceptedResponse> SendSubscriptionAcceptedWithHttpInfo(SendSubscriptionAcceptedBody sendSubscriptionAcceptedBody, int operationIndex = 0);
        /// <summary>
        /// Send Subscription Declined
        /// </summary>
        /// <remarks>
        /// Allows the client to decline a presence subscription made to its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionDeclinedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StanzaResult</returns>
        StanzaResult SendSubscriptionDeclined(SendSubscriptionDeclinedBody sendSubscriptionDeclinedBody, int operationIndex = 0);

        /// <summary>
        /// Send Subscription Declined
        /// </summary>
        /// <remarks>
        /// Allows the client to decline a presence subscription made to its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionDeclinedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StanzaResult</returns>
        ApiResponse<StanzaResult> SendSubscriptionDeclinedWithHttpInfo(SendSubscriptionDeclinedBody sendSubscriptionDeclinedBody, int operationIndex = 0);
        /// <summary>
        /// Send Text Message
        /// </summary>
        /// <remarks>
        /// Allows the client to send a plain text chat message from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTextMessageBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StanzaResult</returns>
        StanzaResult SendTextMessage(SendTextMessageBody sendTextMessageBody, int operationIndex = 0);

        /// <summary>
        /// Send Text Message
        /// </summary>
        /// <remarks>
        /// Allows the client to send a plain text chat message from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTextMessageBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StanzaResult</returns>
        ApiResponse<StanzaResult> SendTextMessageWithHttpInfo(SendTextMessageBody sendTextMessageBody, int operationIndex = 0);
        /// <summary>
        /// Send XML Message
        /// </summary>
        /// <remarks>
        /// Allows the client to send a custom XML normal message from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendXmlMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StanzaResult</returns>
        StanzaResult SendXmlMessage(SendXmlMessage sendXmlMessage, int operationIndex = 0);

        /// <summary>
        /// Send XML Message
        /// </summary>
        /// <remarks>
        /// Allows the client to send a custom XML normal message from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendXmlMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StanzaResult</returns>
        ApiResponse<StanzaResult> SendXmlMessageWithHttpInfo(SendXmlMessage sendXmlMessage, int operationIndex = 0);
        /// <summary>
        /// Set Roster Item
        /// </summary>
        /// <remarks>
        /// Sets information about a specific roster item for the account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RosterItem</returns>
        RosterItem SetRosterItem(SetRosterItemBody setRosterItemBody, int operationIndex = 0);

        /// <summary>
        /// Set Roster Item
        /// </summary>
        /// <remarks>
        /// Sets information about a specific roster item for the account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RosterItem</returns>
        ApiResponse<RosterItem> SetRosterItemWithHttpInfo(SetRosterItemBody setRosterItemBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IXMPPApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Roster
        /// </summary>
        /// <remarks>
        /// Allows the client to get the roster of its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRosterResponse</returns>
        System.Threading.Tasks.Task<GetRosterResponse> GetRosterAsync(GetRosterBody getRosterBody = default(GetRosterBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Roster
        /// </summary>
        /// <remarks>
        /// Allows the client to get the roster of its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRosterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRosterResponse>> GetRosterWithHttpInfoAsync(GetRosterBody getRosterBody = default(GetRosterBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Roster Item
        /// </summary>
        /// <remarks>
        /// Allows the client to get a specific roster item of its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RosterItem</returns>
        System.Threading.Tasks.Task<RosterItem> GetRosterItemAsync(GetRosterItemBody getRosterItemBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Roster Item
        /// </summary>
        /// <remarks>
        /// Allows the client to get a specific roster item of its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RosterItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RosterItem>> GetRosterItemWithHttpInfoAsync(GetRosterItemBody getRosterItemBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Information Query
        /// </summary>
        /// <remarks>
        /// Sends an Information Query (iq) to an entity on the XMPP network, given its Full JID. For connected entities, you need to have an presence subscription to that entity, approved by the entity, to get the Full JID. You get the Full JID using the Presence Probe resource.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationQueryBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryResultJson</returns>
        System.Threading.Tasks.Task<QueryResultJson> InformationQueryAsync(InformationQueryBody informationQueryBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Information Query
        /// </summary>
        /// <remarks>
        /// Sends an Information Query (iq) to an entity on the XMPP network, given its Full JID. For connected entities, you need to have an presence subscription to that entity, approved by the entity, to get the Full JID. You get the Full JID using the Presence Probe resource.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationQueryBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryResultJson)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResultJson>> InformationQueryWithHttpInfoAsync(InformationQueryBody informationQueryBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pop Messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="popMessagesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageResult</returns>
        System.Threading.Tasks.Task<MessageResult> PopMessagesAsync(PopMessagesBody popMessagesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pop Messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="popMessagesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageResult>> PopMessagesWithHttpInfoAsync(PopMessagesBody popMessagesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Presence Probe
        /// </summary>
        /// <remarks>
        /// Gets the latest presence issued by a contact in your roster who has approved your presence subscription request.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceProbeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProbeResult</returns>
        System.Threading.Tasks.Task<ProbeResult> PresenceProbeAsync(PresenceProbeBody presenceProbeBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Presence Probe
        /// </summary>
        /// <remarks>
        /// Gets the latest presence issued by a contact in your roster who has approved your presence subscription request.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceProbeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProbeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProbeResult>> PresenceProbeWithHttpInfoAsync(PresenceProbeBody presenceProbeBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Roster Item
        /// </summary>
        /// <remarks>
        /// Removes a specific roster item from the account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RosterItem</returns>
        System.Threading.Tasks.Task<RosterItem> RemoveRosterItemAsync(RemoveRosterItemBody removeRosterItemBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Roster Item
        /// </summary>
        /// <remarks>
        /// Removes a specific roster item from the account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RosterItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RosterItem>> RemoveRosterItemWithHttpInfoAsync(RemoveRosterItemBody removeRosterItemBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Formatted Message
        /// </summary>
        /// <remarks>
        /// Allows the client to send a formatted chat message from its account to an XMPP recipient. A formatted message contains the message in plain text, Markdown and HTML. The recipient, depending on capabilities, will select the representation it handles best to present the message.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFormattedMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StanzaResult</returns>
        System.Threading.Tasks.Task<StanzaResult> SendFormattedMessageAsync(SendFormattedMessage sendFormattedMessage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Formatted Message
        /// </summary>
        /// <remarks>
        /// Allows the client to send a formatted chat message from its account to an XMPP recipient. A formatted message contains the message in plain text, Markdown and HTML. The recipient, depending on capabilities, will select the representation it handles best to present the message.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFormattedMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StanzaResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StanzaResult>> SendFormattedMessageWithHttpInfoAsync(SendFormattedMessage sendFormattedMessage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Presence Subscription
        /// </summary>
        /// <remarks>
        /// Allows the client to send a presence subscription stanza from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceSubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PresenceSubscriptionResult</returns>
        System.Threading.Tasks.Task<PresenceSubscriptionResult> SendPresenceSubscriptionAsync(SendPresenceSubscriptionBody sendPresenceSubscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Presence Subscription
        /// </summary>
        /// <remarks>
        /// Allows the client to send a presence subscription stanza from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceSubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PresenceSubscriptionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PresenceSubscriptionResult>> SendPresenceSubscriptionWithHttpInfoAsync(SendPresenceSubscriptionBody sendPresenceSubscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Presence Unsubscription
        /// </summary>
        /// <remarks>
        /// Allows the client to send a presence unsubscription stanza from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceUnsubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StanzaResult</returns>
        System.Threading.Tasks.Task<StanzaResult> SendPresenceUnsubscriptionAsync(SendPresenceUnsubscriptionBody sendPresenceUnsubscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Presence Unsubscription
        /// </summary>
        /// <remarks>
        /// Allows the client to send a presence unsubscription stanza from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceUnsubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StanzaResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StanzaResult>> SendPresenceUnsubscriptionWithHttpInfoAsync(SendPresenceUnsubscriptionBody sendPresenceUnsubscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Subscription Accepted
        /// </summary>
        /// <remarks>
        /// Allows the client to accept a presence subscription made to its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionAcceptedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendSubscriptionAcceptedResponse</returns>
        System.Threading.Tasks.Task<SendSubscriptionAcceptedResponse> SendSubscriptionAcceptedAsync(SendSubscriptionAcceptedBody sendSubscriptionAcceptedBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Subscription Accepted
        /// </summary>
        /// <remarks>
        /// Allows the client to accept a presence subscription made to its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionAcceptedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendSubscriptionAcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendSubscriptionAcceptedResponse>> SendSubscriptionAcceptedWithHttpInfoAsync(SendSubscriptionAcceptedBody sendSubscriptionAcceptedBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Subscription Declined
        /// </summary>
        /// <remarks>
        /// Allows the client to decline a presence subscription made to its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionDeclinedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StanzaResult</returns>
        System.Threading.Tasks.Task<StanzaResult> SendSubscriptionDeclinedAsync(SendSubscriptionDeclinedBody sendSubscriptionDeclinedBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Subscription Declined
        /// </summary>
        /// <remarks>
        /// Allows the client to decline a presence subscription made to its account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionDeclinedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StanzaResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StanzaResult>> SendSubscriptionDeclinedWithHttpInfoAsync(SendSubscriptionDeclinedBody sendSubscriptionDeclinedBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Text Message
        /// </summary>
        /// <remarks>
        /// Allows the client to send a plain text chat message from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTextMessageBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StanzaResult</returns>
        System.Threading.Tasks.Task<StanzaResult> SendTextMessageAsync(SendTextMessageBody sendTextMessageBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Text Message
        /// </summary>
        /// <remarks>
        /// Allows the client to send a plain text chat message from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTextMessageBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StanzaResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StanzaResult>> SendTextMessageWithHttpInfoAsync(SendTextMessageBody sendTextMessageBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send XML Message
        /// </summary>
        /// <remarks>
        /// Allows the client to send a custom XML normal message from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendXmlMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StanzaResult</returns>
        System.Threading.Tasks.Task<StanzaResult> SendXmlMessageAsync(SendXmlMessage sendXmlMessage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send XML Message
        /// </summary>
        /// <remarks>
        /// Allows the client to send a custom XML normal message from its account to an XMPP recipient.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendXmlMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StanzaResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StanzaResult>> SendXmlMessageWithHttpInfoAsync(SendXmlMessage sendXmlMessage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Roster Item
        /// </summary>
        /// <remarks>
        /// Sets information about a specific roster item for the account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RosterItem</returns>
        System.Threading.Tasks.Task<RosterItem> SetRosterItemAsync(SetRosterItemBody setRosterItemBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Roster Item
        /// </summary>
        /// <remarks>
        /// Sets information about a specific roster item for the account.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RosterItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RosterItem>> SetRosterItemWithHttpInfoAsync(SetRosterItemBody setRosterItemBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IXMPPApi : IXMPPApiSync, IXMPPApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class XMPPApi : IXMPPApi
    {
        private TAG.Networking.Agent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="XMPPApi"/> class.
        /// </summary>
        /// <returns></returns>
        public XMPPApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="XMPPApi"/> class.
        /// </summary>
        /// <returns></returns>
        public XMPPApi(string basePath)
        {
            this.Configuration = TAG.Networking.Agent.Client.Configuration.MergeConfigurations(
                TAG.Networking.Agent.Client.GlobalConfiguration.Instance,
                new TAG.Networking.Agent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TAG.Networking.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="XMPPApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public XMPPApi(TAG.Networking.Agent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TAG.Networking.Agent.Client.Configuration.MergeConfigurations(
                TAG.Networking.Agent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TAG.Networking.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="XMPPApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public XMPPApi(TAG.Networking.Agent.Client.ISynchronousClient client, TAG.Networking.Agent.Client.IAsynchronousClient asyncClient, TAG.Networking.Agent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TAG.Networking.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TAG.Networking.Agent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TAG.Networking.Agent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TAG.Networking.Agent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TAG.Networking.Agent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Roster Allows the client to get the roster of its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRosterResponse</returns>
        public GetRosterResponse GetRoster(GetRosterBody getRosterBody = default(GetRosterBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<GetRosterResponse> localVarResponse = GetRosterWithHttpInfo(getRosterBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Roster Allows the client to get the roster of its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRosterResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<GetRosterResponse> GetRosterWithHttpInfo(GetRosterBody getRosterBody = default(GetRosterBody), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getRosterBody;

            localVarRequestOptions.Operation = "XMPPApi.GetRoster";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetRosterResponse>("/Agent/Xmpp/GetRoster", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoster", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Roster Allows the client to get the roster of its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRosterResponse</returns>
        public async System.Threading.Tasks.Task<GetRosterResponse> GetRosterAsync(GetRosterBody getRosterBody = default(GetRosterBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<GetRosterResponse> localVarResponse = await GetRosterWithHttpInfoAsync(getRosterBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Roster Allows the client to get the roster of its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRosterResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<GetRosterResponse>> GetRosterWithHttpInfoAsync(GetRosterBody getRosterBody = default(GetRosterBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getRosterBody;

            localVarRequestOptions.Operation = "XMPPApi.GetRoster";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetRosterResponse>("/Agent/Xmpp/GetRoster", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoster", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Roster Item Allows the client to get a specific roster item of its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RosterItem</returns>
        public RosterItem GetRosterItem(GetRosterItemBody getRosterItemBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<RosterItem> localVarResponse = GetRosterItemWithHttpInfo(getRosterItemBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Roster Item Allows the client to get a specific roster item of its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RosterItem</returns>
        public TAG.Networking.Agent.Client.ApiResponse<RosterItem> GetRosterItemWithHttpInfo(GetRosterItemBody getRosterItemBody, int operationIndex = 0)
        {
            // verify the required parameter 'getRosterItemBody' is set
            if (getRosterItemBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'getRosterItemBody' when calling XMPPApi->GetRosterItem");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getRosterItemBody;

            localVarRequestOptions.Operation = "XMPPApi.GetRosterItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RosterItem>("/Agent/Xmpp/GetRosterItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRosterItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Roster Item Allows the client to get a specific roster item of its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RosterItem</returns>
        public async System.Threading.Tasks.Task<RosterItem> GetRosterItemAsync(GetRosterItemBody getRosterItemBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<RosterItem> localVarResponse = await GetRosterItemWithHttpInfoAsync(getRosterItemBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Roster Item Allows the client to get a specific roster item of its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RosterItem)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<RosterItem>> GetRosterItemWithHttpInfoAsync(GetRosterItemBody getRosterItemBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getRosterItemBody' is set
            if (getRosterItemBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'getRosterItemBody' when calling XMPPApi->GetRosterItem");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getRosterItemBody;

            localVarRequestOptions.Operation = "XMPPApi.GetRosterItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RosterItem>("/Agent/Xmpp/GetRosterItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRosterItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Information Query Sends an Information Query (iq) to an entity on the XMPP network, given its Full JID. For connected entities, you need to have an presence subscription to that entity, approved by the entity, to get the Full JID. You get the Full JID using the Presence Probe resource.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationQueryBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryResultJson</returns>
        public QueryResultJson InformationQuery(InformationQueryBody informationQueryBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<QueryResultJson> localVarResponse = InformationQueryWithHttpInfo(informationQueryBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Information Query Sends an Information Query (iq) to an entity on the XMPP network, given its Full JID. For connected entities, you need to have an presence subscription to that entity, approved by the entity, to get the Full JID. You get the Full JID using the Presence Probe resource.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationQueryBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryResultJson</returns>
        public TAG.Networking.Agent.Client.ApiResponse<QueryResultJson> InformationQueryWithHttpInfo(InformationQueryBody informationQueryBody, int operationIndex = 0)
        {
            // verify the required parameter 'informationQueryBody' is set
            if (informationQueryBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'informationQueryBody' when calling XMPPApi->InformationQuery");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = informationQueryBody;

            localVarRequestOptions.Operation = "XMPPApi.InformationQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<QueryResultJson>("/Agent/Xmpp/InformationQuery", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InformationQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Information Query Sends an Information Query (iq) to an entity on the XMPP network, given its Full JID. For connected entities, you need to have an presence subscription to that entity, approved by the entity, to get the Full JID. You get the Full JID using the Presence Probe resource.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationQueryBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryResultJson</returns>
        public async System.Threading.Tasks.Task<QueryResultJson> InformationQueryAsync(InformationQueryBody informationQueryBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<QueryResultJson> localVarResponse = await InformationQueryWithHttpInfoAsync(informationQueryBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Information Query Sends an Information Query (iq) to an entity on the XMPP network, given its Full JID. For connected entities, you need to have an presence subscription to that entity, approved by the entity, to get the Full JID. You get the Full JID using the Presence Probe resource.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationQueryBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryResultJson)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<QueryResultJson>> InformationQueryWithHttpInfoAsync(InformationQueryBody informationQueryBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'informationQueryBody' is set
            if (informationQueryBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'informationQueryBody' when calling XMPPApi->InformationQuery");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = informationQueryBody;

            localVarRequestOptions.Operation = "XMPPApi.InformationQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QueryResultJson>("/Agent/Xmpp/InformationQuery", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InformationQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pop Messages 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="popMessagesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageResult</returns>
        public MessageResult PopMessages(PopMessagesBody popMessagesBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<MessageResult> localVarResponse = PopMessagesWithHttpInfo(popMessagesBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pop Messages 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="popMessagesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageResult</returns>
        public TAG.Networking.Agent.Client.ApiResponse<MessageResult> PopMessagesWithHttpInfo(PopMessagesBody popMessagesBody, int operationIndex = 0)
        {
            // verify the required parameter 'popMessagesBody' is set
            if (popMessagesBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'popMessagesBody' when calling XMPPApi->PopMessages");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = popMessagesBody;

            localVarRequestOptions.Operation = "XMPPApi.PopMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MessageResult>("/Agent/Xmpp/PopMessages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PopMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pop Messages 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="popMessagesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageResult</returns>
        public async System.Threading.Tasks.Task<MessageResult> PopMessagesAsync(PopMessagesBody popMessagesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<MessageResult> localVarResponse = await PopMessagesWithHttpInfoAsync(popMessagesBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pop Messages 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="popMessagesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageResult)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<MessageResult>> PopMessagesWithHttpInfoAsync(PopMessagesBody popMessagesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'popMessagesBody' is set
            if (popMessagesBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'popMessagesBody' when calling XMPPApi->PopMessages");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = popMessagesBody;

            localVarRequestOptions.Operation = "XMPPApi.PopMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageResult>("/Agent/Xmpp/PopMessages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PopMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Presence Probe Gets the latest presence issued by a contact in your roster who has approved your presence subscription request.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceProbeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProbeResult</returns>
        public ProbeResult PresenceProbe(PresenceProbeBody presenceProbeBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<ProbeResult> localVarResponse = PresenceProbeWithHttpInfo(presenceProbeBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Presence Probe Gets the latest presence issued by a contact in your roster who has approved your presence subscription request.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceProbeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProbeResult</returns>
        public TAG.Networking.Agent.Client.ApiResponse<ProbeResult> PresenceProbeWithHttpInfo(PresenceProbeBody presenceProbeBody, int operationIndex = 0)
        {
            // verify the required parameter 'presenceProbeBody' is set
            if (presenceProbeBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'presenceProbeBody' when calling XMPPApi->PresenceProbe");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = presenceProbeBody;

            localVarRequestOptions.Operation = "XMPPApi.PresenceProbe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProbeResult>("/Agent/Xmpp/PresenceProbe", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PresenceProbe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Presence Probe Gets the latest presence issued by a contact in your roster who has approved your presence subscription request.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceProbeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProbeResult</returns>
        public async System.Threading.Tasks.Task<ProbeResult> PresenceProbeAsync(PresenceProbeBody presenceProbeBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<ProbeResult> localVarResponse = await PresenceProbeWithHttpInfoAsync(presenceProbeBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Presence Probe Gets the latest presence issued by a contact in your roster who has approved your presence subscription request.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceProbeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProbeResult)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<ProbeResult>> PresenceProbeWithHttpInfoAsync(PresenceProbeBody presenceProbeBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'presenceProbeBody' is set
            if (presenceProbeBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'presenceProbeBody' when calling XMPPApi->PresenceProbe");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = presenceProbeBody;

            localVarRequestOptions.Operation = "XMPPApi.PresenceProbe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProbeResult>("/Agent/Xmpp/PresenceProbe", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PresenceProbe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Roster Item Removes a specific roster item from the account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RosterItem</returns>
        public RosterItem RemoveRosterItem(RemoveRosterItemBody removeRosterItemBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<RosterItem> localVarResponse = RemoveRosterItemWithHttpInfo(removeRosterItemBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Roster Item Removes a specific roster item from the account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RosterItem</returns>
        public TAG.Networking.Agent.Client.ApiResponse<RosterItem> RemoveRosterItemWithHttpInfo(RemoveRosterItemBody removeRosterItemBody, int operationIndex = 0)
        {
            // verify the required parameter 'removeRosterItemBody' is set
            if (removeRosterItemBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'removeRosterItemBody' when calling XMPPApi->RemoveRosterItem");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = removeRosterItemBody;

            localVarRequestOptions.Operation = "XMPPApi.RemoveRosterItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RosterItem>("/Agent/Xmpp/RemoveRosterItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRosterItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Roster Item Removes a specific roster item from the account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RosterItem</returns>
        public async System.Threading.Tasks.Task<RosterItem> RemoveRosterItemAsync(RemoveRosterItemBody removeRosterItemBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<RosterItem> localVarResponse = await RemoveRosterItemWithHttpInfoAsync(removeRosterItemBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Roster Item Removes a specific roster item from the account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RosterItem)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<RosterItem>> RemoveRosterItemWithHttpInfoAsync(RemoveRosterItemBody removeRosterItemBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'removeRosterItemBody' is set
            if (removeRosterItemBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'removeRosterItemBody' when calling XMPPApi->RemoveRosterItem");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = removeRosterItemBody;

            localVarRequestOptions.Operation = "XMPPApi.RemoveRosterItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RosterItem>("/Agent/Xmpp/RemoveRosterItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRosterItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Formatted Message Allows the client to send a formatted chat message from its account to an XMPP recipient. A formatted message contains the message in plain text, Markdown and HTML. The recipient, depending on capabilities, will select the representation it handles best to present the message.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFormattedMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StanzaResult</returns>
        public StanzaResult SendFormattedMessage(SendFormattedMessage sendFormattedMessage, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<StanzaResult> localVarResponse = SendFormattedMessageWithHttpInfo(sendFormattedMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Formatted Message Allows the client to send a formatted chat message from its account to an XMPP recipient. A formatted message contains the message in plain text, Markdown and HTML. The recipient, depending on capabilities, will select the representation it handles best to present the message.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFormattedMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StanzaResult</returns>
        public TAG.Networking.Agent.Client.ApiResponse<StanzaResult> SendFormattedMessageWithHttpInfo(SendFormattedMessage sendFormattedMessage, int operationIndex = 0)
        {
            // verify the required parameter 'sendFormattedMessage' is set
            if (sendFormattedMessage == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendFormattedMessage' when calling XMPPApi->SendFormattedMessage");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendFormattedMessage;

            localVarRequestOptions.Operation = "XMPPApi.SendFormattedMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StanzaResult>("/Agent/Xmpp/SendFormattedMessage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendFormattedMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Formatted Message Allows the client to send a formatted chat message from its account to an XMPP recipient. A formatted message contains the message in plain text, Markdown and HTML. The recipient, depending on capabilities, will select the representation it handles best to present the message.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFormattedMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StanzaResult</returns>
        public async System.Threading.Tasks.Task<StanzaResult> SendFormattedMessageAsync(SendFormattedMessage sendFormattedMessage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<StanzaResult> localVarResponse = await SendFormattedMessageWithHttpInfoAsync(sendFormattedMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Formatted Message Allows the client to send a formatted chat message from its account to an XMPP recipient. A formatted message contains the message in plain text, Markdown and HTML. The recipient, depending on capabilities, will select the representation it handles best to present the message.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFormattedMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StanzaResult)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<StanzaResult>> SendFormattedMessageWithHttpInfoAsync(SendFormattedMessage sendFormattedMessage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendFormattedMessage' is set
            if (sendFormattedMessage == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendFormattedMessage' when calling XMPPApi->SendFormattedMessage");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendFormattedMessage;

            localVarRequestOptions.Operation = "XMPPApi.SendFormattedMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StanzaResult>("/Agent/Xmpp/SendFormattedMessage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendFormattedMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Presence Subscription Allows the client to send a presence subscription stanza from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceSubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PresenceSubscriptionResult</returns>
        public PresenceSubscriptionResult SendPresenceSubscription(SendPresenceSubscriptionBody sendPresenceSubscriptionBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<PresenceSubscriptionResult> localVarResponse = SendPresenceSubscriptionWithHttpInfo(sendPresenceSubscriptionBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Presence Subscription Allows the client to send a presence subscription stanza from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceSubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PresenceSubscriptionResult</returns>
        public TAG.Networking.Agent.Client.ApiResponse<PresenceSubscriptionResult> SendPresenceSubscriptionWithHttpInfo(SendPresenceSubscriptionBody sendPresenceSubscriptionBody, int operationIndex = 0)
        {
            // verify the required parameter 'sendPresenceSubscriptionBody' is set
            if (sendPresenceSubscriptionBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendPresenceSubscriptionBody' when calling XMPPApi->SendPresenceSubscription");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendPresenceSubscriptionBody;

            localVarRequestOptions.Operation = "XMPPApi.SendPresenceSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PresenceSubscriptionResult>("/Agent/Xmpp/SendPresenceSubscription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendPresenceSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Presence Subscription Allows the client to send a presence subscription stanza from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceSubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PresenceSubscriptionResult</returns>
        public async System.Threading.Tasks.Task<PresenceSubscriptionResult> SendPresenceSubscriptionAsync(SendPresenceSubscriptionBody sendPresenceSubscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<PresenceSubscriptionResult> localVarResponse = await SendPresenceSubscriptionWithHttpInfoAsync(sendPresenceSubscriptionBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Presence Subscription Allows the client to send a presence subscription stanza from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceSubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PresenceSubscriptionResult)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<PresenceSubscriptionResult>> SendPresenceSubscriptionWithHttpInfoAsync(SendPresenceSubscriptionBody sendPresenceSubscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendPresenceSubscriptionBody' is set
            if (sendPresenceSubscriptionBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendPresenceSubscriptionBody' when calling XMPPApi->SendPresenceSubscription");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendPresenceSubscriptionBody;

            localVarRequestOptions.Operation = "XMPPApi.SendPresenceSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PresenceSubscriptionResult>("/Agent/Xmpp/SendPresenceSubscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendPresenceSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Presence Unsubscription Allows the client to send a presence unsubscription stanza from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceUnsubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StanzaResult</returns>
        public StanzaResult SendPresenceUnsubscription(SendPresenceUnsubscriptionBody sendPresenceUnsubscriptionBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<StanzaResult> localVarResponse = SendPresenceUnsubscriptionWithHttpInfo(sendPresenceUnsubscriptionBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Presence Unsubscription Allows the client to send a presence unsubscription stanza from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceUnsubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StanzaResult</returns>
        public TAG.Networking.Agent.Client.ApiResponse<StanzaResult> SendPresenceUnsubscriptionWithHttpInfo(SendPresenceUnsubscriptionBody sendPresenceUnsubscriptionBody, int operationIndex = 0)
        {
            // verify the required parameter 'sendPresenceUnsubscriptionBody' is set
            if (sendPresenceUnsubscriptionBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendPresenceUnsubscriptionBody' when calling XMPPApi->SendPresenceUnsubscription");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendPresenceUnsubscriptionBody;

            localVarRequestOptions.Operation = "XMPPApi.SendPresenceUnsubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StanzaResult>("/Agent/Xmpp/SendPresenceUnsubscription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendPresenceUnsubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Presence Unsubscription Allows the client to send a presence unsubscription stanza from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceUnsubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StanzaResult</returns>
        public async System.Threading.Tasks.Task<StanzaResult> SendPresenceUnsubscriptionAsync(SendPresenceUnsubscriptionBody sendPresenceUnsubscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<StanzaResult> localVarResponse = await SendPresenceUnsubscriptionWithHttpInfoAsync(sendPresenceUnsubscriptionBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Presence Unsubscription Allows the client to send a presence unsubscription stanza from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPresenceUnsubscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StanzaResult)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<StanzaResult>> SendPresenceUnsubscriptionWithHttpInfoAsync(SendPresenceUnsubscriptionBody sendPresenceUnsubscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendPresenceUnsubscriptionBody' is set
            if (sendPresenceUnsubscriptionBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendPresenceUnsubscriptionBody' when calling XMPPApi->SendPresenceUnsubscription");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendPresenceUnsubscriptionBody;

            localVarRequestOptions.Operation = "XMPPApi.SendPresenceUnsubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StanzaResult>("/Agent/Xmpp/SendPresenceUnsubscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendPresenceUnsubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Subscription Accepted Allows the client to accept a presence subscription made to its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionAcceptedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendSubscriptionAcceptedResponse</returns>
        public SendSubscriptionAcceptedResponse SendSubscriptionAccepted(SendSubscriptionAcceptedBody sendSubscriptionAcceptedBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<SendSubscriptionAcceptedResponse> localVarResponse = SendSubscriptionAcceptedWithHttpInfo(sendSubscriptionAcceptedBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Subscription Accepted Allows the client to accept a presence subscription made to its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionAcceptedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendSubscriptionAcceptedResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<SendSubscriptionAcceptedResponse> SendSubscriptionAcceptedWithHttpInfo(SendSubscriptionAcceptedBody sendSubscriptionAcceptedBody, int operationIndex = 0)
        {
            // verify the required parameter 'sendSubscriptionAcceptedBody' is set
            if (sendSubscriptionAcceptedBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendSubscriptionAcceptedBody' when calling XMPPApi->SendSubscriptionAccepted");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendSubscriptionAcceptedBody;

            localVarRequestOptions.Operation = "XMPPApi.SendSubscriptionAccepted";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SendSubscriptionAcceptedResponse>("/Agent/Xmpp/SendSubscriptionAccepted", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendSubscriptionAccepted", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Subscription Accepted Allows the client to accept a presence subscription made to its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionAcceptedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendSubscriptionAcceptedResponse</returns>
        public async System.Threading.Tasks.Task<SendSubscriptionAcceptedResponse> SendSubscriptionAcceptedAsync(SendSubscriptionAcceptedBody sendSubscriptionAcceptedBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<SendSubscriptionAcceptedResponse> localVarResponse = await SendSubscriptionAcceptedWithHttpInfoAsync(sendSubscriptionAcceptedBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Subscription Accepted Allows the client to accept a presence subscription made to its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionAcceptedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendSubscriptionAcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<SendSubscriptionAcceptedResponse>> SendSubscriptionAcceptedWithHttpInfoAsync(SendSubscriptionAcceptedBody sendSubscriptionAcceptedBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendSubscriptionAcceptedBody' is set
            if (sendSubscriptionAcceptedBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendSubscriptionAcceptedBody' when calling XMPPApi->SendSubscriptionAccepted");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendSubscriptionAcceptedBody;

            localVarRequestOptions.Operation = "XMPPApi.SendSubscriptionAccepted";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SendSubscriptionAcceptedResponse>("/Agent/Xmpp/SendSubscriptionAccepted", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendSubscriptionAccepted", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Subscription Declined Allows the client to decline a presence subscription made to its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionDeclinedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StanzaResult</returns>
        public StanzaResult SendSubscriptionDeclined(SendSubscriptionDeclinedBody sendSubscriptionDeclinedBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<StanzaResult> localVarResponse = SendSubscriptionDeclinedWithHttpInfo(sendSubscriptionDeclinedBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Subscription Declined Allows the client to decline a presence subscription made to its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionDeclinedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StanzaResult</returns>
        public TAG.Networking.Agent.Client.ApiResponse<StanzaResult> SendSubscriptionDeclinedWithHttpInfo(SendSubscriptionDeclinedBody sendSubscriptionDeclinedBody, int operationIndex = 0)
        {
            // verify the required parameter 'sendSubscriptionDeclinedBody' is set
            if (sendSubscriptionDeclinedBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendSubscriptionDeclinedBody' when calling XMPPApi->SendSubscriptionDeclined");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendSubscriptionDeclinedBody;

            localVarRequestOptions.Operation = "XMPPApi.SendSubscriptionDeclined";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StanzaResult>("/Agent/Xmpp/SendSubscriptionDeclined", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendSubscriptionDeclined", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Subscription Declined Allows the client to decline a presence subscription made to its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionDeclinedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StanzaResult</returns>
        public async System.Threading.Tasks.Task<StanzaResult> SendSubscriptionDeclinedAsync(SendSubscriptionDeclinedBody sendSubscriptionDeclinedBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<StanzaResult> localVarResponse = await SendSubscriptionDeclinedWithHttpInfoAsync(sendSubscriptionDeclinedBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Subscription Declined Allows the client to decline a presence subscription made to its account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSubscriptionDeclinedBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StanzaResult)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<StanzaResult>> SendSubscriptionDeclinedWithHttpInfoAsync(SendSubscriptionDeclinedBody sendSubscriptionDeclinedBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendSubscriptionDeclinedBody' is set
            if (sendSubscriptionDeclinedBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendSubscriptionDeclinedBody' when calling XMPPApi->SendSubscriptionDeclined");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendSubscriptionDeclinedBody;

            localVarRequestOptions.Operation = "XMPPApi.SendSubscriptionDeclined";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StanzaResult>("/Agent/Xmpp/SendSubscriptionDeclined", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendSubscriptionDeclined", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Text Message Allows the client to send a plain text chat message from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTextMessageBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StanzaResult</returns>
        public StanzaResult SendTextMessage(SendTextMessageBody sendTextMessageBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<StanzaResult> localVarResponse = SendTextMessageWithHttpInfo(sendTextMessageBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Text Message Allows the client to send a plain text chat message from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTextMessageBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StanzaResult</returns>
        public TAG.Networking.Agent.Client.ApiResponse<StanzaResult> SendTextMessageWithHttpInfo(SendTextMessageBody sendTextMessageBody, int operationIndex = 0)
        {
            // verify the required parameter 'sendTextMessageBody' is set
            if (sendTextMessageBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendTextMessageBody' when calling XMPPApi->SendTextMessage");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendTextMessageBody;

            localVarRequestOptions.Operation = "XMPPApi.SendTextMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StanzaResult>("/Agent/Xmpp/SendTextMessage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTextMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Text Message Allows the client to send a plain text chat message from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTextMessageBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StanzaResult</returns>
        public async System.Threading.Tasks.Task<StanzaResult> SendTextMessageAsync(SendTextMessageBody sendTextMessageBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<StanzaResult> localVarResponse = await SendTextMessageWithHttpInfoAsync(sendTextMessageBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Text Message Allows the client to send a plain text chat message from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTextMessageBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StanzaResult)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<StanzaResult>> SendTextMessageWithHttpInfoAsync(SendTextMessageBody sendTextMessageBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendTextMessageBody' is set
            if (sendTextMessageBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendTextMessageBody' when calling XMPPApi->SendTextMessage");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendTextMessageBody;

            localVarRequestOptions.Operation = "XMPPApi.SendTextMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StanzaResult>("/Agent/Xmpp/SendTextMessage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTextMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send XML Message Allows the client to send a custom XML normal message from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendXmlMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StanzaResult</returns>
        public StanzaResult SendXmlMessage(SendXmlMessage sendXmlMessage, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<StanzaResult> localVarResponse = SendXmlMessageWithHttpInfo(sendXmlMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send XML Message Allows the client to send a custom XML normal message from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendXmlMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StanzaResult</returns>
        public TAG.Networking.Agent.Client.ApiResponse<StanzaResult> SendXmlMessageWithHttpInfo(SendXmlMessage sendXmlMessage, int operationIndex = 0)
        {
            // verify the required parameter 'sendXmlMessage' is set
            if (sendXmlMessage == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendXmlMessage' when calling XMPPApi->SendXmlMessage");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendXmlMessage;

            localVarRequestOptions.Operation = "XMPPApi.SendXmlMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StanzaResult>("/Agent/Xmpp/SendXmlMessage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendXmlMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send XML Message Allows the client to send a custom XML normal message from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendXmlMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StanzaResult</returns>
        public async System.Threading.Tasks.Task<StanzaResult> SendXmlMessageAsync(SendXmlMessage sendXmlMessage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<StanzaResult> localVarResponse = await SendXmlMessageWithHttpInfoAsync(sendXmlMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send XML Message Allows the client to send a custom XML normal message from its account to an XMPP recipient.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendXmlMessage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StanzaResult)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<StanzaResult>> SendXmlMessageWithHttpInfoAsync(SendXmlMessage sendXmlMessage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendXmlMessage' is set
            if (sendXmlMessage == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'sendXmlMessage' when calling XMPPApi->SendXmlMessage");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendXmlMessage;

            localVarRequestOptions.Operation = "XMPPApi.SendXmlMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StanzaResult>("/Agent/Xmpp/SendXmlMessage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendXmlMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Roster Item Sets information about a specific roster item for the account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RosterItem</returns>
        public RosterItem SetRosterItem(SetRosterItemBody setRosterItemBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<RosterItem> localVarResponse = SetRosterItemWithHttpInfo(setRosterItemBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Roster Item Sets information about a specific roster item for the account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RosterItem</returns>
        public TAG.Networking.Agent.Client.ApiResponse<RosterItem> SetRosterItemWithHttpInfo(SetRosterItemBody setRosterItemBody, int operationIndex = 0)
        {
            // verify the required parameter 'setRosterItemBody' is set
            if (setRosterItemBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'setRosterItemBody' when calling XMPPApi->SetRosterItem");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setRosterItemBody;

            localVarRequestOptions.Operation = "XMPPApi.SetRosterItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RosterItem>("/Agent/Xmpp/SetRosterItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRosterItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Roster Item Sets information about a specific roster item for the account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RosterItem</returns>
        public async System.Threading.Tasks.Task<RosterItem> SetRosterItemAsync(SetRosterItemBody setRosterItemBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<RosterItem> localVarResponse = await SetRosterItemWithHttpInfoAsync(setRosterItemBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Roster Item Sets information about a specific roster item for the account.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRosterItemBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RosterItem)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<RosterItem>> SetRosterItemWithHttpInfoAsync(SetRosterItemBody setRosterItemBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setRosterItemBody' is set
            if (setRosterItemBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'setRosterItemBody' when calling XMPPApi->SetRosterItem");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setRosterItemBody;

            localVarRequestOptions.Operation = "XMPPApi.SetRosterItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RosterItem>("/Agent/Xmpp/SetRosterItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRosterItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
