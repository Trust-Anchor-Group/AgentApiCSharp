/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TAG.Networking.Agent.Client;
using TAG.Networking.Agent.Model;

namespace TAG.Networking.Agent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes content from path
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteContent(string path, int operationIndex = 0);

        /// <summary>
        /// Deletes content from path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContentWithHttpInfo(string path, int operationIndex = 0);
        /// <summary>
        /// Get content from path
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentResponse</returns>
        ContentResponse GetContent(string path, int operationIndex = 0);

        /// <summary>
        /// Get content from path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentResponse</returns>
        ApiResponse<ContentResponse> GetContentWithHttpInfo(string path, int operationIndex = 0);
        /// <summary>
        /// Load Private XML
        /// </summary>
        /// <remarks>
        /// Loads private XML data from the server.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadPrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PrivateXml</returns>
        PrivateXml LoadPrivateXml(LoadPrivateXmlBody loadPrivateXmlBody, int operationIndex = 0);

        /// <summary>
        /// Load Private XML
        /// </summary>
        /// <remarks>
        /// Loads private XML data from the server.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadPrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PrivateXml</returns>
        ApiResponse<PrivateXml> LoadPrivateXmlWithHttpInfo(LoadPrivateXmlBody loadPrivateXmlBody, int operationIndex = 0);
        /// <summary>
        /// Upload new content using form data
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="contentId"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentResponse</returns>
        ContentResponse PostContent(System.IO.Stream content = default(System.IO.Stream), string contentId = default(string), string visibility = default(string), int operationIndex = 0);

        /// <summary>
        /// Upload new content using form data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="contentId"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentResponse</returns>
        ApiResponse<ContentResponse> PostContentWithHttpInfo(System.IO.Stream content = default(System.IO.Stream), string contentId = default(string), string visibility = default(string), int operationIndex = 0);
        /// <summary>
        /// Upload new content with Content ID
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the agent uploading the content</param>
        /// <param name="contentId">Content ID with file extension matching the Content-Type</param>
        /// <param name="xVisibility">Controls the visibility of the uploaded content</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentResponse</returns>
        ContentResponse PutContent(string username, string contentId, string xVisibility, System.IO.Stream body, int operationIndex = 0);

        /// <summary>
        /// Upload new content with Content ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the agent uploading the content</param>
        /// <param name="contentId">Content ID with file extension matching the Content-Type</param>
        /// <param name="xVisibility">Controls the visibility of the uploaded content</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentResponse</returns>
        ApiResponse<ContentResponse> PutContentWithHttpInfo(string username, string contentId, string xVisibility, System.IO.Stream body, int operationIndex = 0);
        /// <summary>
        /// Save Private XML
        /// </summary>
        /// <remarks>
        /// Saves private XML data to the server.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Stored</returns>
        Stored SavePrivateXml(SavePrivateXmlBody savePrivateXmlBody, int operationIndex = 0);

        /// <summary>
        /// Save Private XML
        /// </summary>
        /// <remarks>
        /// Saves private XML data to the server.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Stored</returns>
        ApiResponse<Stored> SavePrivateXmlWithHttpInfo(SavePrivateXmlBody savePrivateXmlBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deletes content from path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContentAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes content from path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContentWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get content from path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentResponse</returns>
        System.Threading.Tasks.Task<ContentResponse> GetContentAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get content from path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentResponse>> GetContentWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load Private XML
        /// </summary>
        /// <remarks>
        /// Loads private XML data from the server.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadPrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrivateXml</returns>
        System.Threading.Tasks.Task<PrivateXml> LoadPrivateXmlAsync(LoadPrivateXmlBody loadPrivateXmlBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load Private XML
        /// </summary>
        /// <remarks>
        /// Loads private XML data from the server.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadPrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrivateXml)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrivateXml>> LoadPrivateXmlWithHttpInfoAsync(LoadPrivateXmlBody loadPrivateXmlBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload new content using form data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="contentId"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentResponse</returns>
        System.Threading.Tasks.Task<ContentResponse> PostContentAsync(System.IO.Stream content = default(System.IO.Stream), string contentId = default(string), string visibility = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload new content using form data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="contentId"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentResponse>> PostContentWithHttpInfoAsync(System.IO.Stream content = default(System.IO.Stream), string contentId = default(string), string visibility = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload new content with Content ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the agent uploading the content</param>
        /// <param name="contentId">Content ID with file extension matching the Content-Type</param>
        /// <param name="xVisibility">Controls the visibility of the uploaded content</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentResponse</returns>
        System.Threading.Tasks.Task<ContentResponse> PutContentAsync(string username, string contentId, string xVisibility, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload new content with Content ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the agent uploading the content</param>
        /// <param name="contentId">Content ID with file extension matching the Content-Type</param>
        /// <param name="xVisibility">Controls the visibility of the uploaded content</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentResponse>> PutContentWithHttpInfoAsync(string username, string contentId, string xVisibility, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save Private XML
        /// </summary>
        /// <remarks>
        /// Saves private XML data to the server.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stored</returns>
        System.Threading.Tasks.Task<Stored> SavePrivateXmlAsync(SavePrivateXmlBody savePrivateXmlBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save Private XML
        /// </summary>
        /// <remarks>
        /// Saves private XML data to the server.
        /// </remarks>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stored)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stored>> SavePrivateXmlWithHttpInfoAsync(SavePrivateXmlBody savePrivateXmlBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageApi : IStorageApiSync, IStorageApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StorageApi : IStorageApi
    {
        private TAG.Networking.Agent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StorageApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StorageApi(string basePath)
        {
            this.Configuration = TAG.Networking.Agent.Client.Configuration.MergeConfigurations(
                TAG.Networking.Agent.Client.GlobalConfiguration.Instance,
                new TAG.Networking.Agent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TAG.Networking.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StorageApi(TAG.Networking.Agent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TAG.Networking.Agent.Client.Configuration.MergeConfigurations(
                TAG.Networking.Agent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TAG.Networking.Agent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TAG.Networking.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StorageApi(TAG.Networking.Agent.Client.ISynchronousClient client, TAG.Networking.Agent.Client.IAsynchronousClient asyncClient, TAG.Networking.Agent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TAG.Networking.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TAG.Networking.Agent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TAG.Networking.Agent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TAG.Networking.Agent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TAG.Networking.Agent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes content from path 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteContent(string path, int operationIndex = 0)
        {
            DeleteContentWithHttpInfo(path);
        }

        /// <summary>
        /// Deletes content from path 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TAG.Networking.Agent.Client.ApiResponse<Object> DeleteContentWithHttpInfo(string path, int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'path' when calling StorageApi->DeleteContent");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "StorageApi.DeleteContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/Agent/Storage/Content/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes content from path 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContentAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteContentWithHttpInfoAsync(path, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes content from path 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<Object>> DeleteContentWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'path' when calling StorageApi->DeleteContent");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "StorageApi.DeleteContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/Agent/Storage/Content/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get content from path 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentResponse</returns>
        public ContentResponse GetContent(string path, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<ContentResponse> localVarResponse = GetContentWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get content from path 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<ContentResponse> GetContentWithHttpInfo(string path, int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'path' when calling StorageApi->GetContent");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "StorageApi.GetContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ContentResponse>("/Agent/Storage/Content/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get content from path 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentResponse</returns>
        public async System.Threading.Tasks.Task<ContentResponse> GetContentAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<ContentResponse> localVarResponse = await GetContentWithHttpInfoAsync(path, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get content from path 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the uploaded content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<ContentResponse>> GetContentWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'path' when calling StorageApi->GetContent");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "StorageApi.GetContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContentResponse>("/Agent/Storage/Content/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Private XML Loads private XML data from the server.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadPrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PrivateXml</returns>
        public PrivateXml LoadPrivateXml(LoadPrivateXmlBody loadPrivateXmlBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<PrivateXml> localVarResponse = LoadPrivateXmlWithHttpInfo(loadPrivateXmlBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Private XML Loads private XML data from the server.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadPrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PrivateXml</returns>
        public TAG.Networking.Agent.Client.ApiResponse<PrivateXml> LoadPrivateXmlWithHttpInfo(LoadPrivateXmlBody loadPrivateXmlBody, int operationIndex = 0)
        {
            // verify the required parameter 'loadPrivateXmlBody' is set
            if (loadPrivateXmlBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'loadPrivateXmlBody' when calling StorageApi->LoadPrivateXml");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = loadPrivateXmlBody;

            localVarRequestOptions.Operation = "StorageApi.LoadPrivateXml";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PrivateXml>("/Agent/Storage/LoadPrivateXml", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadPrivateXml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Private XML Loads private XML data from the server.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadPrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrivateXml</returns>
        public async System.Threading.Tasks.Task<PrivateXml> LoadPrivateXmlAsync(LoadPrivateXmlBody loadPrivateXmlBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<PrivateXml> localVarResponse = await LoadPrivateXmlWithHttpInfoAsync(loadPrivateXmlBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Private XML Loads private XML data from the server.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadPrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrivateXml)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<PrivateXml>> LoadPrivateXmlWithHttpInfoAsync(LoadPrivateXmlBody loadPrivateXmlBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loadPrivateXmlBody' is set
            if (loadPrivateXmlBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'loadPrivateXmlBody' when calling StorageApi->LoadPrivateXml");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = loadPrivateXmlBody;

            localVarRequestOptions.Operation = "StorageApi.LoadPrivateXml";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PrivateXml>("/Agent/Storage/LoadPrivateXml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadPrivateXml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload new content using form data 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="contentId"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentResponse</returns>
        public ContentResponse PostContent(System.IO.Stream content = default(System.IO.Stream), string contentId = default(string), string visibility = default(string), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<ContentResponse> localVarResponse = PostContentWithHttpInfo(content, contentId, visibility);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload new content using form data 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="contentId"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<ContentResponse> PostContentWithHttpInfo(System.IO.Stream content = default(System.IO.Stream), string contentId = default(string), string visibility = default(string), int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (content != null)
            {
                localVarRequestOptions.FileParameters.Add("Content", content);
            }
            if (contentId != null)
            {
                localVarRequestOptions.FormParameters.Add("ContentId", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(contentId)); // form parameter
            }
            if (visibility != null)
            {
                localVarRequestOptions.FormParameters.Add("Visibility", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(visibility)); // form parameter
            }

            localVarRequestOptions.Operation = "StorageApi.PostContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ContentResponse>("/Agent/Storage/Content", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload new content using form data 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="contentId"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentResponse</returns>
        public async System.Threading.Tasks.Task<ContentResponse> PostContentAsync(System.IO.Stream content = default(System.IO.Stream), string contentId = default(string), string visibility = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<ContentResponse> localVarResponse = await PostContentWithHttpInfoAsync(content, contentId, visibility, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload new content using form data 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="contentId"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<ContentResponse>> PostContentWithHttpInfoAsync(System.IO.Stream content = default(System.IO.Stream), string contentId = default(string), string visibility = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (content != null)
            {
                localVarRequestOptions.FileParameters.Add("Content", content);
            }
            if (contentId != null)
            {
                localVarRequestOptions.FormParameters.Add("ContentId", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(contentId)); // form parameter
            }
            if (visibility != null)
            {
                localVarRequestOptions.FormParameters.Add("Visibility", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(visibility)); // form parameter
            }

            localVarRequestOptions.Operation = "StorageApi.PostContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContentResponse>("/Agent/Storage/Content", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload new content with Content ID 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the agent uploading the content</param>
        /// <param name="contentId">Content ID with file extension matching the Content-Type</param>
        /// <param name="xVisibility">Controls the visibility of the uploaded content</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentResponse</returns>
        public ContentResponse PutContent(string username, string contentId, string xVisibility, System.IO.Stream body, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<ContentResponse> localVarResponse = PutContentWithHttpInfo(username, contentId, xVisibility, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload new content with Content ID 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the agent uploading the content</param>
        /// <param name="contentId">Content ID with file extension matching the Content-Type</param>
        /// <param name="xVisibility">Controls the visibility of the uploaded content</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentResponse</returns>
        public TAG.Networking.Agent.Client.ApiResponse<ContentResponse> PutContentWithHttpInfo(string username, string contentId, string xVisibility, System.IO.Stream body, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'username' when calling StorageApi->PutContent");
            }

            // verify the required parameter 'contentId' is set
            if (contentId == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'contentId' when calling StorageApi->PutContent");
            }

            // verify the required parameter 'xVisibility' is set
            if (xVisibility == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'xVisibility' when calling StorageApi->PutContent");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'body' when calling StorageApi->PutContent");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("contentId", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(contentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Visibility", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(xVisibility)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "StorageApi.PutContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ContentResponse>("/Agent/Storage/Content/{username}/{contentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload new content with Content ID 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the agent uploading the content</param>
        /// <param name="contentId">Content ID with file extension matching the Content-Type</param>
        /// <param name="xVisibility">Controls the visibility of the uploaded content</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentResponse</returns>
        public async System.Threading.Tasks.Task<ContentResponse> PutContentAsync(string username, string contentId, string xVisibility, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<ContentResponse> localVarResponse = await PutContentWithHttpInfoAsync(username, contentId, xVisibility, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload new content with Content ID 
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the agent uploading the content</param>
        /// <param name="contentId">Content ID with file extension matching the Content-Type</param>
        /// <param name="xVisibility">Controls the visibility of the uploaded content</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentResponse)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<ContentResponse>> PutContentWithHttpInfoAsync(string username, string contentId, string xVisibility, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'username' when calling StorageApi->PutContent");
            }

            // verify the required parameter 'contentId' is set
            if (contentId == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'contentId' when calling StorageApi->PutContent");
            }

            // verify the required parameter 'xVisibility' is set
            if (xVisibility == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'xVisibility' when calling StorageApi->PutContent");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'body' when calling StorageApi->PutContent");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("contentId", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(contentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Visibility", TAG.Networking.Agent.Client.ClientUtils.ParameterToString(xVisibility)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "StorageApi.PutContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ContentResponse>("/Agent/Storage/Content/{username}/{contentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Private XML Saves private XML data to the server.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Stored</returns>
        public Stored SavePrivateXml(SavePrivateXmlBody savePrivateXmlBody, int operationIndex = 0)
        {
            TAG.Networking.Agent.Client.ApiResponse<Stored> localVarResponse = SavePrivateXmlWithHttpInfo(savePrivateXmlBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Private XML Saves private XML data to the server.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Stored</returns>
        public TAG.Networking.Agent.Client.ApiResponse<Stored> SavePrivateXmlWithHttpInfo(SavePrivateXmlBody savePrivateXmlBody, int operationIndex = 0)
        {
            // verify the required parameter 'savePrivateXmlBody' is set
            if (savePrivateXmlBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'savePrivateXmlBody' when calling StorageApi->SavePrivateXml");
            }

            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = savePrivateXmlBody;

            localVarRequestOptions.Operation = "StorageApi.SavePrivateXml";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Stored>("/Agent/Storage/SavePrivateXml", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SavePrivateXml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Private XML Saves private XML data to the server.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stored</returns>
        public async System.Threading.Tasks.Task<Stored> SavePrivateXmlAsync(SavePrivateXmlBody savePrivateXmlBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TAG.Networking.Agent.Client.ApiResponse<Stored> localVarResponse = await SavePrivateXmlWithHttpInfoAsync(savePrivateXmlBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Private XML Saves private XML data to the server.
        /// </summary>
        /// <exception cref="TAG.Networking.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePrivateXmlBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stored)</returns>
        public async System.Threading.Tasks.Task<TAG.Networking.Agent.Client.ApiResponse<Stored>> SavePrivateXmlWithHttpInfoAsync(SavePrivateXmlBody savePrivateXmlBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'savePrivateXmlBody' is set
            if (savePrivateXmlBody == null)
            {
                throw new TAG.Networking.Agent.Client.ApiException(400, "Missing required parameter 'savePrivateXmlBody' when calling StorageApi->SavePrivateXml");
            }


            TAG.Networking.Agent.Client.RequestOptions localVarRequestOptions = new TAG.Networking.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain"
            };

            var localVarContentType = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TAG.Networking.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = savePrivateXmlBody;

            localVarRequestOptions.Operation = "StorageApi.SavePrivateXml";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Stored>("/Agent/Storage/SavePrivateXml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SavePrivateXml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
