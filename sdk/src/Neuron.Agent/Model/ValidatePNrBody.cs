/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Neuron.Agent.Client.OpenAPIDateConverter;

namespace Neuron.Agent.Model
{
    /// <summary>
    /// ValidatePNrBody
    /// </summary>
    [DataContract(Name = "ValidatePNrBody")]
    public partial class ValidatePNrBody : IEquatable<ValidatePNrBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatePNrBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValidatePNrBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatePNrBody" /> class.
        /// </summary>
        /// <param name="countryCode">ISO 3166-1 country code. (required).</param>
        /// <param name="pnr">Personal number entry to validate. (required).</param>
        public ValidatePNrBody(string countryCode = default(string), string pnr = default(string))
        {
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for ValidatePNrBody and cannot be null");
            }
            this.CountryCode = countryCode;
            // to ensure "pnr" is required (not null)
            if (pnr == null)
            {
                throw new ArgumentNullException("pnr is a required property for ValidatePNrBody and cannot be null");
            }
            this.Pnr = pnr;
        }

        /// <summary>
        /// ISO 3166-1 country code.
        /// </summary>
        /// <value>ISO 3166-1 country code.</value>
        [DataMember(Name = "countryCode", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Personal number entry to validate.
        /// </summary>
        /// <value>Personal number entry to validate.</value>
        [DataMember(Name = "pnr", IsRequired = true, EmitDefaultValue = true)]
        public string Pnr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidatePNrBody {\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Pnr: ").Append(Pnr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidatePNrBody);
        }

        /// <summary>
        /// Returns true if ValidatePNrBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidatePNrBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidatePNrBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.Pnr == input.Pnr ||
                    (this.Pnr != null &&
                    this.Pnr.Equals(input.Pnr))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                if (this.Pnr != null)
                {
                    hashCode = (hashCode * 59) + this.Pnr.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
