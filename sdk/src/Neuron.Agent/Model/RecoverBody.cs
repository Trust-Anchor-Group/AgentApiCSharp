/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Neuron.Agent.Client.OpenAPIDateConverter;

namespace Neuron.Agent.Model
{
    /// <summary>
    /// RecoverBody
    /// </summary>
    [DataContract(Name = "RecoverBody")]
    public partial class RecoverBody : IEquatable<RecoverBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecoverBody" /> class.
        /// </summary>
        /// <param name="userName">The user name of the account..</param>
        /// <param name="eMail">The e-mail address of the account..</param>
        /// <param name="country">The country of the account..</param>
        /// <param name="phoneNr">The phone number of the account..</param>
        public RecoverBody(string userName = default(string), string eMail = default(string), string country = default(string), string phoneNr = default(string))
        {
            this.UserName = userName;
            this.EMail = eMail;
            this.Country = country;
            this.PhoneNr = phoneNr;
        }

        /// <summary>
        /// The user name of the account.
        /// </summary>
        /// <value>The user name of the account.</value>
        [DataMember(Name = "userName", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// The e-mail address of the account.
        /// </summary>
        /// <value>The e-mail address of the account.</value>
        [DataMember(Name = "eMail", EmitDefaultValue = false)]
        public string EMail { get; set; }

        /// <summary>
        /// The country of the account.
        /// </summary>
        /// <value>The country of the account.</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// The phone number of the account.
        /// </summary>
        /// <value>The phone number of the account.</value>
        [DataMember(Name = "phoneNr", EmitDefaultValue = false)]
        public string PhoneNr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecoverBody {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  EMail: ").Append(EMail).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PhoneNr: ").Append(PhoneNr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecoverBody);
        }

        /// <summary>
        /// Returns true if RecoverBody instances are equal
        /// </summary>
        /// <param name="input">Instance of RecoverBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecoverBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.EMail == input.EMail ||
                    (this.EMail != null &&
                    this.EMail.Equals(input.EMail))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.PhoneNr == input.PhoneNr ||
                    (this.PhoneNr != null &&
                    this.PhoneNr.Equals(input.PhoneNr))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.EMail != null)
                {
                    hashCode = (hashCode * 59) + this.EMail.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.PhoneNr != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNr.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
