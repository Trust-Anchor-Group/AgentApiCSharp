/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Neuron.Agent.Client.OpenAPIDateConverter;

namespace Neuron.Agent.Model
{
    /// <summary>
    /// RosterItem
    /// </summary>
    [DataContract(Name = "RosterItem")]
    public partial class RosterItem : IEquatable<RosterItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RosterItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RosterItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RosterItem" /> class.
        /// </summary>
        /// <param name="bareJid">The bare Jabber ID of the roster item. (required).</param>
        /// <param name="pendingSubscription">Indicates if there is a pending subscription. (required).</param>
        /// <param name="status">The status of the roster item. (required).</param>
        /// <param name="name">The name of the roster item. (required).</param>
        /// <param name="groups">The groups that the roster item belongs to. (required).</param>
        public RosterItem(string bareJid = default(string), bool pendingSubscription = default(bool), string status = default(string), string name = default(string), List<string> groups = default(List<string>))
        {
            // to ensure "bareJid" is required (not null)
            if (bareJid == null)
            {
                throw new ArgumentNullException("bareJid is a required property for RosterItem and cannot be null");
            }
            this.BareJid = bareJid;
            this.PendingSubscription = pendingSubscription;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for RosterItem and cannot be null");
            }
            this.Status = status;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RosterItem and cannot be null");
            }
            this.Name = name;
            // to ensure "groups" is required (not null)
            if (groups == null)
            {
                throw new ArgumentNullException("groups is a required property for RosterItem and cannot be null");
            }
            this.Groups = groups;
        }

        /// <summary>
        /// The bare Jabber ID of the roster item.
        /// </summary>
        /// <value>The bare Jabber ID of the roster item.</value>
        [DataMember(Name = "bareJid", IsRequired = true, EmitDefaultValue = true)]
        public string BareJid { get; set; }

        /// <summary>
        /// Indicates if there is a pending subscription.
        /// </summary>
        /// <value>Indicates if there is a pending subscription.</value>
        [DataMember(Name = "pendingSubscription", IsRequired = true, EmitDefaultValue = true)]
        public bool PendingSubscription { get; set; }

        /// <summary>
        /// The status of the roster item.
        /// </summary>
        /// <value>The status of the roster item.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// The name of the roster item.
        /// </summary>
        /// <value>The name of the roster item.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The groups that the roster item belongs to.
        /// </summary>
        /// <value>The groups that the roster item belongs to.</value>
        [DataMember(Name = "Groups", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Groups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RosterItem {\n");
            sb.Append("  BareJid: ").Append(BareJid).Append("\n");
            sb.Append("  PendingSubscription: ").Append(PendingSubscription).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RosterItem);
        }

        /// <summary>
        /// Returns true if RosterItem instances are equal
        /// </summary>
        /// <param name="input">Instance of RosterItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RosterItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BareJid == input.BareJid ||
                    (this.BareJid != null &&
                    this.BareJid.Equals(input.BareJid))
                ) && 
                (
                    this.PendingSubscription == input.PendingSubscription ||
                    this.PendingSubscription.Equals(input.PendingSubscription)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BareJid != null)
                {
                    hashCode = (hashCode * 59) + this.BareJid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PendingSubscription.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Groups != null)
                {
                    hashCode = (hashCode * 59) + this.Groups.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
