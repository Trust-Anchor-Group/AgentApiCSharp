/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Neuron.Agent.Client.OpenAPIDateConverter;

namespace Neuron.Agent.Model
{
    /// <summary>
    /// IdentityJsonPropertyInner
    /// </summary>
    [DataContract(Name = "IdentityJson_property_inner")]
    public partial class IdentityJsonPropertyInner : Dictionary<String, Object>, IEquatable<IdentityJsonPropertyInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityJsonPropertyInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdentityJsonPropertyInner()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityJsonPropertyInner" /> class.
        /// </summary>
        /// <param name="name">The local name of the property. (required).</param>
        /// <param name="ns">The namespace of the property. (required).</param>
        /// <param name="xmlns">The XML namespace of the property..</param>
        public IdentityJsonPropertyInner(string name = default(string), string ns = default(string), string xmlns = default(string)) : base()
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for IdentityJsonPropertyInner and cannot be null");
            }
            this.Name = name;
            // to ensure "ns" is required (not null)
            if (ns == null)
            {
                throw new ArgumentNullException("ns is a required property for IdentityJsonPropertyInner and cannot be null");
            }
            this.Ns = ns;
            this.Xmlns = xmlns;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The local name of the property.
        /// </summary>
        /// <value>The local name of the property.</value>
        [DataMember(Name = "__name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The namespace of the property.
        /// </summary>
        /// <value>The namespace of the property.</value>
        [DataMember(Name = "__ns", IsRequired = true, EmitDefaultValue = true)]
        public string Ns { get; set; }

        /// <summary>
        /// The XML namespace of the property.
        /// </summary>
        /// <value>The XML namespace of the property.</value>
        [DataMember(Name = "xmlns", EmitDefaultValue = false)]
        public string Xmlns { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentityJsonPropertyInner {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ns: ").Append(Ns).Append("\n");
            sb.Append("  Xmlns: ").Append(Xmlns).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityJsonPropertyInner);
        }

        /// <summary>
        /// Returns true if IdentityJsonPropertyInner instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityJsonPropertyInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityJsonPropertyInner input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.Ns == input.Ns ||
                    (this.Ns != null &&
                    this.Ns.Equals(input.Ns))
                ) && base.Equals(input) && 
                (
                    this.Xmlns == input.Xmlns ||
                    (this.Xmlns != null &&
                    this.Xmlns.Equals(input.Xmlns))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Ns != null)
                {
                    hashCode = (hashCode * 59) + this.Ns.GetHashCode();
                }
                if (this.Xmlns != null)
                {
                    hashCode = (hashCode * 59) + this.Xmlns.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
