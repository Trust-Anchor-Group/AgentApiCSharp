/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Neuron.Agent.Client.OpenAPIDateConverter;

namespace Neuron.Agent.Model
{
    /// <summary>
    /// The signature object of the server.
    /// </summary>
    [DataContract(Name = "IdentityJson_serverSignature")]
    public partial class IdentityJsonServerSignature : IEquatable<IdentityJsonServerSignature>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityJsonServerSignature" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdentityJsonServerSignature() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityJsonServerSignature" /> class.
        /// </summary>
        /// <param name="name">The local name of the signature. (required).</param>
        /// <param name="ns">The namespace of the signature. (required).</param>
        /// <param name="value">The signature. (required).</param>
        public IdentityJsonServerSignature(string name = default(string), string ns = default(string), string value = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for IdentityJsonServerSignature and cannot be null");
            }
            this.Name = name;
            // to ensure "ns" is required (not null)
            if (ns == null)
            {
                throw new ArgumentNullException("ns is a required property for IdentityJsonServerSignature and cannot be null");
            }
            this.Ns = ns;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for IdentityJsonServerSignature and cannot be null");
            }
            this.Value = value;
        }

        /// <summary>
        /// The local name of the signature.
        /// </summary>
        /// <value>The local name of the signature.</value>
        [DataMember(Name = "__name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The namespace of the signature.
        /// </summary>
        /// <value>The namespace of the signature.</value>
        [DataMember(Name = "__ns", IsRequired = true, EmitDefaultValue = true)]
        public string Ns { get; set; }

        /// <summary>
        /// The signature.
        /// </summary>
        /// <value>The signature.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentityJsonServerSignature {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ns: ").Append(Ns).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityJsonServerSignature);
        }

        /// <summary>
        /// Returns true if IdentityJsonServerSignature instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityJsonServerSignature to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityJsonServerSignature input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Ns == input.Ns ||
                    (this.Ns != null &&
                    this.Ns.Equals(input.Ns))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Ns != null)
                {
                    hashCode = (hashCode * 59) + this.Ns.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
