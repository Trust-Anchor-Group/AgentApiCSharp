/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Neuron.Agent.Client.OpenAPIDateConverter;

namespace Neuron.Agent.Model
{
    /// <summary>
    /// AddTextNoteBody
    /// </summary>
    [DataContract(Name = "AddTextNoteBody")]
    public partial class AddTextNoteBody : IEquatable<AddTextNoteBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddTextNoteBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddTextNoteBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddTextNoteBody" /> class.
        /// </summary>
        /// <param name="tokenId">Identity of token to add text note to. (required).</param>
        /// <param name="note">Text note to add. (required).</param>
        /// <param name="personal">If the note is personal or note. Personal notes are deleted when the token changes owner. (required).</param>
        public AddTextNoteBody(string tokenId = default(string), string note = default(string), bool personal = default(bool))
        {
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
            {
                throw new ArgumentNullException("tokenId is a required property for AddTextNoteBody and cannot be null");
            }
            this.TokenId = tokenId;
            // to ensure "note" is required (not null)
            if (note == null)
            {
                throw new ArgumentNullException("note is a required property for AddTextNoteBody and cannot be null");
            }
            this.Note = note;
            this.Personal = personal;
        }

        /// <summary>
        /// Identity of token to add text note to.
        /// </summary>
        /// <value>Identity of token to add text note to.</value>
        [DataMember(Name = "tokenId", IsRequired = true, EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// Text note to add.
        /// </summary>
        /// <value>Text note to add.</value>
        [DataMember(Name = "note", IsRequired = true, EmitDefaultValue = true)]
        public string Note { get; set; }

        /// <summary>
        /// If the note is personal or note. Personal notes are deleted when the token changes owner.
        /// </summary>
        /// <value>If the note is personal or note. Personal notes are deleted when the token changes owner.</value>
        [DataMember(Name = "personal", IsRequired = true, EmitDefaultValue = true)]
        public bool Personal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddTextNoteBody {\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Personal: ").Append(Personal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddTextNoteBody);
        }

        /// <summary>
        /// Returns true if AddTextNoteBody instances are equal
        /// </summary>
        /// <param name="input">Instance of AddTextNoteBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddTextNoteBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Personal == input.Personal ||
                    this.Personal.Equals(input.Personal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Personal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
