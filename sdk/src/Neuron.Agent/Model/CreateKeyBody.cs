/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Neuron.Agent.Client.OpenAPIDateConverter;

namespace Neuron.Agent.Model
{
    /// <summary>
    /// CreateKeyBody
    /// </summary>
    [DataContract(Name = "CreateKeyBody")]
    public partial class CreateKeyBody : IEquatable<CreateKeyBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateKeyBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateKeyBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateKeyBody" /> class.
        /// </summary>
        /// <param name="localName">The local name of the key. (required).</param>
        /// <param name="varNamespace">The namespace of the key. (required).</param>
        /// <param name="id">The ID of the key. (required).</param>
        /// <param name="nonce">A unique nonce for this request. (required).</param>
        /// <param name="keySignature">The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature.  (required).</param>
        /// <param name="requestSignature">The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature.  (required).</param>
        public CreateKeyBody(string localName = default(string), string varNamespace = default(string), string id = default(string), string nonce = default(string), string keySignature = default(string), string requestSignature = default(string))
        {
            // to ensure "localName" is required (not null)
            if (localName == null)
            {
                throw new ArgumentNullException("localName is a required property for CreateKeyBody and cannot be null");
            }
            this.LocalName = localName;
            // to ensure "varNamespace" is required (not null)
            if (varNamespace == null)
            {
                throw new ArgumentNullException("varNamespace is a required property for CreateKeyBody and cannot be null");
            }
            this.VarNamespace = varNamespace;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CreateKeyBody and cannot be null");
            }
            this.Id = id;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for CreateKeyBody and cannot be null");
            }
            this.Nonce = nonce;
            // to ensure "keySignature" is required (not null)
            if (keySignature == null)
            {
                throw new ArgumentNullException("keySignature is a required property for CreateKeyBody and cannot be null");
            }
            this.KeySignature = keySignature;
            // to ensure "requestSignature" is required (not null)
            if (requestSignature == null)
            {
                throw new ArgumentNullException("requestSignature is a required property for CreateKeyBody and cannot be null");
            }
            this.RequestSignature = requestSignature;
        }

        /// <summary>
        /// The local name of the key.
        /// </summary>
        /// <value>The local name of the key.</value>
        [DataMember(Name = "localName", IsRequired = true, EmitDefaultValue = true)]
        public string LocalName { get; set; }

        /// <summary>
        /// The namespace of the key.
        /// </summary>
        /// <value>The namespace of the key.</value>
        [DataMember(Name = "namespace", IsRequired = true, EmitDefaultValue = true)]
        public string VarNamespace { get; set; }

        /// <summary>
        /// The ID of the key.
        /// </summary>
        /// <value>The ID of the key.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// A unique nonce for this request.
        /// </summary>
        /// <value>A unique nonce for this request.</value>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public string Nonce { get; set; }

        /// <summary>
        /// The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature. 
        /// </summary>
        /// <value>The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature. </value>
        [DataMember(Name = "keySignature", IsRequired = true, EmitDefaultValue = true)]
        public string KeySignature { get; set; }

        /// <summary>
        /// The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature. 
        /// </summary>
        /// <value>The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature. </value>
        [DataMember(Name = "requestSignature", IsRequired = true, EmitDefaultValue = true)]
        public string RequestSignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateKeyBody {\n");
            sb.Append("  LocalName: ").Append(LocalName).Append("\n");
            sb.Append("  VarNamespace: ").Append(VarNamespace).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  KeySignature: ").Append(KeySignature).Append("\n");
            sb.Append("  RequestSignature: ").Append(RequestSignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateKeyBody);
        }

        /// <summary>
        /// Returns true if CreateKeyBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateKeyBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateKeyBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LocalName == input.LocalName ||
                    (this.LocalName != null &&
                    this.LocalName.Equals(input.LocalName))
                ) && 
                (
                    this.VarNamespace == input.VarNamespace ||
                    (this.VarNamespace != null &&
                    this.VarNamespace.Equals(input.VarNamespace))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.KeySignature == input.KeySignature ||
                    (this.KeySignature != null &&
                    this.KeySignature.Equals(input.KeySignature))
                ) && 
                (
                    this.RequestSignature == input.RequestSignature ||
                    (this.RequestSignature != null &&
                    this.RequestSignature.Equals(input.RequestSignature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocalName != null)
                {
                    hashCode = (hashCode * 59) + this.LocalName.GetHashCode();
                }
                if (this.VarNamespace != null)
                {
                    hashCode = (hashCode * 59) + this.VarNamespace.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                if (this.KeySignature != null)
                {
                    hashCode = (hashCode * 59) + this.KeySignature.GetHashCode();
                }
                if (this.RequestSignature != null)
                {
                    hashCode = (hashCode * 59) + this.RequestSignature.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
