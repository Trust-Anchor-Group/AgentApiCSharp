/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Neuron.Agent.Client;
using Neuron.Agent.Model;

namespace Neuron.Agent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICryptoApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Key
        /// </summary>
        /// <remarks>
        /// Allows the client to create a cryptographic key on the server, and protect it with a password. The key will be stored encrypted on the server, protected with the key password. The creation of a key will require the user to provide the account password again. 
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Stored</returns>
        Stored CreateKey(CreateKeyBody createKeyBody = default(CreateKeyBody), int operationIndex = 0);

        /// <summary>
        /// Create Key
        /// </summary>
        /// <remarks>
        /// Allows the client to create a cryptographic key on the server, and protect it with a password. The key will be stored encrypted on the server, protected with the key password. The creation of a key will require the user to provide the account password again. 
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Stored</returns>
        ApiResponse<Stored> CreateKeyWithHttpInfo(CreateKeyBody createKeyBody = default(CreateKeyBody), int operationIndex = 0);
        /// <summary>
        /// Get Algorithms
        /// </summary>
        /// <remarks>
        /// Gets a list of algorithms supported by the server.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlgorithmsResult</returns>
        AlgorithmsResult GetAlgorithms(Object body = default(Object), int operationIndex = 0);

        /// <summary>
        /// Get Algorithms
        /// </summary>
        /// <remarks>
        /// Gets a list of algorithms supported by the server.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlgorithmsResult</returns>
        ApiResponse<AlgorithmsResult> GetAlgorithmsWithHttpInfo(Object body = default(Object), int operationIndex = 0);
        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// Gets the public key of a key pair.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPublicKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPublicKeyResponse</returns>
        GetPublicKeyResponse GetPublicKey(GetPublicKeyBody getPublicKeyBody = default(GetPublicKeyBody), int operationIndex = 0);

        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// Gets the public key of a key pair.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPublicKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPublicKeyResponse</returns>
        ApiResponse<GetPublicKeyResponse> GetPublicKeyWithHttpInfo(GetPublicKeyBody getPublicKeyBody = default(GetPublicKeyBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICryptoApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Key
        /// </summary>
        /// <remarks>
        /// Allows the client to create a cryptographic key on the server, and protect it with a password. The key will be stored encrypted on the server, protected with the key password. The creation of a key will require the user to provide the account password again. 
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stored</returns>
        System.Threading.Tasks.Task<Stored> CreateKeyAsync(CreateKeyBody createKeyBody = default(CreateKeyBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Key
        /// </summary>
        /// <remarks>
        /// Allows the client to create a cryptographic key on the server, and protect it with a password. The key will be stored encrypted on the server, protected with the key password. The creation of a key will require the user to provide the account password again. 
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stored)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stored>> CreateKeyWithHttpInfoAsync(CreateKeyBody createKeyBody = default(CreateKeyBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Algorithms
        /// </summary>
        /// <remarks>
        /// Gets a list of algorithms supported by the server.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlgorithmsResult</returns>
        System.Threading.Tasks.Task<AlgorithmsResult> GetAlgorithmsAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Algorithms
        /// </summary>
        /// <remarks>
        /// Gets a list of algorithms supported by the server.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlgorithmsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlgorithmsResult>> GetAlgorithmsWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// Gets the public key of a key pair.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPublicKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPublicKeyResponse</returns>
        System.Threading.Tasks.Task<GetPublicKeyResponse> GetPublicKeyAsync(GetPublicKeyBody getPublicKeyBody = default(GetPublicKeyBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// Gets the public key of a key pair.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPublicKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPublicKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPublicKeyResponse>> GetPublicKeyWithHttpInfoAsync(GetPublicKeyBody getPublicKeyBody = default(GetPublicKeyBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICryptoApi : ICryptoApiSync, ICryptoApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CryptoApi : ICryptoApi
    {
        private Neuron.Agent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CryptoApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CryptoApi(string basePath)
        {
            this.Configuration = Neuron.Agent.Client.Configuration.MergeConfigurations(
                Neuron.Agent.Client.GlobalConfiguration.Instance,
                new Neuron.Agent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Neuron.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Neuron.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Neuron.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CryptoApi(Neuron.Agent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Neuron.Agent.Client.Configuration.MergeConfigurations(
                Neuron.Agent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Neuron.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Neuron.Agent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Neuron.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CryptoApi(Neuron.Agent.Client.ISynchronousClient client, Neuron.Agent.Client.IAsynchronousClient asyncClient, Neuron.Agent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Neuron.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Neuron.Agent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Neuron.Agent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Neuron.Agent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Neuron.Agent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Key Allows the client to create a cryptographic key on the server, and protect it with a password. The key will be stored encrypted on the server, protected with the key password. The creation of a key will require the user to provide the account password again. 
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Stored</returns>
        public Stored CreateKey(CreateKeyBody createKeyBody = default(CreateKeyBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.ApiResponse<Stored> localVarResponse = CreateKeyWithHttpInfo(createKeyBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Key Allows the client to create a cryptographic key on the server, and protect it with a password. The key will be stored encrypted on the server, protected with the key password. The creation of a key will require the user to provide the account password again. 
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Stored</returns>
        public Neuron.Agent.Client.ApiResponse<Stored> CreateKeyWithHttpInfo(CreateKeyBody createKeyBody = default(CreateKeyBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createKeyBody;

            localVarRequestOptions.Operation = "CryptoApi.CreateKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Stored>("/Agent/Crypto/CreateKey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Key Allows the client to create a cryptographic key on the server, and protect it with a password. The key will be stored encrypted on the server, protected with the key password. The creation of a key will require the user to provide the account password again. 
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stored</returns>
        public async System.Threading.Tasks.Task<Stored> CreateKeyAsync(CreateKeyBody createKeyBody = default(CreateKeyBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Neuron.Agent.Client.ApiResponse<Stored> localVarResponse = await CreateKeyWithHttpInfoAsync(createKeyBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Key Allows the client to create a cryptographic key on the server, and protect it with a password. The key will be stored encrypted on the server, protected with the key password. The creation of a key will require the user to provide the account password again. 
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stored)</returns>
        public async System.Threading.Tasks.Task<Neuron.Agent.Client.ApiResponse<Stored>> CreateKeyWithHttpInfoAsync(CreateKeyBody createKeyBody = default(CreateKeyBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createKeyBody;

            localVarRequestOptions.Operation = "CryptoApi.CreateKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Stored>("/Agent/Crypto/CreateKey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Algorithms Gets a list of algorithms supported by the server.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlgorithmsResult</returns>
        public AlgorithmsResult GetAlgorithms(Object body = default(Object), int operationIndex = 0)
        {
            Neuron.Agent.Client.ApiResponse<AlgorithmsResult> localVarResponse = GetAlgorithmsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Algorithms Gets a list of algorithms supported by the server.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlgorithmsResult</returns>
        public Neuron.Agent.Client.ApiResponse<AlgorithmsResult> GetAlgorithmsWithHttpInfo(Object body = default(Object), int operationIndex = 0)
        {
            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "CryptoApi.GetAlgorithms";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AlgorithmsResult>("/Agent/Crypto/GetAlgorithms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlgorithms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Algorithms Gets a list of algorithms supported by the server.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlgorithmsResult</returns>
        public async System.Threading.Tasks.Task<AlgorithmsResult> GetAlgorithmsAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Neuron.Agent.Client.ApiResponse<AlgorithmsResult> localVarResponse = await GetAlgorithmsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Algorithms Gets a list of algorithms supported by the server.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlgorithmsResult)</returns>
        public async System.Threading.Tasks.Task<Neuron.Agent.Client.ApiResponse<AlgorithmsResult>> GetAlgorithmsWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "CryptoApi.GetAlgorithms";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AlgorithmsResult>("/Agent/Crypto/GetAlgorithms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlgorithms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Public Key Gets the public key of a key pair.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPublicKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPublicKeyResponse</returns>
        public GetPublicKeyResponse GetPublicKey(GetPublicKeyBody getPublicKeyBody = default(GetPublicKeyBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.ApiResponse<GetPublicKeyResponse> localVarResponse = GetPublicKeyWithHttpInfo(getPublicKeyBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Public Key Gets the public key of a key pair.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPublicKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPublicKeyResponse</returns>
        public Neuron.Agent.Client.ApiResponse<GetPublicKeyResponse> GetPublicKeyWithHttpInfo(GetPublicKeyBody getPublicKeyBody = default(GetPublicKeyBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPublicKeyBody;

            localVarRequestOptions.Operation = "CryptoApi.GetPublicKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetPublicKeyResponse>("/Agent/Crypto/GetPublicKey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPublicKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Public Key Gets the public key of a key pair.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPublicKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPublicKeyResponse</returns>
        public async System.Threading.Tasks.Task<GetPublicKeyResponse> GetPublicKeyAsync(GetPublicKeyBody getPublicKeyBody = default(GetPublicKeyBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Neuron.Agent.Client.ApiResponse<GetPublicKeyResponse> localVarResponse = await GetPublicKeyWithHttpInfoAsync(getPublicKeyBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Public Key Gets the public key of a key pair.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPublicKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPublicKeyResponse)</returns>
        public async System.Threading.Tasks.Task<Neuron.Agent.Client.ApiResponse<GetPublicKeyResponse>> GetPublicKeyWithHttpInfoAsync(GetPublicKeyBody getPublicKeyBody = default(GetPublicKeyBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPublicKeyBody;

            localVarRequestOptions.Operation = "CryptoApi.GetPublicKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetPublicKeyResponse>("/Agent/Crypto/GetPublicKey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPublicKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
