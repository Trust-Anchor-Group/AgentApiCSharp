/*
 * Agent API
 *
 * The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary  socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do  basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs.  The Full API is 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Neuron.Agent.Client;
using Neuron.Agent.Model;

namespace Neuron.Agent.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Text Note
        /// </summary>
        /// <remarks>
        /// Adds a text note to a token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTextNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NoteResult</returns>
        NoteResult AddTextNote(AddTextNoteBody addTextNoteBody = default(AddTextNoteBody), int operationIndex = 0);

        /// <summary>
        /// Add Text Note
        /// </summary>
        /// <remarks>
        /// Adds a text note to a token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTextNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NoteResult</returns>
        ApiResponse<NoteResult> AddTextNoteWithHttpInfo(AddTextNoteBody addTextNoteBody = default(AddTextNoteBody), int operationIndex = 0);
        /// <summary>
        /// Add XML Note
        /// </summary>
        /// <remarks>
        /// Adds an XML note to a token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addXmlNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NoteResult</returns>
        NoteResult AddXmlNote(AddXmlNoteBody addXmlNoteBody = default(AddXmlNoteBody), int operationIndex = 0);

        /// <summary>
        /// Add XML Note
        /// </summary>
        /// <remarks>
        /// Adds an XML note to a token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addXmlNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NoteResult</returns>
        ApiResponse<NoteResult> AddXmlNoteWithHttpInfo(AddXmlNoteBody addXmlNoteBody = default(AddXmlNoteBody), int operationIndex = 0);
        /// <summary>
        /// Get Contract Tokens
        /// </summary>
        /// <remarks>
        /// Gets a list of tokens on the Neuron® owned by the account, for a specific contract.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokensResult</returns>
        TokensResult GetContractTokens(GetContractTokensBody getContractTokensBody = default(GetContractTokensBody), int operationIndex = 0);

        /// <summary>
        /// Get Contract Tokens
        /// </summary>
        /// <remarks>
        /// Gets a list of tokens on the Neuron® owned by the account, for a specific contract.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokensResult</returns>
        ApiResponse<TokensResult> GetContractTokensWithHttpInfo(GetContractTokensBody getContractTokensBody = default(GetContractTokensBody), int operationIndex = 0);
        /// <summary>
        /// Get Creation Attributes
        /// </summary>
        /// <remarks>
        /// Gets the creation attributes for a specific token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreationAttributes</returns>
        CreationAttributes GetCreationAttributes(Object body = default(Object), int operationIndex = 0);

        /// <summary>
        /// Get Creation Attributes
        /// </summary>
        /// <remarks>
        /// Gets the creation attributes for a specific token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreationAttributes</returns>
        ApiResponse<CreationAttributes> GetCreationAttributesWithHttpInfo(Object body = default(Object), int operationIndex = 0);
        /// <summary>
        /// Get Description
        /// </summary>
        /// <remarks>
        /// Creates a report relating to a state machine associated with a token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDescriptionBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportResult</returns>
        ReportResult GetDescription(GetDescriptionBody getDescriptionBody = default(GetDescriptionBody), int operationIndex = 0);

        /// <summary>
        /// Get Description
        /// </summary>
        /// <remarks>
        /// Creates a report relating to a state machine associated with a token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDescriptionBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportResult</returns>
        ApiResponse<ReportResult> GetDescriptionWithHttpInfo(GetDescriptionBody getDescriptionBody = default(GetDescriptionBody), int operationIndex = 0);
        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// Gets information about a specific token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenResult</returns>
        TokenResult GetToken(GetTokenBody getTokenBody = default(GetTokenBody), int operationIndex = 0);

        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// Gets information about a specific token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenResult</returns>
        ApiResponse<TokenResult> GetTokenWithHttpInfo(GetTokenBody getTokenBody = default(GetTokenBody), int operationIndex = 0);
        /// <summary>
        /// Get Token Events
        /// </summary>
        /// <remarks>
        /// Gets a list of events for a specific token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenEventsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EventsResult</returns>
        EventsResult GetTokenEvents(GetTokenEventsBody getTokenEventsBody = default(GetTokenEventsBody), int operationIndex = 0);

        /// <summary>
        /// Get Token Events
        /// </summary>
        /// <remarks>
        /// Gets a list of events for a specific token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenEventsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EventsResult</returns>
        ApiResponse<EventsResult> GetTokenEventsWithHttpInfo(GetTokenEventsBody getTokenEventsBody = default(GetTokenEventsBody), int operationIndex = 0);
        /// <summary>
        /// Get Tokens
        /// </summary>
        /// <remarks>
        /// Gets a list of tokens on the Neuron® owned by the account.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokensResult</returns>
        TokensResult GetTokens(GetTokensBody getTokensBody = default(GetTokensBody), int operationIndex = 0);

        /// <summary>
        /// Get Tokens
        /// </summary>
        /// <remarks>
        /// Gets a list of tokens on the Neuron® owned by the account.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokensResult</returns>
        ApiResponse<TokensResult> GetTokensWithHttpInfo(GetTokensBody getTokensBody = default(GetTokensBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Text Note
        /// </summary>
        /// <remarks>
        /// Adds a text note to a token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTextNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NoteResult</returns>
        System.Threading.Tasks.Task<NoteResult> AddTextNoteAsync(AddTextNoteBody addTextNoteBody = default(AddTextNoteBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Text Note
        /// </summary>
        /// <remarks>
        /// Adds a text note to a token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTextNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NoteResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<NoteResult>> AddTextNoteWithHttpInfoAsync(AddTextNoteBody addTextNoteBody = default(AddTextNoteBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add XML Note
        /// </summary>
        /// <remarks>
        /// Adds an XML note to a token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addXmlNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NoteResult</returns>
        System.Threading.Tasks.Task<NoteResult> AddXmlNoteAsync(AddXmlNoteBody addXmlNoteBody = default(AddXmlNoteBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add XML Note
        /// </summary>
        /// <remarks>
        /// Adds an XML note to a token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addXmlNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NoteResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<NoteResult>> AddXmlNoteWithHttpInfoAsync(AddXmlNoteBody addXmlNoteBody = default(AddXmlNoteBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Contract Tokens
        /// </summary>
        /// <remarks>
        /// Gets a list of tokens on the Neuron® owned by the account, for a specific contract.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokensResult</returns>
        System.Threading.Tasks.Task<TokensResult> GetContractTokensAsync(GetContractTokensBody getContractTokensBody = default(GetContractTokensBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Contract Tokens
        /// </summary>
        /// <remarks>
        /// Gets a list of tokens on the Neuron® owned by the account, for a specific contract.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokensResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokensResult>> GetContractTokensWithHttpInfoAsync(GetContractTokensBody getContractTokensBody = default(GetContractTokensBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Creation Attributes
        /// </summary>
        /// <remarks>
        /// Gets the creation attributes for a specific token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreationAttributes</returns>
        System.Threading.Tasks.Task<CreationAttributes> GetCreationAttributesAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Creation Attributes
        /// </summary>
        /// <remarks>
        /// Gets the creation attributes for a specific token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreationAttributes)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreationAttributes>> GetCreationAttributesWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Description
        /// </summary>
        /// <remarks>
        /// Creates a report relating to a state machine associated with a token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDescriptionBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportResult</returns>
        System.Threading.Tasks.Task<ReportResult> GetDescriptionAsync(GetDescriptionBody getDescriptionBody = default(GetDescriptionBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Description
        /// </summary>
        /// <remarks>
        /// Creates a report relating to a state machine associated with a token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDescriptionBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportResult>> GetDescriptionWithHttpInfoAsync(GetDescriptionBody getDescriptionBody = default(GetDescriptionBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// Gets information about a specific token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenResult</returns>
        System.Threading.Tasks.Task<TokenResult> GetTokenAsync(GetTokenBody getTokenBody = default(GetTokenBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// Gets information about a specific token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResult>> GetTokenWithHttpInfoAsync(GetTokenBody getTokenBody = default(GetTokenBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Token Events
        /// </summary>
        /// <remarks>
        /// Gets a list of events for a specific token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenEventsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventsResult</returns>
        System.Threading.Tasks.Task<EventsResult> GetTokenEventsAsync(GetTokenEventsBody getTokenEventsBody = default(GetTokenEventsBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Token Events
        /// </summary>
        /// <remarks>
        /// Gets a list of events for a specific token.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenEventsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventsResult>> GetTokenEventsWithHttpInfoAsync(GetTokenEventsBody getTokenEventsBody = default(GetTokenEventsBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Tokens
        /// </summary>
        /// <remarks>
        /// Gets a list of tokens on the Neuron® owned by the account.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokensResult</returns>
        System.Threading.Tasks.Task<TokensResult> GetTokensAsync(GetTokensBody getTokensBody = default(GetTokensBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Tokens
        /// </summary>
        /// <remarks>
        /// Gets a list of tokens on the Neuron® owned by the account.
        /// </remarks>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokensResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokensResult>> GetTokensWithHttpInfoAsync(GetTokensBody getTokensBody = default(GetTokensBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApi : ITokensApiSync, ITokensApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TokensApi : ITokensApi
    {
        private Neuron.Agent.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokensApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokensApi(string basePath)
        {
            this.Configuration = Neuron.Agent.Client.Configuration.MergeConfigurations(
                Neuron.Agent.Client.GlobalConfiguration.Instance,
                new Neuron.Agent.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Neuron.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Neuron.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Neuron.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TokensApi(Neuron.Agent.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Neuron.Agent.Client.Configuration.MergeConfigurations(
                Neuron.Agent.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Neuron.Agent.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Neuron.Agent.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Neuron.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TokensApi(Neuron.Agent.Client.ISynchronousClient client, Neuron.Agent.Client.IAsynchronousClient asyncClient, Neuron.Agent.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Neuron.Agent.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Neuron.Agent.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Neuron.Agent.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Neuron.Agent.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Neuron.Agent.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Text Note Adds a text note to a token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTextNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NoteResult</returns>
        public NoteResult AddTextNote(AddTextNoteBody addTextNoteBody = default(AddTextNoteBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.ApiResponse<NoteResult> localVarResponse = AddTextNoteWithHttpInfo(addTextNoteBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Text Note Adds a text note to a token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTextNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NoteResult</returns>
        public Neuron.Agent.Client.ApiResponse<NoteResult> AddTextNoteWithHttpInfo(AddTextNoteBody addTextNoteBody = default(AddTextNoteBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addTextNoteBody;

            localVarRequestOptions.Operation = "TokensApi.AddTextNote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NoteResult>("/Agent/Tokens/AddTextNote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddTextNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Text Note Adds a text note to a token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTextNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NoteResult</returns>
        public async System.Threading.Tasks.Task<NoteResult> AddTextNoteAsync(AddTextNoteBody addTextNoteBody = default(AddTextNoteBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Neuron.Agent.Client.ApiResponse<NoteResult> localVarResponse = await AddTextNoteWithHttpInfoAsync(addTextNoteBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Text Note Adds a text note to a token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTextNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NoteResult)</returns>
        public async System.Threading.Tasks.Task<Neuron.Agent.Client.ApiResponse<NoteResult>> AddTextNoteWithHttpInfoAsync(AddTextNoteBody addTextNoteBody = default(AddTextNoteBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addTextNoteBody;

            localVarRequestOptions.Operation = "TokensApi.AddTextNote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NoteResult>("/Agent/Tokens/AddTextNote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddTextNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add XML Note Adds an XML note to a token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addXmlNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NoteResult</returns>
        public NoteResult AddXmlNote(AddXmlNoteBody addXmlNoteBody = default(AddXmlNoteBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.ApiResponse<NoteResult> localVarResponse = AddXmlNoteWithHttpInfo(addXmlNoteBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add XML Note Adds an XML note to a token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addXmlNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NoteResult</returns>
        public Neuron.Agent.Client.ApiResponse<NoteResult> AddXmlNoteWithHttpInfo(AddXmlNoteBody addXmlNoteBody = default(AddXmlNoteBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addXmlNoteBody;

            localVarRequestOptions.Operation = "TokensApi.AddXmlNote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NoteResult>("/Agent/Tokens/AddXmlNote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddXmlNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add XML Note Adds an XML note to a token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addXmlNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NoteResult</returns>
        public async System.Threading.Tasks.Task<NoteResult> AddXmlNoteAsync(AddXmlNoteBody addXmlNoteBody = default(AddXmlNoteBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Neuron.Agent.Client.ApiResponse<NoteResult> localVarResponse = await AddXmlNoteWithHttpInfoAsync(addXmlNoteBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add XML Note Adds an XML note to a token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addXmlNoteBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NoteResult)</returns>
        public async System.Threading.Tasks.Task<Neuron.Agent.Client.ApiResponse<NoteResult>> AddXmlNoteWithHttpInfoAsync(AddXmlNoteBody addXmlNoteBody = default(AddXmlNoteBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addXmlNoteBody;

            localVarRequestOptions.Operation = "TokensApi.AddXmlNote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NoteResult>("/Agent/Tokens/AddXmlNote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddXmlNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Contract Tokens Gets a list of tokens on the Neuron® owned by the account, for a specific contract.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokensResult</returns>
        public TokensResult GetContractTokens(GetContractTokensBody getContractTokensBody = default(GetContractTokensBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.ApiResponse<TokensResult> localVarResponse = GetContractTokensWithHttpInfo(getContractTokensBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Contract Tokens Gets a list of tokens on the Neuron® owned by the account, for a specific contract.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokensResult</returns>
        public Neuron.Agent.Client.ApiResponse<TokensResult> GetContractTokensWithHttpInfo(GetContractTokensBody getContractTokensBody = default(GetContractTokensBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getContractTokensBody;

            localVarRequestOptions.Operation = "TokensApi.GetContractTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TokensResult>("/Agent/Tokens/GetContractTokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Contract Tokens Gets a list of tokens on the Neuron® owned by the account, for a specific contract.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokensResult</returns>
        public async System.Threading.Tasks.Task<TokensResult> GetContractTokensAsync(GetContractTokensBody getContractTokensBody = default(GetContractTokensBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Neuron.Agent.Client.ApiResponse<TokensResult> localVarResponse = await GetContractTokensWithHttpInfoAsync(getContractTokensBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Contract Tokens Gets a list of tokens on the Neuron® owned by the account, for a specific contract.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getContractTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokensResult)</returns>
        public async System.Threading.Tasks.Task<Neuron.Agent.Client.ApiResponse<TokensResult>> GetContractTokensWithHttpInfoAsync(GetContractTokensBody getContractTokensBody = default(GetContractTokensBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getContractTokensBody;

            localVarRequestOptions.Operation = "TokensApi.GetContractTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TokensResult>("/Agent/Tokens/GetContractTokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Creation Attributes Gets the creation attributes for a specific token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreationAttributes</returns>
        public CreationAttributes GetCreationAttributes(Object body = default(Object), int operationIndex = 0)
        {
            Neuron.Agent.Client.ApiResponse<CreationAttributes> localVarResponse = GetCreationAttributesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Creation Attributes Gets the creation attributes for a specific token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreationAttributes</returns>
        public Neuron.Agent.Client.ApiResponse<CreationAttributes> GetCreationAttributesWithHttpInfo(Object body = default(Object), int operationIndex = 0)
        {
            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TokensApi.GetCreationAttributes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreationAttributes>("/Agent/Tokens/GetCreationAttributes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreationAttributes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Creation Attributes Gets the creation attributes for a specific token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreationAttributes</returns>
        public async System.Threading.Tasks.Task<CreationAttributes> GetCreationAttributesAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Neuron.Agent.Client.ApiResponse<CreationAttributes> localVarResponse = await GetCreationAttributesWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Creation Attributes Gets the creation attributes for a specific token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreationAttributes)</returns>
        public async System.Threading.Tasks.Task<Neuron.Agent.Client.ApiResponse<CreationAttributes>> GetCreationAttributesWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TokensApi.GetCreationAttributes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreationAttributes>("/Agent/Tokens/GetCreationAttributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreationAttributes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Description Creates a report relating to a state machine associated with a token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDescriptionBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportResult</returns>
        public ReportResult GetDescription(GetDescriptionBody getDescriptionBody = default(GetDescriptionBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.ApiResponse<ReportResult> localVarResponse = GetDescriptionWithHttpInfo(getDescriptionBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Description Creates a report relating to a state machine associated with a token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDescriptionBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportResult</returns>
        public Neuron.Agent.Client.ApiResponse<ReportResult> GetDescriptionWithHttpInfo(GetDescriptionBody getDescriptionBody = default(GetDescriptionBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDescriptionBody;

            localVarRequestOptions.Operation = "TokensApi.GetDescription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReportResult>("/Agent/Tokens/GetDescription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Description Creates a report relating to a state machine associated with a token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDescriptionBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportResult</returns>
        public async System.Threading.Tasks.Task<ReportResult> GetDescriptionAsync(GetDescriptionBody getDescriptionBody = default(GetDescriptionBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Neuron.Agent.Client.ApiResponse<ReportResult> localVarResponse = await GetDescriptionWithHttpInfoAsync(getDescriptionBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Description Creates a report relating to a state machine associated with a token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDescriptionBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportResult)</returns>
        public async System.Threading.Tasks.Task<Neuron.Agent.Client.ApiResponse<ReportResult>> GetDescriptionWithHttpInfoAsync(GetDescriptionBody getDescriptionBody = default(GetDescriptionBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDescriptionBody;

            localVarRequestOptions.Operation = "TokensApi.GetDescription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReportResult>("/Agent/Tokens/GetDescription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Token Gets information about a specific token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenResult</returns>
        public TokenResult GetToken(GetTokenBody getTokenBody = default(GetTokenBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.ApiResponse<TokenResult> localVarResponse = GetTokenWithHttpInfo(getTokenBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Token Gets information about a specific token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenResult</returns>
        public Neuron.Agent.Client.ApiResponse<TokenResult> GetTokenWithHttpInfo(GetTokenBody getTokenBody = default(GetTokenBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTokenBody;

            localVarRequestOptions.Operation = "TokensApi.GetToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TokenResult>("/Agent/Tokens/GetToken", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Token Gets information about a specific token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenResult</returns>
        public async System.Threading.Tasks.Task<TokenResult> GetTokenAsync(GetTokenBody getTokenBody = default(GetTokenBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Neuron.Agent.Client.ApiResponse<TokenResult> localVarResponse = await GetTokenWithHttpInfoAsync(getTokenBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Token Gets information about a specific token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenResult)</returns>
        public async System.Threading.Tasks.Task<Neuron.Agent.Client.ApiResponse<TokenResult>> GetTokenWithHttpInfoAsync(GetTokenBody getTokenBody = default(GetTokenBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTokenBody;

            localVarRequestOptions.Operation = "TokensApi.GetToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TokenResult>("/Agent/Tokens/GetToken", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Token Events Gets a list of events for a specific token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenEventsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EventsResult</returns>
        public EventsResult GetTokenEvents(GetTokenEventsBody getTokenEventsBody = default(GetTokenEventsBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.ApiResponse<EventsResult> localVarResponse = GetTokenEventsWithHttpInfo(getTokenEventsBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Token Events Gets a list of events for a specific token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenEventsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EventsResult</returns>
        public Neuron.Agent.Client.ApiResponse<EventsResult> GetTokenEventsWithHttpInfo(GetTokenEventsBody getTokenEventsBody = default(GetTokenEventsBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTokenEventsBody;

            localVarRequestOptions.Operation = "TokensApi.GetTokenEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EventsResult>("/Agent/Tokens/GetTokenEvents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Token Events Gets a list of events for a specific token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenEventsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventsResult</returns>
        public async System.Threading.Tasks.Task<EventsResult> GetTokenEventsAsync(GetTokenEventsBody getTokenEventsBody = default(GetTokenEventsBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Neuron.Agent.Client.ApiResponse<EventsResult> localVarResponse = await GetTokenEventsWithHttpInfoAsync(getTokenEventsBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Token Events Gets a list of events for a specific token.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokenEventsBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventsResult)</returns>
        public async System.Threading.Tasks.Task<Neuron.Agent.Client.ApiResponse<EventsResult>> GetTokenEventsWithHttpInfoAsync(GetTokenEventsBody getTokenEventsBody = default(GetTokenEventsBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTokenEventsBody;

            localVarRequestOptions.Operation = "TokensApi.GetTokenEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EventsResult>("/Agent/Tokens/GetTokenEvents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tokens Gets a list of tokens on the Neuron® owned by the account.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokensResult</returns>
        public TokensResult GetTokens(GetTokensBody getTokensBody = default(GetTokensBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.ApiResponse<TokensResult> localVarResponse = GetTokensWithHttpInfo(getTokensBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tokens Gets a list of tokens on the Neuron® owned by the account.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokensResult</returns>
        public Neuron.Agent.Client.ApiResponse<TokensResult> GetTokensWithHttpInfo(GetTokensBody getTokensBody = default(GetTokensBody), int operationIndex = 0)
        {
            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTokensBody;

            localVarRequestOptions.Operation = "TokensApi.GetTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TokensResult>("/Agent/Tokens/GetTokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tokens Gets a list of tokens on the Neuron® owned by the account.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokensResult</returns>
        public async System.Threading.Tasks.Task<TokensResult> GetTokensAsync(GetTokensBody getTokensBody = default(GetTokensBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Neuron.Agent.Client.ApiResponse<TokensResult> localVarResponse = await GetTokensWithHttpInfoAsync(getTokensBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tokens Gets a list of tokens on the Neuron® owned by the account.
        /// </summary>
        /// <exception cref="Neuron.Agent.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTokensBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokensResult)</returns>
        public async System.Threading.Tasks.Task<Neuron.Agent.Client.ApiResponse<TokensResult>> GetTokensWithHttpInfoAsync(GetTokensBody getTokensBody = default(GetTokensBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Neuron.Agent.Client.RequestOptions localVarRequestOptions = new Neuron.Agent.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml",
                "text/plain"
            };

            var localVarContentType = Neuron.Agent.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Neuron.Agent.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTokensBody;

            localVarRequestOptions.Operation = "TokensApi.GetTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TokensResult>("/Agent/Tokens/GetTokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
